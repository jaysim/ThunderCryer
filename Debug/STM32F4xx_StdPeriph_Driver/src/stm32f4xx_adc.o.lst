   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	ADC_DeInit
  20              		.thumb
  21              		.thumb_func
  23              	ADC_DeInit:
  24              	.LFB110:
  25              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Initialization and Configuration (in addition to ADC multi mode 
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             selection)
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Analog Watchdog configuration
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             management 
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels Configuration
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels DMA Configuration
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Injected channels Configuration
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Interrupts and flags management
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @verbatim
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                   How to use this driver
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          1.  Enable the ADC interface clock using 
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *     
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          2. ADC pins configuration
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *               - Enable the clock for the ADC GPIOs using the following function:
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                - Configure these ADC pins in analog mode using GPIO_Init();  
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          3. Configure the ADC Prescaler, conversion resolution and data 
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              alignment using the ADC_Init() function.
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          4. Activate the ADC peripheral using ADC_Cmd() function.
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Regular channels group configuration
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================    
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC regular channels group features, use 
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_Init() and ADC_RegularChannelConfig() functions.
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configurate and activate the Discontinuous mode, use the 
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetConversionValue()
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Multi mode ADCs Regular channels configuration
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===============================================
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Refer to "Regular channels group configuration" description to
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              configure the ADC1, ADC2 and ADC3 regular channels.        
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Select the Multi mode ADC regular channels features (dual or 
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              triple mode) using ADC_CommonInit() function and configure 
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.        
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Read the ADCs converted values using the 
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_GetMultiModeConversionValue() function.
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          DMA for Regular channels group features configuration
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================================== 
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the DMA mode for regular channels group, use the 
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             ADC_DMACmd() function.
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the generation of DMA requests continuously at the end
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             function.
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Injected channels group configuration
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          =====================================    
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC Injected channels group features, use 
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the Injected Discontinuous mode, use the 
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedDiscModeCmd() function.  
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.        
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @endverbatim
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @attention
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************  
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC 
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR1 register Mask */
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR2 register Mask */
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SQx mask */
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC L Mask */
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JL mask */
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim    
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       Initialization and Configuration functions
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to:
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Initialize and configure the ADC Prescaler
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Conversion Resolution (12bit..6bit)
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Scan Conversion Mode (multichannels or one channel) for regular group
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular group
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - External trigger Edge and source of regular group, 
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Converted data alignment (left or right)
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - The number of ADC conversions that will be done using the sequencer for 
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel group
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Multi ADC mode selection
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Direct memory access mode selection for multi ADC mode  
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Delay between 2 sampling phases (used in dual or triple interleaved modes)
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Enable or disable the ADC peripheral
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         values.
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  26              		.loc 1 207 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 7, -8
  35 0002 00AF     		add	r7, sp, #0
  36              	.LCFI1:
  37              		.cfi_def_cfa_register 7
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  38              		.loc 1 209 0
  39 0004 4FF48070 		mov	r0, #256
  40 0008 4FF00101 		mov	r1, #1
  41 000c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  42              		.loc 1 212 0
  43 0010 4FF48070 		mov	r0, #256
  44 0014 4FF00001 		mov	r1, #0
  45 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
  46              		.loc 1 213 0
  47 001c 80BD     		pop	{r7, pc}
  48              		.cfi_endproc
  49              	.LFE110:
  51 001e 00BF     		.align	2
  52              		.global	ADC_Init
  53              		.thumb
  54              		.thumb_func
  56              	ADC_Init:
  57              	.LFB111:
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  58              		.loc 1 229 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 16
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0020 80B4     		push	{r7}
  64              	.LCFI2:
  65              		.cfi_def_cfa_offset 4
  66              		.cfi_offset 7, -4
  67 0022 85B0     		sub	sp, sp, #20
  68              	.LCFI3:
  69              		.cfi_def_cfa_offset 24
  70 0024 00AF     		add	r7, sp, #0
  71              	.LCFI4:
  72              		.cfi_def_cfa_register 7
  73 0026 7860     		str	r0, [r7, #4]
  74 0028 3960     		str	r1, [r7, #0]
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
  75              		.loc 1 230 0
  76 002a 4FF00003 		mov	r3, #0
  77 002e FB60     		str	r3, [r7, #12]
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
  78              		.loc 1 231 0
  79 0030 4FF00003 		mov	r3, #0
  80 0034 FB72     		strb	r3, [r7, #11]
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
  81              		.loc 1 244 0
  82 0036 7B68     		ldr	r3, [r7, #4]
  83 0038 5B68     		ldr	r3, [r3, #4]
  84 003a FB60     		str	r3, [r7, #12]
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  85              		.loc 1 247 0
  86 003c FB68     		ldr	r3, [r7, #12]
  87 003e 23F04073 		bic	r3, r3, #50331648
  88 0042 23F48073 		bic	r3, r3, #256
  89 0046 FB60     		str	r3, [r7, #12]
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  90              		.loc 1 252 0
  91 0048 3B68     		ldr	r3, [r7, #0]
  92 004a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
  93 004c 4FEA0322 		lsl	r2, r3, #8
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
  94              		.loc 1 253 0
  95 0050 3B68     		ldr	r3, [r7, #0]
  96 0052 1B68     		ldr	r3, [r3, #0]
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  97              		.loc 1 252 0
  98 0054 1343     		orrs	r3, r3, r2
  99 0056 FA68     		ldr	r2, [r7, #12]
 100 0058 1343     		orrs	r3, r3, r2
 101 005a FB60     		str	r3, [r7, #12]
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 102              		.loc 1 255 0
 103 005c 7B68     		ldr	r3, [r7, #4]
 104 005e FA68     		ldr	r2, [r7, #12]
 105 0060 5A60     		str	r2, [r3, #4]
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
 106              		.loc 1 258 0
 107 0062 7B68     		ldr	r3, [r7, #4]
 108 0064 9B68     		ldr	r3, [r3, #8]
 109 0066 FB60     		str	r3, [r7, #12]
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 110              		.loc 1 261 0
 111 0068 FA68     		ldr	r2, [r7, #12]
 112 006a 4FF2FD73 		movw	r3, #63485
 113 006e CCF2FF03 		movt	r3, 49407
 114 0072 1340     		ands	r3, r3, r2
 115 0074 FB60     		str	r3, [r7, #12]
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      continuous conversion mode */
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 116              		.loc 1 269 0
 117 0076 3B68     		ldr	r3, [r7, #0]
 118 0078 1A69     		ldr	r2, [r3, #16]
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 119              		.loc 1 270 0
 120 007a 3B68     		ldr	r3, [r7, #0]
 121 007c DB68     		ldr	r3, [r3, #12]
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 122              		.loc 1 269 0
 123 007e 1A43     		orrs	r2, r2, r3
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 124              		.loc 1 271 0
 125 0080 3B68     		ldr	r3, [r7, #0]
 126 0082 9B68     		ldr	r3, [r3, #8]
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 127              		.loc 1 270 0
 128 0084 1A43     		orrs	r2, r2, r3
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 129              		.loc 1 272 0
 130 0086 3B68     		ldr	r3, [r7, #0]
 131 0088 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 132 008a 4FEA4303 		lsl	r3, r3, #1
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 133              		.loc 1 269 0
 134 008e 1343     		orrs	r3, r3, r2
 135 0090 FA68     		ldr	r2, [r7, #12]
 136 0092 1343     		orrs	r3, r3, r2
 137 0094 FB60     		str	r3, [r7, #12]
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 138              		.loc 1 275 0
 139 0096 7B68     		ldr	r3, [r7, #4]
 140 0098 FA68     		ldr	r2, [r7, #12]
 141 009a 9A60     		str	r2, [r3, #8]
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 142              		.loc 1 278 0
 143 009c 7B68     		ldr	r3, [r7, #4]
 144 009e DB6A     		ldr	r3, [r3, #44]
 145 00a0 FB60     		str	r3, [r7, #12]
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear L bits */
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 146              		.loc 1 281 0
 147 00a2 FB68     		ldr	r3, [r7, #12]
 148 00a4 23F47003 		bic	r3, r3, #15728640
 149 00a8 FB60     		str	r3, [r7, #12]
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 150              		.loc 1 285 0
 151 00aa 3B68     		ldr	r3, [r7, #0]
 152 00ac 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 153 00ae 03F1FF33 		add	r3, r3, #-1
 154 00b2 DAB2     		uxtb	r2, r3
 155 00b4 FB7A     		ldrb	r3, [r7, #11]
 156 00b6 1343     		orrs	r3, r3, r2
 157 00b8 FB72     		strb	r3, [r7, #11]
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 158              		.loc 1 286 0
 159 00ba FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 160 00bc 4FEA0353 		lsl	r3, r3, #20
 161 00c0 FA68     		ldr	r2, [r7, #12]
 162 00c2 1343     		orrs	r3, r3, r2
 163 00c4 FB60     		str	r3, [r7, #12]
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 164              		.loc 1 289 0
 165 00c6 7B68     		ldr	r3, [r7, #4]
 166 00c8 FA68     		ldr	r2, [r7, #12]
 167 00ca DA62     		str	r2, [r3, #44]
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 168              		.loc 1 290 0
 169 00cc 07F11407 		add	r7, r7, #20
 170 00d0 BD46     		mov	sp, r7
 171 00d2 80BC     		pop	{r7}
 172 00d4 7047     		bx	lr
 173              		.cfi_endproc
 174              	.LFE111:
 176 00d6 00BF     		.align	2
 177              		.global	ADC_StructInit
 178              		.thumb
 179              		.thumb_func
 181              	ADC_StructInit:
 182              	.LFB112:
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         be initialized.
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 183              		.loc 1 304 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 8
 186              		@ frame_needed = 1, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 188 00d8 80B4     		push	{r7}
 189              	.LCFI5:
 190              		.cfi_def_cfa_offset 4
 191              		.cfi_offset 7, -4
 192 00da 83B0     		sub	sp, sp, #12
 193              	.LCFI6:
 194              		.cfi_def_cfa_offset 16
 195 00dc 00AF     		add	r7, sp, #0
 196              	.LCFI7:
 197              		.cfi_def_cfa_register 7
 198 00de 7860     		str	r0, [r7, #4]
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 199              		.loc 1 306 0
 200 00e0 7B68     		ldr	r3, [r7, #4]
 201 00e2 4FF00002 		mov	r2, #0
 202 00e6 1A60     		str	r2, [r3, #0]
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 203              		.loc 1 309 0
 204 00e8 7B68     		ldr	r3, [r7, #4]
 205 00ea 4FF00002 		mov	r2, #0
 206 00ee 1A71     		strb	r2, [r3, #4]
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 207              		.loc 1 312 0
 208 00f0 7B68     		ldr	r3, [r7, #4]
 209 00f2 4FF00002 		mov	r2, #0
 210 00f6 5A71     		strb	r2, [r3, #5]
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 211              		.loc 1 315 0
 212 00f8 7B68     		ldr	r3, [r7, #4]
 213 00fa 4FF00002 		mov	r2, #0
 214 00fe 9A60     		str	r2, [r3, #8]
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 215              		.loc 1 318 0
 216 0100 7B68     		ldr	r3, [r7, #4]
 217 0102 4FF00002 		mov	r2, #0
 218 0106 DA60     		str	r2, [r3, #12]
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 219              		.loc 1 321 0
 220 0108 7B68     		ldr	r3, [r7, #4]
 221 010a 4FF00002 		mov	r2, #0
 222 010e 1A61     		str	r2, [r3, #16]
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 223              		.loc 1 324 0
 224 0110 7B68     		ldr	r3, [r7, #4]
 225 0112 4FF00102 		mov	r2, #1
 226 0116 1A75     		strb	r2, [r3, #20]
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 227              		.loc 1 325 0
 228 0118 07F10C07 		add	r7, r7, #12
 229 011c BD46     		mov	sp, r7
 230 011e 80BC     		pop	{r7}
 231 0120 7047     		bx	lr
 232              		.cfi_endproc
 233              	.LFE112:
 235 0122 00BF     		.align	2
 236              		.global	ADC_CommonInit
 237              		.thumb
 238              		.thumb_func
 240              	ADC_CommonInit:
 241              	.LFB113:
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 242              		.loc 1 335 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 16
 245              		@ frame_needed = 1, uses_anonymous_args = 0
 246              		@ link register save eliminated.
 247 0124 80B4     		push	{r7}
 248              	.LCFI8:
 249              		.cfi_def_cfa_offset 4
 250              		.cfi_offset 7, -4
 251 0126 85B0     		sub	sp, sp, #20
 252              	.LCFI9:
 253              		.cfi_def_cfa_offset 24
 254 0128 00AF     		add	r7, sp, #0
 255              	.LCFI10:
 256              		.cfi_def_cfa_register 7
 257 012a 7860     		str	r0, [r7, #4]
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 258              		.loc 1 336 0
 259 012c 4FF00003 		mov	r3, #0
 260 0130 FB60     		str	r3, [r7, #12]
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 261              		.loc 1 344 0
 262 0132 4FF40C53 		mov	r3, #8960
 263 0136 C4F20103 		movt	r3, 16385
 264 013a 5B68     		ldr	r3, [r3, #4]
 265 013c FB60     		str	r3, [r7, #12]
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 266              		.loc 1 347 0
 267 013e FA68     		ldr	r2, [r7, #12]
 268 0140 43F2E003 		movw	r3, #12512
 269 0144 CFF6FC73 		movt	r3, 65532
 270 0148 1340     		ands	r3, r3, r2
 271 014a FB60     		str	r3, [r7, #12]
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 272              		.loc 1 355 0
 273 014c 7B68     		ldr	r3, [r7, #4]
 274 014e 1A68     		ldr	r2, [r3, #0]
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 275              		.loc 1 356 0
 276 0150 7B68     		ldr	r3, [r7, #4]
 277 0152 5B68     		ldr	r3, [r3, #4]
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 278              		.loc 1 355 0
 279 0154 1A43     		orrs	r2, r2, r3
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 280              		.loc 1 357 0
 281 0156 7B68     		ldr	r3, [r7, #4]
 282 0158 9B68     		ldr	r3, [r3, #8]
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 283              		.loc 1 356 0
 284 015a 1A43     		orrs	r2, r2, r3
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 285              		.loc 1 358 0
 286 015c 7B68     		ldr	r3, [r7, #4]
 287 015e DB68     		ldr	r3, [r3, #12]
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 288              		.loc 1 355 0
 289 0160 1343     		orrs	r3, r3, r2
 290 0162 FA68     		ldr	r2, [r7, #12]
 291 0164 1343     		orrs	r3, r3, r2
 292 0166 FB60     		str	r3, [r7, #12]
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 293              		.loc 1 361 0
 294 0168 4FF40C53 		mov	r3, #8960
 295 016c C4F20103 		movt	r3, 16385
 296 0170 FA68     		ldr	r2, [r7, #12]
 297 0172 5A60     		str	r2, [r3, #4]
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 298              		.loc 1 362 0
 299 0174 07F11407 		add	r7, r7, #20
 300 0178 BD46     		mov	sp, r7
 301 017a 80BC     		pop	{r7}
 302 017c 7047     		bx	lr
 303              		.cfi_endproc
 304              	.LFE113:
 306 017e 00BF     		.align	2
 307              		.global	ADC_CommonStructInit
 308              		.thumb
 309              		.thumb_func
 311              	ADC_CommonStructInit:
 312              	.LFB114:
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         which will be initialized.
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 313              		.loc 1 371 0
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 8
 316              		@ frame_needed = 1, uses_anonymous_args = 0
 317              		@ link register save eliminated.
 318 0180 80B4     		push	{r7}
 319              	.LCFI11:
 320              		.cfi_def_cfa_offset 4
 321              		.cfi_offset 7, -4
 322 0182 83B0     		sub	sp, sp, #12
 323              	.LCFI12:
 324              		.cfi_def_cfa_offset 16
 325 0184 00AF     		add	r7, sp, #0
 326              	.LCFI13:
 327              		.cfi_def_cfa_register 7
 328 0186 7860     		str	r0, [r7, #4]
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 329              		.loc 1 373 0
 330 0188 7B68     		ldr	r3, [r7, #4]
 331 018a 4FF00002 		mov	r2, #0
 332 018e 1A60     		str	r2, [r3, #0]
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 333              		.loc 1 376 0
 334 0190 7B68     		ldr	r3, [r7, #4]
 335 0192 4FF00002 		mov	r2, #0
 336 0196 5A60     		str	r2, [r3, #4]
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 337              		.loc 1 379 0
 338 0198 7B68     		ldr	r3, [r7, #4]
 339 019a 4FF00002 		mov	r2, #0
 340 019e 9A60     		str	r2, [r3, #8]
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 341              		.loc 1 382 0
 342 01a0 7B68     		ldr	r3, [r7, #4]
 343 01a2 4FF00002 		mov	r2, #0
 344 01a6 DA60     		str	r2, [r3, #12]
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 345              		.loc 1 383 0
 346 01a8 07F10C07 		add	r7, r7, #12
 347 01ac BD46     		mov	sp, r7
 348 01ae 80BC     		pop	{r7}
 349 01b0 7047     		bx	lr
 350              		.cfi_endproc
 351              	.LFE114:
 353 01b2 00BF     		.align	2
 354              		.global	ADC_Cmd
 355              		.thumb
 356              		.thumb_func
 358              	ADC_Cmd:
 359              	.LFB115:
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 360              		.loc 1 393 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 8
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 365 01b4 80B4     		push	{r7}
 366              	.LCFI14:
 367              		.cfi_def_cfa_offset 4
 368              		.cfi_offset 7, -4
 369 01b6 83B0     		sub	sp, sp, #12
 370              	.LCFI15:
 371              		.cfi_def_cfa_offset 16
 372 01b8 00AF     		add	r7, sp, #0
 373              	.LCFI16:
 374              		.cfi_def_cfa_register 7
 375 01ba 7860     		str	r0, [r7, #4]
 376 01bc 0B46     		mov	r3, r1
 377 01be FB70     		strb	r3, [r7, #3]
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 378              		.loc 1 397 0
 379 01c0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 380 01c2 002B     		cmp	r3, #0
 381 01c4 06D0     		beq	.L7
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 382              		.loc 1 400 0
 383 01c6 7B68     		ldr	r3, [r7, #4]
 384 01c8 9B68     		ldr	r3, [r3, #8]
 385 01ca 43F00102 		orr	r2, r3, #1
 386 01ce 7B68     		ldr	r3, [r7, #4]
 387 01d0 9A60     		str	r2, [r3, #8]
 388 01d2 05E0     		b	.L6
 389              	.L7:
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 390              		.loc 1 405 0
 391 01d4 7B68     		ldr	r3, [r7, #4]
 392 01d6 9B68     		ldr	r3, [r3, #8]
 393 01d8 23F00102 		bic	r2, r3, #1
 394 01dc 7B68     		ldr	r3, [r7, #4]
 395 01de 9A60     		str	r2, [r3, #8]
 396              	.L6:
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 397              		.loc 1 407 0
 398 01e0 07F10C07 		add	r7, r7, #12
 399 01e4 BD46     		mov	sp, r7
 400 01e6 80BC     		pop	{r7}
 401 01e8 7047     		bx	lr
 402              		.cfi_endproc
 403              	.LFE115:
 405 01ea 00BF     		.align	2
 406              		.global	ADC_AnalogWatchdogCmd
 407              		.thumb
 408              		.thumb_func
 410              	ADC_AnalogWatchdogCmd:
 411              	.LFB116:
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                     Analog Watchdog configuration functions
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the Analog Watchdog
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (AWD) feature in the ADC.
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration Analog Watchdog is done following these steps :
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. the ADC guarded channel(s) is (are) selected using the 
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_AnalogWatchdogSingleChannelConfig() function.
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. The Analog watchdog lower and higher threshold are configured using the  
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      ADC_AnalogWatchdogThresholdsConfig() function.
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. The Analog watchdog is enabled and configured to enable the check, on one
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       or more channels, using the  ADC_AnalogWatchdogCmd() function.
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         injected channels
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None	  
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 412              		.loc 1 451 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 16
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416              		@ link register save eliminated.
 417 01ec 80B4     		push	{r7}
 418              	.LCFI17:
 419              		.cfi_def_cfa_offset 4
 420              		.cfi_offset 7, -4
 421 01ee 85B0     		sub	sp, sp, #20
 422              	.LCFI18:
 423              		.cfi_def_cfa_offset 24
 424 01f0 00AF     		add	r7, sp, #0
 425              	.LCFI19:
 426              		.cfi_def_cfa_register 7
 427 01f2 7860     		str	r0, [r7, #4]
 428 01f4 3960     		str	r1, [r7, #0]
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 429              		.loc 1 452 0
 430 01f6 4FF00003 		mov	r3, #0
 431 01fa FB60     		str	r3, [r7, #12]
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 432              		.loc 1 458 0
 433 01fc 7B68     		ldr	r3, [r7, #4]
 434 01fe 5B68     		ldr	r3, [r3, #4]
 435 0200 FB60     		str	r3, [r7, #12]
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 436              		.loc 1 461 0
 437 0202 FB68     		ldr	r3, [r7, #12]
 438 0204 23F44003 		bic	r3, r3, #12582912
 439 0208 23F40073 		bic	r3, r3, #512
 440 020c FB60     		str	r3, [r7, #12]
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 441              		.loc 1 464 0
 442 020e FA68     		ldr	r2, [r7, #12]
 443 0210 3B68     		ldr	r3, [r7, #0]
 444 0212 1343     		orrs	r3, r3, r2
 445 0214 FB60     		str	r3, [r7, #12]
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 446              		.loc 1 467 0
 447 0216 7B68     		ldr	r3, [r7, #4]
 448 0218 FA68     		ldr	r2, [r7, #12]
 449 021a 5A60     		str	r2, [r3, #4]
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 450              		.loc 1 468 0
 451 021c 07F11407 		add	r7, r7, #20
 452 0220 BD46     		mov	sp, r7
 453 0222 80BC     		pop	{r7}
 454 0224 7047     		bx	lr
 455              		.cfi_endproc
 456              	.LFE116:
 458 0226 00BF     		.align	2
 459              		.global	ADC_AnalogWatchdogThresholdsConfig
 460              		.thumb
 461              		.thumb_func
 463              	ADC_AnalogWatchdogThresholdsConfig:
 464              	.LFB117:
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 465              		.loc 1 481 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 8
 468              		@ frame_needed = 1, uses_anonymous_args = 0
 469              		@ link register save eliminated.
 470 0228 80B4     		push	{r7}
 471              	.LCFI20:
 472              		.cfi_def_cfa_offset 4
 473              		.cfi_offset 7, -4
 474 022a 83B0     		sub	sp, sp, #12
 475              	.LCFI21:
 476              		.cfi_def_cfa_offset 16
 477 022c 00AF     		add	r7, sp, #0
 478              	.LCFI22:
 479              		.cfi_def_cfa_register 7
 480 022e 7860     		str	r0, [r7, #4]
 481 0230 1346     		mov	r3, r2
 482 0232 0A46     		mov	r2, r1	@ movhi
 483 0234 7A80     		strh	r2, [r7, #2]	@ movhi
 484 0236 3B80     		strh	r3, [r7, #0]	@ movhi
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 485              		.loc 1 488 0
 486 0238 7A88     		ldrh	r2, [r7, #2]
 487 023a 7B68     		ldr	r3, [r7, #4]
 488 023c 5A62     		str	r2, [r3, #36]
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 489              		.loc 1 491 0
 490 023e 3A88     		ldrh	r2, [r7, #0]
 491 0240 7B68     		ldr	r3, [r7, #4]
 492 0242 9A62     		str	r2, [r3, #40]
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 493              		.loc 1 492 0
 494 0244 07F10C07 		add	r7, r7, #12
 495 0248 BD46     		mov	sp, r7
 496 024a 80BC     		pop	{r7}
 497 024c 7047     		bx	lr
 498              		.cfi_endproc
 499              	.LFE117:
 501 024e 00BF     		.align	2
 502              		.global	ADC_AnalogWatchdogSingleChannelConfig
 503              		.thumb
 504              		.thumb_func
 506              	ADC_AnalogWatchdogSingleChannelConfig:
 507              	.LFB118:
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 508              		.loc 1 521 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 16
 511              		@ frame_needed = 1, uses_anonymous_args = 0
 512              		@ link register save eliminated.
 513 0250 80B4     		push	{r7}
 514              	.LCFI23:
 515              		.cfi_def_cfa_offset 4
 516              		.cfi_offset 7, -4
 517 0252 85B0     		sub	sp, sp, #20
 518              	.LCFI24:
 519              		.cfi_def_cfa_offset 24
 520 0254 00AF     		add	r7, sp, #0
 521              	.LCFI25:
 522              		.cfi_def_cfa_register 7
 523 0256 7860     		str	r0, [r7, #4]
 524 0258 0B46     		mov	r3, r1
 525 025a FB70     		strb	r3, [r7, #3]
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 526              		.loc 1 522 0
 527 025c 4FF00003 		mov	r3, #0
 528 0260 FB60     		str	r3, [r7, #12]
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 529              		.loc 1 528 0
 530 0262 7B68     		ldr	r3, [r7, #4]
 531 0264 5B68     		ldr	r3, [r3, #4]
 532 0266 FB60     		str	r3, [r7, #12]
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 533              		.loc 1 531 0
 534 0268 FB68     		ldr	r3, [r7, #12]
 535 026a 23F01F03 		bic	r3, r3, #31
 536 026e FB60     		str	r3, [r7, #12]
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 537              		.loc 1 534 0
 538 0270 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 539 0272 FA68     		ldr	r2, [r7, #12]
 540 0274 1343     		orrs	r3, r3, r2
 541 0276 FB60     		str	r3, [r7, #12]
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 542              		.loc 1 537 0
 543 0278 7B68     		ldr	r3, [r7, #4]
 544 027a FA68     		ldr	r2, [r7, #12]
 545 027c 5A60     		str	r2, [r3, #4]
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 546              		.loc 1 538 0
 547 027e 07F11407 		add	r7, r7, #20
 548 0282 BD46     		mov	sp, r7
 549 0284 80BC     		pop	{r7}
 550 0286 7047     		bx	lr
 551              		.cfi_endproc
 552              	.LFE118:
 554              		.align	2
 555              		.global	ADC_TempSensorVrefintCmd
 556              		.thumb
 557              		.thumb_func
 559              	ADC_TempSensorVrefintCmd:
 560              	.LFB119:
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                Temperature Sensor, Vrefint and VBAT management functions
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to enable/ disable the internal 
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   connections between the ADC and the Temperature Sensor, the Vrefint and the
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Vbat sources.
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the Temperature sensor and Vrefint channels 
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   voltages is done following these steps :
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of Temperature sensor and Vrefint sources 
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage values, using ADC_GetConversionValue() or  
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the VBAT channel voltage is done following 
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   these steps :
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of VBAT source with the ADC channel using 
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_VBATCmd() function. 
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_InjectedChannelConfig() functions 
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage value, using ADC_GetConversionValue() or  
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 561              		.loc 1 586 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 8
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 566 0288 80B4     		push	{r7}
 567              	.LCFI26:
 568              		.cfi_def_cfa_offset 4
 569              		.cfi_offset 7, -4
 570 028a 83B0     		sub	sp, sp, #12
 571              	.LCFI27:
 572              		.cfi_def_cfa_offset 16
 573 028c 00AF     		add	r7, sp, #0
 574              	.LCFI28:
 575              		.cfi_def_cfa_register 7
 576 028e 0346     		mov	r3, r0
 577 0290 FB71     		strb	r3, [r7, #7]
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 578              		.loc 1 589 0
 579 0292 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 580 0294 002B     		cmp	r3, #0
 581 0296 0CD0     		beq	.L13
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 582              		.loc 1 592 0
 583 0298 4FF40C53 		mov	r3, #8960
 584 029c C4F20103 		movt	r3, 16385
 585 02a0 4FF40C52 		mov	r2, #8960
 586 02a4 C4F20102 		movt	r2, 16385
 587 02a8 5268     		ldr	r2, [r2, #4]
 588 02aa 42F40002 		orr	r2, r2, #8388608
 589 02ae 5A60     		str	r2, [r3, #4]
 590 02b0 0BE0     		b	.L12
 591              	.L13:
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 592              		.loc 1 597 0
 593 02b2 4FF40C53 		mov	r3, #8960
 594 02b6 C4F20103 		movt	r3, 16385
 595 02ba 4FF40C52 		mov	r2, #8960
 596 02be C4F20102 		movt	r2, 16385
 597 02c2 5268     		ldr	r2, [r2, #4]
 598 02c4 22F40002 		bic	r2, r2, #8388608
 599 02c8 5A60     		str	r2, [r3, #4]
 600              	.L12:
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 601              		.loc 1 599 0
 602 02ca 07F10C07 		add	r7, r7, #12
 603 02ce BD46     		mov	sp, r7
 604 02d0 80BC     		pop	{r7}
 605 02d2 7047     		bx	lr
 606              		.cfi_endproc
 607              	.LFE119:
 609              		.align	2
 610              		.global	ADC_VBATCmd
 611              		.thumb
 612              		.thumb_func
 614              	ADC_VBATCmd:
 615              	.LFB120:
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 616              		.loc 1 608 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 8
 619              		@ frame_needed = 1, uses_anonymous_args = 0
 620              		@ link register save eliminated.
 621 02d4 80B4     		push	{r7}
 622              	.LCFI29:
 623              		.cfi_def_cfa_offset 4
 624              		.cfi_offset 7, -4
 625 02d6 83B0     		sub	sp, sp, #12
 626              	.LCFI30:
 627              		.cfi_def_cfa_offset 16
 628 02d8 00AF     		add	r7, sp, #0
 629              	.LCFI31:
 630              		.cfi_def_cfa_register 7
 631 02da 0346     		mov	r3, r0
 632 02dc FB71     		strb	r3, [r7, #7]
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 633              		.loc 1 611 0
 634 02de FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 635 02e0 002B     		cmp	r3, #0
 636 02e2 0CD0     		beq	.L16
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 637              		.loc 1 614 0
 638 02e4 4FF40C53 		mov	r3, #8960
 639 02e8 C4F20103 		movt	r3, 16385
 640 02ec 4FF40C52 		mov	r2, #8960
 641 02f0 C4F20102 		movt	r2, 16385
 642 02f4 5268     		ldr	r2, [r2, #4]
 643 02f6 42F48002 		orr	r2, r2, #4194304
 644 02fa 5A60     		str	r2, [r3, #4]
 645 02fc 0BE0     		b	.L15
 646              	.L16:
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 647              		.loc 1 619 0
 648 02fe 4FF40C53 		mov	r3, #8960
 649 0302 C4F20103 		movt	r3, 16385
 650 0306 4FF40C52 		mov	r2, #8960
 651 030a C4F20102 		movt	r2, 16385
 652 030e 5268     		ldr	r2, [r2, #4]
 653 0310 22F48002 		bic	r2, r2, #4194304
 654 0314 5A60     		str	r2, [r3, #4]
 655              	.L15:
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 656              		.loc 1 621 0
 657 0316 07F10C07 		add	r7, r7, #12
 658 031a BD46     		mov	sp, r7
 659 031c 80BC     		pop	{r7}
 660 031e 7047     		bx	lr
 661              		.cfi_endproc
 662              	.LFE120:
 664              		.align	2
 665              		.global	ADC_RegularChannelConfig
 666              		.thumb
 667              		.thumb_func
 669              	ADC_RegularChannelConfig:
 670              	.LFB121:
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                   Regular Channels Configuration functions
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to manage the ADC's regular channels,
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration and management functions for regular channels: This subsection 
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      provides functions allowing to configure the ADC regular channels :    
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the rank in the regular group sequencer for each channel
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the sampling time for each channel
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the conversion Trigger for regular channels
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the desired EOC event behavior configuration
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the continuous Mode  (*)
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the Discontinuous Mode 
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      Please Note that the following features for regular channels are configurated
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      using the ADC_Init() function : 
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - scan mode activation 
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - continuous mode activation (**) 
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger source  
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger edge 
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - number of conversion in the regular channels group sequencer.
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note (*) and (**) are performing the same configuration
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   2. Get the conversion data: This subsection provides an important function in 
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      the ADC peripheral since it returns the converted data of the current 
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel. When the Conversion value is read, the EOC Flag is 
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      automatically cleared.
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            results data (in the selected multi mode) can be returned in the same 
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            time using ADC_GetMultiModeConversionValue() function. 
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****        
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 671              		.loc 1 709 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 16
 674              		@ frame_needed = 1, uses_anonymous_args = 0
 675              		@ link register save eliminated.
 676 0320 80B4     		push	{r7}
 677              	.LCFI32:
 678              		.cfi_def_cfa_offset 4
 679              		.cfi_offset 7, -4
 680 0322 85B0     		sub	sp, sp, #20
 681              	.LCFI33:
 682              		.cfi_def_cfa_offset 24
 683 0324 00AF     		add	r7, sp, #0
 684              	.LCFI34:
 685              		.cfi_def_cfa_register 7
 686 0326 7860     		str	r0, [r7, #4]
 687 0328 F970     		strb	r1, [r7, #3]
 688 032a BA70     		strb	r2, [r7, #2]
 689 032c 7B70     		strb	r3, [r7, #1]
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 690              		.loc 1 710 0
 691 032e 4FF00003 		mov	r3, #0
 692 0332 FB60     		str	r3, [r7, #12]
 693 0334 4FF00003 		mov	r3, #0
 694 0338 BB60     		str	r3, [r7, #8]
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 695              		.loc 1 718 0
 696 033a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 697 033c 092B     		cmp	r3, #9
 698 033e 27D9     		bls	.L19
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 699              		.loc 1 721 0
 700 0340 7B68     		ldr	r3, [r7, #4]
 701 0342 DB68     		ldr	r3, [r3, #12]
 702 0344 FB60     		str	r3, [r7, #12]
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 703              		.loc 1 724 0
 704 0346 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 705 0348 1346     		mov	r3, r2
 706 034a 4FEA4303 		lsl	r3, r3, #1
 707 034e 9B18     		adds	r3, r3, r2
 708 0350 A3F11E03 		sub	r3, r3, #30
 709 0354 4FF00702 		mov	r2, #7
 710 0358 02FA03F3 		lsl	r3, r2, r3
 711 035c BB60     		str	r3, [r7, #8]
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 712              		.loc 1 727 0
 713 035e BB68     		ldr	r3, [r7, #8]
 714 0360 6FEA0303 		mvn	r3, r3
 715 0364 FA68     		ldr	r2, [r7, #12]
 716 0366 1340     		ands	r3, r3, r2
 717 0368 FB60     		str	r3, [r7, #12]
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 718              		.loc 1 730 0
 719 036a 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 720 036c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 721 036e 1346     		mov	r3, r2
 722 0370 4FEA4303 		lsl	r3, r3, #1
 723 0374 9B18     		adds	r3, r3, r2
 724 0376 A3F11E03 		sub	r3, r3, #30
 725 037a 01FA03F3 		lsl	r3, r1, r3
 726 037e BB60     		str	r3, [r7, #8]
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 727              		.loc 1 733 0
 728 0380 FA68     		ldr	r2, [r7, #12]
 729 0382 BB68     		ldr	r3, [r7, #8]
 730 0384 1343     		orrs	r3, r3, r2
 731 0386 FB60     		str	r3, [r7, #12]
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 732              		.loc 1 736 0
 733 0388 7B68     		ldr	r3, [r7, #4]
 734 038a FA68     		ldr	r2, [r7, #12]
 735 038c DA60     		str	r2, [r3, #12]
 736 038e 22E0     		b	.L20
 737              	.L19:
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 738              		.loc 1 741 0
 739 0390 7B68     		ldr	r3, [r7, #4]
 740 0392 1B69     		ldr	r3, [r3, #16]
 741 0394 FB60     		str	r3, [r7, #12]
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 742              		.loc 1 744 0
 743 0396 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 744 0398 1346     		mov	r3, r2
 745 039a 4FEA4303 		lsl	r3, r3, #1
 746 039e 9B18     		adds	r3, r3, r2
 747 03a0 4FF00702 		mov	r2, #7
 748 03a4 02FA03F3 		lsl	r3, r2, r3
 749 03a8 BB60     		str	r3, [r7, #8]
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 750              		.loc 1 747 0
 751 03aa BB68     		ldr	r3, [r7, #8]
 752 03ac 6FEA0303 		mvn	r3, r3
 753 03b0 FA68     		ldr	r2, [r7, #12]
 754 03b2 1340     		ands	r3, r3, r2
 755 03b4 FB60     		str	r3, [r7, #12]
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 756              		.loc 1 750 0
 757 03b6 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 758 03b8 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 759 03ba 1346     		mov	r3, r2
 760 03bc 4FEA4303 		lsl	r3, r3, #1
 761 03c0 9B18     		adds	r3, r3, r2
 762 03c2 01FA03F3 		lsl	r3, r1, r3
 763 03c6 BB60     		str	r3, [r7, #8]
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 764              		.loc 1 753 0
 765 03c8 FA68     		ldr	r2, [r7, #12]
 766 03ca BB68     		ldr	r3, [r7, #8]
 767 03cc 1343     		orrs	r3, r3, r2
 768 03ce FB60     		str	r3, [r7, #12]
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 769              		.loc 1 756 0
 770 03d0 7B68     		ldr	r3, [r7, #4]
 771 03d2 FA68     		ldr	r2, [r7, #12]
 772 03d4 1A61     		str	r2, [r3, #16]
 773              	.L20:
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (Rank < 7)
 774              		.loc 1 759 0
 775 03d6 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 776 03d8 062B     		cmp	r3, #6
 777 03da 27D8     		bhi	.L21
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 778              		.loc 1 762 0
 779 03dc 7B68     		ldr	r3, [r7, #4]
 780 03de 5B6B     		ldr	r3, [r3, #52]
 781 03e0 FB60     		str	r3, [r7, #12]
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 782              		.loc 1 765 0
 783 03e2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 784 03e4 03F1FF32 		add	r2, r3, #-1
 785 03e8 1346     		mov	r3, r2
 786 03ea 4FEA8303 		lsl	r3, r3, #2
 787 03ee 9B18     		adds	r3, r3, r2
 788 03f0 4FF01F02 		mov	r2, #31
 789 03f4 02FA03F3 		lsl	r3, r2, r3
 790 03f8 BB60     		str	r3, [r7, #8]
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 791              		.loc 1 768 0
 792 03fa BB68     		ldr	r3, [r7, #8]
 793 03fc 6FEA0303 		mvn	r3, r3
 794 0400 FA68     		ldr	r2, [r7, #12]
 795 0402 1340     		ands	r3, r3, r2
 796 0404 FB60     		str	r3, [r7, #12]
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 797              		.loc 1 771 0
 798 0406 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 799 0408 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 800 040a 03F1FF32 		add	r2, r3, #-1
 801 040e 1346     		mov	r3, r2
 802 0410 4FEA8303 		lsl	r3, r3, #2
 803 0414 9B18     		adds	r3, r3, r2
 804 0416 01FA03F3 		lsl	r3, r1, r3
 805 041a BB60     		str	r3, [r7, #8]
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 806              		.loc 1 774 0
 807 041c FA68     		ldr	r2, [r7, #12]
 808 041e BB68     		ldr	r3, [r7, #8]
 809 0420 1343     		orrs	r3, r3, r2
 810 0422 FB60     		str	r3, [r7, #12]
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 811              		.loc 1 777 0
 812 0424 7B68     		ldr	r3, [r7, #4]
 813 0426 FA68     		ldr	r2, [r7, #12]
 814 0428 5A63     		str	r2, [r3, #52]
 815 042a 51E0     		b	.L18
 816              	.L21:
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 817              		.loc 1 780 0
 818 042c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 819 042e 0C2B     		cmp	r3, #12
 820 0430 27D8     		bhi	.L23
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 821              		.loc 1 783 0
 822 0432 7B68     		ldr	r3, [r7, #4]
 823 0434 1B6B     		ldr	r3, [r3, #48]
 824 0436 FB60     		str	r3, [r7, #12]
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 825              		.loc 1 786 0
 826 0438 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 827 043a 1346     		mov	r3, r2
 828 043c 4FEA8303 		lsl	r3, r3, #2
 829 0440 9B18     		adds	r3, r3, r2
 830 0442 A3F12303 		sub	r3, r3, #35
 831 0446 4FF01F02 		mov	r2, #31
 832 044a 02FA03F3 		lsl	r3, r2, r3
 833 044e BB60     		str	r3, [r7, #8]
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 834              		.loc 1 789 0
 835 0450 BB68     		ldr	r3, [r7, #8]
 836 0452 6FEA0303 		mvn	r3, r3
 837 0456 FA68     		ldr	r2, [r7, #12]
 838 0458 1340     		ands	r3, r3, r2
 839 045a FB60     		str	r3, [r7, #12]
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 840              		.loc 1 792 0
 841 045c F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 842 045e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 843 0460 1346     		mov	r3, r2
 844 0462 4FEA8303 		lsl	r3, r3, #2
 845 0466 9B18     		adds	r3, r3, r2
 846 0468 A3F12303 		sub	r3, r3, #35
 847 046c 01FA03F3 		lsl	r3, r1, r3
 848 0470 BB60     		str	r3, [r7, #8]
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 849              		.loc 1 795 0
 850 0472 FA68     		ldr	r2, [r7, #12]
 851 0474 BB68     		ldr	r3, [r7, #8]
 852 0476 1343     		orrs	r3, r3, r2
 853 0478 FB60     		str	r3, [r7, #12]
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 854              		.loc 1 798 0
 855 047a 7B68     		ldr	r3, [r7, #4]
 856 047c FA68     		ldr	r2, [r7, #12]
 857 047e 1A63     		str	r2, [r3, #48]
 858 0480 26E0     		b	.L18
 859              	.L23:
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 860              		.loc 1 804 0
 861 0482 7B68     		ldr	r3, [r7, #4]
 862 0484 DB6A     		ldr	r3, [r3, #44]
 863 0486 FB60     		str	r3, [r7, #12]
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 864              		.loc 1 807 0
 865 0488 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 866 048a 1346     		mov	r3, r2
 867 048c 4FEA8303 		lsl	r3, r3, #2
 868 0490 9B18     		adds	r3, r3, r2
 869 0492 A3F14103 		sub	r3, r3, #65
 870 0496 4FF01F02 		mov	r2, #31
 871 049a 02FA03F3 		lsl	r3, r2, r3
 872 049e BB60     		str	r3, [r7, #8]
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 873              		.loc 1 810 0
 874 04a0 BB68     		ldr	r3, [r7, #8]
 875 04a2 6FEA0303 		mvn	r3, r3
 876 04a6 FA68     		ldr	r2, [r7, #12]
 877 04a8 1340     		ands	r3, r3, r2
 878 04aa FB60     		str	r3, [r7, #12]
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 879              		.loc 1 813 0
 880 04ac F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 881 04ae BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 882 04b0 1346     		mov	r3, r2
 883 04b2 4FEA8303 		lsl	r3, r3, #2
 884 04b6 9B18     		adds	r3, r3, r2
 885 04b8 A3F14103 		sub	r3, r3, #65
 886 04bc 01FA03F3 		lsl	r3, r1, r3
 887 04c0 BB60     		str	r3, [r7, #8]
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 888              		.loc 1 816 0
 889 04c2 FA68     		ldr	r2, [r7, #12]
 890 04c4 BB68     		ldr	r3, [r7, #8]
 891 04c6 1343     		orrs	r3, r3, r2
 892 04c8 FB60     		str	r3, [r7, #12]
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 893              		.loc 1 819 0
 894 04ca 7B68     		ldr	r3, [r7, #4]
 895 04cc FA68     		ldr	r2, [r7, #12]
 896 04ce DA62     		str	r2, [r3, #44]
 897              	.L18:
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 898              		.loc 1 821 0
 899 04d0 07F11407 		add	r7, r7, #20
 900 04d4 BD46     		mov	sp, r7
 901 04d6 80BC     		pop	{r7}
 902 04d8 7047     		bx	lr
 903              		.cfi_endproc
 904              	.LFE121:
 906 04da 00BF     		.align	2
 907              		.global	ADC_SoftwareStartConv
 908              		.thumb
 909              		.thumb_func
 911              	ADC_SoftwareStartConv:
 912              	.LFB122:
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 913              		.loc 1 829 0
 914              		.cfi_startproc
 915              		@ args = 0, pretend = 0, frame = 8
 916              		@ frame_needed = 1, uses_anonymous_args = 0
 917              		@ link register save eliminated.
 918 04dc 80B4     		push	{r7}
 919              	.LCFI35:
 920              		.cfi_def_cfa_offset 4
 921              		.cfi_offset 7, -4
 922 04de 83B0     		sub	sp, sp, #12
 923              	.LCFI36:
 924              		.cfi_def_cfa_offset 16
 925 04e0 00AF     		add	r7, sp, #0
 926              	.LCFI37:
 927              		.cfi_def_cfa_register 7
 928 04e2 7860     		str	r0, [r7, #4]
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 929              		.loc 1 834 0
 930 04e4 7B68     		ldr	r3, [r7, #4]
 931 04e6 9B68     		ldr	r3, [r3, #8]
 932 04e8 43F08042 		orr	r2, r3, #1073741824
 933 04ec 7B68     		ldr	r3, [r7, #4]
 934 04ee 9A60     		str	r2, [r3, #8]
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 935              		.loc 1 835 0
 936 04f0 07F10C07 		add	r7, r7, #12
 937 04f4 BD46     		mov	sp, r7
 938 04f6 80BC     		pop	{r7}
 939 04f8 7047     		bx	lr
 940              		.cfi_endproc
 941              	.LFE122:
 943 04fa 00BF     		.align	2
 944              		.global	ADC_GetSoftwareStartConvStatus
 945              		.thumb
 946              		.thumb_func
 948              	ADC_GetSoftwareStartConvStatus:
 949              	.LFB123:
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 950              		.loc 1 843 0
 951              		.cfi_startproc
 952              		@ args = 0, pretend = 0, frame = 16
 953              		@ frame_needed = 1, uses_anonymous_args = 0
 954              		@ link register save eliminated.
 955 04fc 80B4     		push	{r7}
 956              	.LCFI38:
 957              		.cfi_def_cfa_offset 4
 958              		.cfi_offset 7, -4
 959 04fe 85B0     		sub	sp, sp, #20
 960              	.LCFI39:
 961              		.cfi_def_cfa_offset 24
 962 0500 00AF     		add	r7, sp, #0
 963              	.LCFI40:
 964              		.cfi_def_cfa_register 7
 965 0502 7860     		str	r0, [r7, #4]
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 966              		.loc 1 844 0
 967 0504 4FF00003 		mov	r3, #0
 968 0508 FB73     		strb	r3, [r7, #15]
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 969              		.loc 1 849 0
 970 050a 7B68     		ldr	r3, [r7, #4]
 971 050c 9B68     		ldr	r3, [r3, #8]
 972 050e 03F48003 		and	r3, r3, #4194304
 973 0512 002B     		cmp	r3, #0
 974 0514 03D0     		beq	.L26
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 975              		.loc 1 852 0
 976 0516 4FF00103 		mov	r3, #1
 977 051a FB73     		strb	r3, [r7, #15]
 978 051c 02E0     		b	.L27
 979              	.L26:
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 980              		.loc 1 857 0
 981 051e 4FF00003 		mov	r3, #0
 982 0522 FB73     		strb	r3, [r7, #15]
 983              	.L27:
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 984              		.loc 1 861 0
 985 0524 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 986              		.loc 1 862 0
 987 0526 1846     		mov	r0, r3
 988 0528 07F11407 		add	r7, r7, #20
 989 052c BD46     		mov	sp, r7
 990 052e 80BC     		pop	{r7}
 991 0530 7047     		bx	lr
 992              		.cfi_endproc
 993              	.LFE123:
 995 0532 00BF     		.align	2
 996              		.global	ADC_EOCOnEachRegularChannelCmd
 997              		.thumb
 998              		.thumb_func
 1000              	ADC_EOCOnEachRegularChannelCmd:
 1001              	.LFB124:
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1002              		.loc 1 873 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 8
 1005              		@ frame_needed = 1, uses_anonymous_args = 0
 1006              		@ link register save eliminated.
 1007 0534 80B4     		push	{r7}
 1008              	.LCFI41:
 1009              		.cfi_def_cfa_offset 4
 1010              		.cfi_offset 7, -4
 1011 0536 83B0     		sub	sp, sp, #12
 1012              	.LCFI42:
 1013              		.cfi_def_cfa_offset 16
 1014 0538 00AF     		add	r7, sp, #0
 1015              	.LCFI43:
 1016              		.cfi_def_cfa_register 7
 1017 053a 7860     		str	r0, [r7, #4]
 1018 053c 0B46     		mov	r3, r1
 1019 053e FB70     		strb	r3, [r7, #3]
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1020              		.loc 1 878 0
 1021 0540 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1022 0542 002B     		cmp	r3, #0
 1023 0544 06D0     		beq	.L29
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 1024              		.loc 1 881 0
 1025 0546 7B68     		ldr	r3, [r7, #4]
 1026 0548 9B68     		ldr	r3, [r3, #8]
 1027 054a 43F48062 		orr	r2, r3, #1024
 1028 054e 7B68     		ldr	r3, [r7, #4]
 1029 0550 9A60     		str	r2, [r3, #8]
 1030 0552 05E0     		b	.L28
 1031              	.L29:
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 1032              		.loc 1 886 0
 1033 0554 7B68     		ldr	r3, [r7, #4]
 1034 0556 9B68     		ldr	r3, [r3, #8]
 1035 0558 23F48062 		bic	r2, r3, #1024
 1036 055c 7B68     		ldr	r3, [r7, #4]
 1037 055e 9A60     		str	r2, [r3, #8]
 1038              	.L28:
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1039              		.loc 1 888 0
 1040 0560 07F10C07 		add	r7, r7, #12
 1041 0564 BD46     		mov	sp, r7
 1042 0566 80BC     		pop	{r7}
 1043 0568 7047     		bx	lr
 1044              		.cfi_endproc
 1045              	.LFE124:
 1047 056a 00BF     		.align	2
 1048              		.global	ADC_ContinuousModeCmd
 1049              		.thumb
 1050              		.thumb_func
 1052              	ADC_ContinuousModeCmd:
 1053              	.LFB125:
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1054              		.loc 1 898 0
 1055              		.cfi_startproc
 1056              		@ args = 0, pretend = 0, frame = 8
 1057              		@ frame_needed = 1, uses_anonymous_args = 0
 1058              		@ link register save eliminated.
 1059 056c 80B4     		push	{r7}
 1060              	.LCFI44:
 1061              		.cfi_def_cfa_offset 4
 1062              		.cfi_offset 7, -4
 1063 056e 83B0     		sub	sp, sp, #12
 1064              	.LCFI45:
 1065              		.cfi_def_cfa_offset 16
 1066 0570 00AF     		add	r7, sp, #0
 1067              	.LCFI46:
 1068              		.cfi_def_cfa_register 7
 1069 0572 7860     		str	r0, [r7, #4]
 1070 0574 0B46     		mov	r3, r1
 1071 0576 FB70     		strb	r3, [r7, #3]
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1072              		.loc 1 903 0
 1073 0578 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1074 057a 002B     		cmp	r3, #0
 1075 057c 06D0     		beq	.L32
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 1076              		.loc 1 906 0
 1077 057e 7B68     		ldr	r3, [r7, #4]
 1078 0580 9B68     		ldr	r3, [r3, #8]
 1079 0582 43F00202 		orr	r2, r3, #2
 1080 0586 7B68     		ldr	r3, [r7, #4]
 1081 0588 9A60     		str	r2, [r3, #8]
 1082 058a 05E0     		b	.L31
 1083              	.L32:
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 1084              		.loc 1 911 0
 1085 058c 7B68     		ldr	r3, [r7, #4]
 1086 058e 9B68     		ldr	r3, [r3, #8]
 1087 0590 23F00202 		bic	r2, r3, #2
 1088 0594 7B68     		ldr	r3, [r7, #4]
 1089 0596 9A60     		str	r2, [r3, #8]
 1090              	.L31:
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1091              		.loc 1 913 0
 1092 0598 07F10C07 		add	r7, r7, #12
 1093 059c BD46     		mov	sp, r7
 1094 059e 80BC     		pop	{r7}
 1095 05a0 7047     		bx	lr
 1096              		.cfi_endproc
 1097              	.LFE125:
 1099 05a2 00BF     		.align	2
 1100              		.global	ADC_DiscModeChannelCountConfig
 1101              		.thumb
 1102              		.thumb_func
 1104              	ADC_DiscModeChannelCountConfig:
 1105              	.LFB126:
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel.
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1106              		.loc 1 924 0
 1107              		.cfi_startproc
 1108              		@ args = 0, pretend = 0, frame = 16
 1109              		@ frame_needed = 1, uses_anonymous_args = 0
 1110              		@ link register save eliminated.
 1111 05a4 80B4     		push	{r7}
 1112              	.LCFI47:
 1113              		.cfi_def_cfa_offset 4
 1114              		.cfi_offset 7, -4
 1115 05a6 85B0     		sub	sp, sp, #20
 1116              	.LCFI48:
 1117              		.cfi_def_cfa_offset 24
 1118 05a8 00AF     		add	r7, sp, #0
 1119              	.LCFI49:
 1120              		.cfi_def_cfa_register 7
 1121 05aa 7860     		str	r0, [r7, #4]
 1122 05ac 0B46     		mov	r3, r1
 1123 05ae FB70     		strb	r3, [r7, #3]
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1124              		.loc 1 925 0
 1125 05b0 4FF00003 		mov	r3, #0
 1126 05b4 FB60     		str	r3, [r7, #12]
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1127              		.loc 1 926 0
 1128 05b6 4FF00003 		mov	r3, #0
 1129 05ba BB60     		str	r3, [r7, #8]
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 1130              		.loc 1 933 0
 1131 05bc 7B68     		ldr	r3, [r7, #4]
 1132 05be 5B68     		ldr	r3, [r3, #4]
 1133 05c0 FB60     		str	r3, [r7, #12]
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 1134              		.loc 1 936 0
 1135 05c2 FB68     		ldr	r3, [r7, #12]
 1136 05c4 23F46043 		bic	r3, r3, #57344
 1137 05c8 FB60     		str	r3, [r7, #12]
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 1138              		.loc 1 939 0
 1139 05ca FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1140 05cc 03F1FF33 		add	r3, r3, #-1
 1141 05d0 BB60     		str	r3, [r7, #8]
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 1142              		.loc 1 940 0
 1143 05d2 BB68     		ldr	r3, [r7, #8]
 1144 05d4 4FEA4333 		lsl	r3, r3, #13
 1145 05d8 FA68     		ldr	r2, [r7, #12]
 1146 05da 1343     		orrs	r3, r3, r2
 1147 05dc FB60     		str	r3, [r7, #12]
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 1148              		.loc 1 943 0
 1149 05de 7B68     		ldr	r3, [r7, #4]
 1150 05e0 FA68     		ldr	r2, [r7, #12]
 1151 05e2 5A60     		str	r2, [r3, #4]
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1152              		.loc 1 944 0
 1153 05e4 07F11407 		add	r7, r7, #20
 1154 05e8 BD46     		mov	sp, r7
 1155 05ea 80BC     		pop	{r7}
 1156 05ec 7047     		bx	lr
 1157              		.cfi_endproc
 1158              	.LFE126:
 1160 05ee 00BF     		.align	2
 1161              		.global	ADC_DiscModeCmd
 1162              		.thumb
 1163              		.thumb_func
 1165              	ADC_DiscModeCmd:
 1166              	.LFB127:
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         for the specified ADC
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         regular group channel.
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1167              		.loc 1 956 0
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 8
 1170              		@ frame_needed = 1, uses_anonymous_args = 0
 1171              		@ link register save eliminated.
 1172 05f0 80B4     		push	{r7}
 1173              	.LCFI50:
 1174              		.cfi_def_cfa_offset 4
 1175              		.cfi_offset 7, -4
 1176 05f2 83B0     		sub	sp, sp, #12
 1177              	.LCFI51:
 1178              		.cfi_def_cfa_offset 16
 1179 05f4 00AF     		add	r7, sp, #0
 1180              	.LCFI52:
 1181              		.cfi_def_cfa_register 7
 1182 05f6 7860     		str	r0, [r7, #4]
 1183 05f8 0B46     		mov	r3, r1
 1184 05fa FB70     		strb	r3, [r7, #3]
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1185              		.loc 1 961 0
 1186 05fc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1187 05fe 002B     		cmp	r3, #0
 1188 0600 06D0     		beq	.L36
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 1189              		.loc 1 964 0
 1190 0602 7B68     		ldr	r3, [r7, #4]
 1191 0604 5B68     		ldr	r3, [r3, #4]
 1192 0606 43F40062 		orr	r2, r3, #2048
 1193 060a 7B68     		ldr	r3, [r7, #4]
 1194 060c 5A60     		str	r2, [r3, #4]
 1195 060e 05E0     		b	.L35
 1196              	.L36:
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 1197              		.loc 1 969 0
 1198 0610 7B68     		ldr	r3, [r7, #4]
 1199 0612 5B68     		ldr	r3, [r3, #4]
 1200 0614 23F40062 		bic	r2, r3, #2048
 1201 0618 7B68     		ldr	r3, [r7, #4]
 1202 061a 5A60     		str	r2, [r3, #4]
 1203              	.L35:
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1204              		.loc 1 971 0
 1205 061c 07F10C07 		add	r7, r7, #12
 1206 0620 BD46     		mov	sp, r7
 1207 0622 80BC     		pop	{r7}
 1208 0624 7047     		bx	lr
 1209              		.cfi_endproc
 1210              	.LFE127:
 1212 0626 00BF     		.align	2
 1213              		.global	ADC_GetConversionValue
 1214              		.thumb
 1215              		.thumb_func
 1217              	ADC_GetConversionValue:
 1218              	.LFB128:
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1219              		.loc 1 979 0
 1220              		.cfi_startproc
 1221              		@ args = 0, pretend = 0, frame = 8
 1222              		@ frame_needed = 1, uses_anonymous_args = 0
 1223              		@ link register save eliminated.
 1224 0628 80B4     		push	{r7}
 1225              	.LCFI53:
 1226              		.cfi_def_cfa_offset 4
 1227              		.cfi_offset 7, -4
 1228 062a 83B0     		sub	sp, sp, #12
 1229              	.LCFI54:
 1230              		.cfi_def_cfa_offset 16
 1231 062c 00AF     		add	r7, sp, #0
 1232              	.LCFI55:
 1233              		.cfi_def_cfa_register 7
 1234 062e 7860     		str	r0, [r7, #4]
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 1235              		.loc 1 984 0
 1236 0630 7B68     		ldr	r3, [r7, #4]
 1237 0632 DB6C     		ldr	r3, [r3, #76]
 1238 0634 9BB2     		uxth	r3, r3
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1239              		.loc 1 985 0
 1240 0636 1846     		mov	r0, r3
 1241 0638 07F10C07 		add	r7, r7, #12
 1242 063c BD46     		mov	sp, r7
 1243 063e 80BC     		pop	{r7}
 1244 0640 7047     		bx	lr
 1245              		.cfi_endproc
 1246              	.LFE128:
 1248 0642 00BF     		.align	2
 1249              		.global	ADC_GetMultiModeConversionValue
 1250              		.thumb
 1251              		.thumb_func
 1253              	ADC_GetMultiModeConversionValue:
 1254              	.LFB129:
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None  
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1255              		.loc 1 1000 0
 1256              		.cfi_startproc
 1257              		@ args = 0, pretend = 0, frame = 0
 1258              		@ frame_needed = 1, uses_anonymous_args = 0
 1259              		@ link register save eliminated.
 1260 0644 80B4     		push	{r7}
 1261              	.LCFI56:
 1262              		.cfi_def_cfa_offset 4
 1263              		.cfi_offset 7, -4
 1264 0646 00AF     		add	r7, sp, #0
 1265              	.LCFI57:
 1266              		.cfi_def_cfa_register 7
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 1267              		.loc 1 1002 0
 1268 0648 42F20833 		movw	r3, #8968
 1269 064c C4F20103 		movt	r3, 16385
 1270 0650 1B68     		ldr	r3, [r3, #0]
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1271              		.loc 1 1003 0
 1272 0652 1846     		mov	r0, r3
 1273 0654 BD46     		mov	sp, r7
 1274 0656 80BC     		pop	{r7}
 1275 0658 7047     		bx	lr
 1276              		.cfi_endproc
 1277              	.LFE129:
 1279 065a 00BF     		.align	2
 1280              		.global	ADC_DMACmd
 1281              		.thumb
 1282              		.thumb_func
 1284              	ADC_DMACmd:
 1285              	.LFB130:
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Regular Channels DMA Configuration functions
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the DMA for ADC regular 
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   channels.
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Since converted regular channel values are stored into a unique data register, 
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is useful to use DMA for conversion of more than one regular channel. This 
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   avoids the loss of the data already stored in the ADC Data register. 
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   conversion of a regular channel, a DMA request is generated.
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for Independent ADC mode" 
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for multi ADC mode" configuration 
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1286              		.loc 1 1049 0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 8
 1289              		@ frame_needed = 1, uses_anonymous_args = 0
 1290              		@ link register save eliminated.
 1291 065c 80B4     		push	{r7}
 1292              	.LCFI58:
 1293              		.cfi_def_cfa_offset 4
 1294              		.cfi_offset 7, -4
 1295 065e 83B0     		sub	sp, sp, #12
 1296              	.LCFI59:
 1297              		.cfi_def_cfa_offset 16
 1298 0660 00AF     		add	r7, sp, #0
 1299              	.LCFI60:
 1300              		.cfi_def_cfa_register 7
 1301 0662 7860     		str	r0, [r7, #4]
 1302 0664 0B46     		mov	r3, r1
 1303 0666 FB70     		strb	r3, [r7, #3]
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1304              		.loc 1 1053 0
 1305 0668 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1306 066a 002B     		cmp	r3, #0
 1307 066c 06D0     		beq	.L41
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 1308              		.loc 1 1056 0
 1309 066e 7B68     		ldr	r3, [r7, #4]
 1310 0670 9B68     		ldr	r3, [r3, #8]
 1311 0672 43F48072 		orr	r2, r3, #256
 1312 0676 7B68     		ldr	r3, [r7, #4]
 1313 0678 9A60     		str	r2, [r3, #8]
 1314 067a 05E0     		b	.L40
 1315              	.L41:
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 1316              		.loc 1 1061 0
 1317 067c 7B68     		ldr	r3, [r7, #4]
 1318 067e 9B68     		ldr	r3, [r3, #8]
 1319 0680 23F48072 		bic	r2, r3, #256
 1320 0684 7B68     		ldr	r3, [r7, #4]
 1321 0686 9A60     		str	r2, [r3, #8]
 1322              	.L40:
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1323              		.loc 1 1063 0
 1324 0688 07F10C07 		add	r7, r7, #12
 1325 068c BD46     		mov	sp, r7
 1326 068e 80BC     		pop	{r7}
 1327 0690 7047     		bx	lr
 1328              		.cfi_endproc
 1329              	.LFE130:
 1331 0692 00BF     		.align	2
 1332              		.global	ADC_DMARequestAfterLastTransferCmd
 1333              		.thumb
 1334              		.thumb_func
 1336              	ADC_DMARequestAfterLastTransferCmd:
 1337              	.LFB131:
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1338              		.loc 1 1073 0
 1339              		.cfi_startproc
 1340              		@ args = 0, pretend = 0, frame = 8
 1341              		@ frame_needed = 1, uses_anonymous_args = 0
 1342              		@ link register save eliminated.
 1343 0694 80B4     		push	{r7}
 1344              	.LCFI61:
 1345              		.cfi_def_cfa_offset 4
 1346              		.cfi_offset 7, -4
 1347 0696 83B0     		sub	sp, sp, #12
 1348              	.LCFI62:
 1349              		.cfi_def_cfa_offset 16
 1350 0698 00AF     		add	r7, sp, #0
 1351              	.LCFI63:
 1352              		.cfi_def_cfa_register 7
 1353 069a 7860     		str	r0, [r7, #4]
 1354 069c 0B46     		mov	r3, r1
 1355 069e FB70     		strb	r3, [r7, #3]
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1356              		.loc 1 1077 0
 1357 06a0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1358 06a2 002B     		cmp	r3, #0
 1359 06a4 06D0     		beq	.L44
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 1360              		.loc 1 1080 0
 1361 06a6 7B68     		ldr	r3, [r7, #4]
 1362 06a8 9B68     		ldr	r3, [r3, #8]
 1363 06aa 43F40072 		orr	r2, r3, #512
 1364 06ae 7B68     		ldr	r3, [r7, #4]
 1365 06b0 9A60     		str	r2, [r3, #8]
 1366 06b2 05E0     		b	.L43
 1367              	.L44:
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 1368              		.loc 1 1085 0
 1369 06b4 7B68     		ldr	r3, [r7, #4]
 1370 06b6 9B68     		ldr	r3, [r3, #8]
 1371 06b8 23F40072 		bic	r2, r3, #512
 1372 06bc 7B68     		ldr	r3, [r7, #4]
 1373 06be 9A60     		str	r2, [r3, #8]
 1374              	.L43:
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1375              		.loc 1 1087 0
 1376 06c0 07F10C07 		add	r7, r7, #12
 1377 06c4 BD46     		mov	sp, r7
 1378 06c6 80BC     		pop	{r7}
 1379 06c8 7047     		bx	lr
 1380              		.cfi_endproc
 1381              	.LFE131:
 1383 06ca 00BF     		.align	2
 1384              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 1385              		.thumb
 1386              		.thumb_func
 1388              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 1389              	.LFB132:
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1390              		.loc 1 1100 0
 1391              		.cfi_startproc
 1392              		@ args = 0, pretend = 0, frame = 8
 1393              		@ frame_needed = 1, uses_anonymous_args = 0
 1394              		@ link register save eliminated.
 1395 06cc 80B4     		push	{r7}
 1396              	.LCFI64:
 1397              		.cfi_def_cfa_offset 4
 1398              		.cfi_offset 7, -4
 1399 06ce 83B0     		sub	sp, sp, #12
 1400              	.LCFI65:
 1401              		.cfi_def_cfa_offset 16
 1402 06d0 00AF     		add	r7, sp, #0
 1403              	.LCFI66:
 1404              		.cfi_def_cfa_register 7
 1405 06d2 0346     		mov	r3, r0
 1406 06d4 FB71     		strb	r3, [r7, #7]
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1407              		.loc 1 1103 0
 1408 06d6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1409 06d8 002B     		cmp	r3, #0
 1410 06da 0CD0     		beq	.L47
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 1411              		.loc 1 1106 0
 1412 06dc 4FF40C53 		mov	r3, #8960
 1413 06e0 C4F20103 		movt	r3, 16385
 1414 06e4 4FF40C52 		mov	r2, #8960
 1415 06e8 C4F20102 		movt	r2, 16385
 1416 06ec 5268     		ldr	r2, [r2, #4]
 1417 06ee 42F40052 		orr	r2, r2, #8192
 1418 06f2 5A60     		str	r2, [r3, #4]
 1419 06f4 0BE0     		b	.L46
 1420              	.L47:
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 1421              		.loc 1 1111 0
 1422 06f6 4FF40C53 		mov	r3, #8960
 1423 06fa C4F20103 		movt	r3, 16385
 1424 06fe 4FF40C52 		mov	r2, #8960
 1425 0702 C4F20102 		movt	r2, 16385
 1426 0706 5268     		ldr	r2, [r2, #4]
 1427 0708 22F40052 		bic	r2, r2, #8192
 1428 070c 5A60     		str	r2, [r3, #4]
 1429              	.L46:
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1430              		.loc 1 1113 0
 1431 070e 07F10C07 		add	r7, r7, #12
 1432 0712 BD46     		mov	sp, r7
 1433 0714 80BC     		pop	{r7}
 1434 0716 7047     		bx	lr
 1435              		.cfi_endproc
 1436              	.LFE132:
 1438              		.align	2
 1439              		.global	ADC_InjectedChannelConfig
 1440              		.thumb
 1441              		.thumb_func
 1443              	ADC_InjectedChannelConfig:
 1444              	.LFB133:
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      Injected channels Configuration functions
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provide functions allowing to configure the ADC Injected channels,
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration functions for Injected channels: This subsection provides 
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      functions allowing to configure the ADC injected channels :    
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the rank in the injected group sequencer for each channel
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the sampling time for each channel    
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Auto injected Mode  
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Discontinuous Mode 
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - scan mode activation  
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External/software trigger source   
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External trigger edge 
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - injected channels sequencer.
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Get the Specified Injected channel conversion data: This subsection 
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       provides an important function in the ADC peripheral since it returns the 
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       converted data of the specific injected channel.
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1445              		.loc 1 1187 0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 24
 1448              		@ frame_needed = 1, uses_anonymous_args = 0
 1449              		@ link register save eliminated.
 1450 0718 80B4     		push	{r7}
 1451              	.LCFI67:
 1452              		.cfi_def_cfa_offset 4
 1453              		.cfi_offset 7, -4
 1454 071a 87B0     		sub	sp, sp, #28
 1455              	.LCFI68:
 1456              		.cfi_def_cfa_offset 32
 1457 071c 00AF     		add	r7, sp, #0
 1458              	.LCFI69:
 1459              		.cfi_def_cfa_register 7
 1460 071e 7860     		str	r0, [r7, #4]
 1461 0720 F970     		strb	r1, [r7, #3]
 1462 0722 BA70     		strb	r2, [r7, #2]
 1463 0724 7B70     		strb	r3, [r7, #1]
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 1464              		.loc 1 1188 0
 1465 0726 4FF00003 		mov	r3, #0
 1466 072a 7B61     		str	r3, [r7, #20]
 1467 072c 4FF00003 		mov	r3, #0
 1468 0730 3B61     		str	r3, [r7, #16]
 1469 0732 4FF00003 		mov	r3, #0
 1470 0736 FB60     		str	r3, [r7, #12]
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 1471              		.loc 1 1195 0
 1472 0738 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1473 073a 092B     		cmp	r3, #9
 1474 073c 27D9     		bls	.L50
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 1475              		.loc 1 1198 0
 1476 073e 7B68     		ldr	r3, [r7, #4]
 1477 0740 DB68     		ldr	r3, [r3, #12]
 1478 0742 7B61     		str	r3, [r7, #20]
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 1479              		.loc 1 1200 0
 1480 0744 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1481 0746 1346     		mov	r3, r2
 1482 0748 4FEA4303 		lsl	r3, r3, #1
 1483 074c 9B18     		adds	r3, r3, r2
 1484 074e A3F11E03 		sub	r3, r3, #30
 1485 0752 4FF00702 		mov	r2, #7
 1486 0756 02FA03F3 		lsl	r3, r2, r3
 1487 075a 3B61     		str	r3, [r7, #16]
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1488              		.loc 1 1202 0
 1489 075c 3B69     		ldr	r3, [r7, #16]
 1490 075e 6FEA0303 		mvn	r3, r3
 1491 0762 7A69     		ldr	r2, [r7, #20]
 1492 0764 1340     		ands	r3, r3, r2
 1493 0766 7B61     		str	r3, [r7, #20]
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 1494              		.loc 1 1204 0
 1495 0768 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1496 076a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1497 076c 1346     		mov	r3, r2
 1498 076e 4FEA4303 		lsl	r3, r3, #1
 1499 0772 9B18     		adds	r3, r3, r2
 1500 0774 A3F11E03 		sub	r3, r3, #30
 1501 0778 01FA03F3 		lsl	r3, r1, r3
 1502 077c 3B61     		str	r3, [r7, #16]
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1503              		.loc 1 1206 0
 1504 077e 7A69     		ldr	r2, [r7, #20]
 1505 0780 3B69     		ldr	r3, [r7, #16]
 1506 0782 1343     		orrs	r3, r3, r2
 1507 0784 7B61     		str	r3, [r7, #20]
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 1508              		.loc 1 1208 0
 1509 0786 7B68     		ldr	r3, [r7, #4]
 1510 0788 7A69     		ldr	r2, [r7, #20]
 1511 078a DA60     		str	r2, [r3, #12]
 1512 078c 22E0     		b	.L51
 1513              	.L50:
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 1514              		.loc 1 1213 0
 1515 078e 7B68     		ldr	r3, [r7, #4]
 1516 0790 1B69     		ldr	r3, [r3, #16]
 1517 0792 7B61     		str	r3, [r7, #20]
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 1518              		.loc 1 1215 0
 1519 0794 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1520 0796 1346     		mov	r3, r2
 1521 0798 4FEA4303 		lsl	r3, r3, #1
 1522 079c 9B18     		adds	r3, r3, r2
 1523 079e 4FF00702 		mov	r2, #7
 1524 07a2 02FA03F3 		lsl	r3, r2, r3
 1525 07a6 3B61     		str	r3, [r7, #16]
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1526              		.loc 1 1217 0
 1527 07a8 3B69     		ldr	r3, [r7, #16]
 1528 07aa 6FEA0303 		mvn	r3, r3
 1529 07ae 7A69     		ldr	r2, [r7, #20]
 1530 07b0 1340     		ands	r3, r3, r2
 1531 07b2 7B61     		str	r3, [r7, #20]
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 1532              		.loc 1 1219 0
 1533 07b4 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1534 07b6 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1535 07b8 1346     		mov	r3, r2
 1536 07ba 4FEA4303 		lsl	r3, r3, #1
 1537 07be 9B18     		adds	r3, r3, r2
 1538 07c0 01FA03F3 		lsl	r3, r1, r3
 1539 07c4 3B61     		str	r3, [r7, #16]
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1540              		.loc 1 1221 0
 1541 07c6 7A69     		ldr	r2, [r7, #20]
 1542 07c8 3B69     		ldr	r3, [r7, #16]
 1543 07ca 1343     		orrs	r3, r3, r2
 1544 07cc 7B61     		str	r3, [r7, #20]
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 1545              		.loc 1 1223 0
 1546 07ce 7B68     		ldr	r3, [r7, #4]
 1547 07d0 7A69     		ldr	r2, [r7, #20]
 1548 07d2 1A61     		str	r2, [r3, #16]
 1549              	.L51:
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Rank configuration */
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1550              		.loc 1 1227 0
 1551 07d4 7B68     		ldr	r3, [r7, #4]
 1552 07d6 9B6B     		ldr	r3, [r3, #56]
 1553 07d8 7B61     		str	r3, [r7, #20]
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 1554              		.loc 1 1229 0
 1555 07da 7B69     		ldr	r3, [r7, #20]
 1556 07dc 03F44013 		and	r3, r3, #3145728
 1557 07e0 4FEA1353 		lsr	r3, r3, #20
 1558 07e4 FB60     		str	r3, [r7, #12]
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1559              		.loc 1 1231 0
 1560 07e6 FB68     		ldr	r3, [r7, #12]
 1561 07e8 DBB2     		uxtb	r3, r3
 1562 07ea 6FEA0303 		mvn	r3, r3
 1563 07ee DAB2     		uxtb	r2, r3
 1564 07f0 BB78     		ldrb	r3, [r7, #2]
 1565 07f2 D318     		adds	r3, r2, r3
 1566 07f4 DBB2     		uxtb	r3, r3
 1567 07f6 03F10303 		add	r3, r3, #3
 1568 07fa DBB2     		uxtb	r3, r3
 1569 07fc 1A46     		mov	r2, r3
 1570 07fe 1346     		mov	r3, r2
 1571 0800 4FEA8303 		lsl	r3, r3, #2
 1572 0804 9B18     		adds	r3, r3, r2
 1573 0806 4FF01F02 		mov	r2, #31
 1574 080a 02FA03F3 		lsl	r3, r2, r3
 1575 080e 3B61     		str	r3, [r7, #16]
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 1576              		.loc 1 1233 0
 1577 0810 3B69     		ldr	r3, [r7, #16]
 1578 0812 6FEA0303 		mvn	r3, r3
 1579 0816 7A69     		ldr	r2, [r7, #20]
 1580 0818 1340     		ands	r3, r3, r2
 1581 081a 7B61     		str	r3, [r7, #20]
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1582              		.loc 1 1235 0
 1583 081c F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1584 081e FB68     		ldr	r3, [r7, #12]
 1585 0820 DBB2     		uxtb	r3, r3
 1586 0822 6FEA0303 		mvn	r3, r3
 1587 0826 DAB2     		uxtb	r2, r3
 1588 0828 BB78     		ldrb	r3, [r7, #2]
 1589 082a D318     		adds	r3, r2, r3
 1590 082c DBB2     		uxtb	r3, r3
 1591 082e 03F10303 		add	r3, r3, #3
 1592 0832 DBB2     		uxtb	r3, r3
 1593 0834 1A46     		mov	r2, r3
 1594 0836 1346     		mov	r3, r2
 1595 0838 4FEA8303 		lsl	r3, r3, #2
 1596 083c 9B18     		adds	r3, r3, r2
 1597 083e 01FA03F3 		lsl	r3, r1, r3
 1598 0842 3B61     		str	r3, [r7, #16]
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 1599              		.loc 1 1237 0
 1600 0844 7A69     		ldr	r2, [r7, #20]
 1601 0846 3B69     		ldr	r3, [r7, #16]
 1602 0848 1343     		orrs	r3, r3, r2
 1603 084a 7B61     		str	r3, [r7, #20]
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1604              		.loc 1 1239 0
 1605 084c 7B68     		ldr	r3, [r7, #4]
 1606 084e 7A69     		ldr	r2, [r7, #20]
 1607 0850 9A63     		str	r2, [r3, #56]
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1608              		.loc 1 1240 0
 1609 0852 07F11C07 		add	r7, r7, #28
 1610 0856 BD46     		mov	sp, r7
 1611 0858 80BC     		pop	{r7}
 1612 085a 7047     		bx	lr
 1613              		.cfi_endproc
 1614              	.LFE133:
 1616              		.align	2
 1617              		.global	ADC_InjectedSequencerLengthConfig
 1618              		.thumb
 1619              		.thumb_func
 1621              	ADC_InjectedSequencerLengthConfig:
 1622              	.LFB134:
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1623              		.loc 1 1250 0
 1624              		.cfi_startproc
 1625              		@ args = 0, pretend = 0, frame = 16
 1626              		@ frame_needed = 1, uses_anonymous_args = 0
 1627              		@ link register save eliminated.
 1628 085c 80B4     		push	{r7}
 1629              	.LCFI70:
 1630              		.cfi_def_cfa_offset 4
 1631              		.cfi_offset 7, -4
 1632 085e 85B0     		sub	sp, sp, #20
 1633              	.LCFI71:
 1634              		.cfi_def_cfa_offset 24
 1635 0860 00AF     		add	r7, sp, #0
 1636              	.LCFI72:
 1637              		.cfi_def_cfa_register 7
 1638 0862 7860     		str	r0, [r7, #4]
 1639 0864 0B46     		mov	r3, r1
 1640 0866 FB70     		strb	r3, [r7, #3]
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1641              		.loc 1 1251 0
 1642 0868 4FF00003 		mov	r3, #0
 1643 086c FB60     		str	r3, [r7, #12]
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1644              		.loc 1 1252 0
 1645 086e 4FF00003 		mov	r3, #0
 1646 0872 BB60     		str	r3, [r7, #8]
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1647              		.loc 1 1258 0
 1648 0874 7B68     		ldr	r3, [r7, #4]
 1649 0876 9B6B     		ldr	r3, [r3, #56]
 1650 0878 FB60     		str	r3, [r7, #12]
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 1651              		.loc 1 1261 0
 1652 087a FB68     		ldr	r3, [r7, #12]
 1653 087c 23F44013 		bic	r3, r3, #3145728
 1654 0880 FB60     		str	r3, [r7, #12]
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 1655              		.loc 1 1264 0
 1656 0882 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1657 0884 03F1FF33 		add	r3, r3, #-1
 1658 0888 BB60     		str	r3, [r7, #8]
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 1659              		.loc 1 1265 0
 1660 088a BB68     		ldr	r3, [r7, #8]
 1661 088c 4FEA0353 		lsl	r3, r3, #20
 1662 0890 FA68     		ldr	r2, [r7, #12]
 1663 0892 1343     		orrs	r3, r3, r2
 1664 0894 FB60     		str	r3, [r7, #12]
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1665              		.loc 1 1268 0
 1666 0896 7B68     		ldr	r3, [r7, #4]
 1667 0898 FA68     		ldr	r2, [r7, #12]
 1668 089a 9A63     		str	r2, [r3, #56]
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1669              		.loc 1 1269 0
 1670 089c 07F11407 		add	r7, r7, #20
 1671 08a0 BD46     		mov	sp, r7
 1672 08a2 80BC     		pop	{r7}
 1673 08a4 7047     		bx	lr
 1674              		.cfi_endproc
 1675              	.LFE134:
 1677 08a6 00BF     		.align	2
 1678              		.global	ADC_SetInjectedOffset
 1679              		.thumb
 1680              		.thumb_func
 1682              	ADC_SetInjectedOffset:
 1683              	.LFB135:
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1684              		.loc 1 1285 0
 1685              		.cfi_startproc
 1686              		@ args = 0, pretend = 0, frame = 16
 1687              		@ frame_needed = 1, uses_anonymous_args = 0
 1688              		@ link register save eliminated.
 1689 08a8 80B4     		push	{r7}
 1690              	.LCFI73:
 1691              		.cfi_def_cfa_offset 4
 1692              		.cfi_offset 7, -4
 1693 08aa 85B0     		sub	sp, sp, #20
 1694              	.LCFI74:
 1695              		.cfi_def_cfa_offset 24
 1696 08ac 00AF     		add	r7, sp, #0
 1697              	.LCFI75:
 1698              		.cfi_def_cfa_register 7
 1699 08ae 7860     		str	r0, [r7, #4]
 1700 08b0 1346     		mov	r3, r2
 1701 08b2 0A46     		mov	r2, r1
 1702 08b4 FA70     		strb	r2, [r7, #3]
 1703 08b6 3B80     		strh	r3, [r7, #0]	@ movhi
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 1704              		.loc 1 1286 0
 1705 08b8 4FF00003 		mov	r3, #0
 1706 08bc FB60     		str	r3, [r7, #12]
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1707              		.loc 1 1292 0
 1708 08be 7B68     		ldr	r3, [r7, #4]
 1709 08c0 FB60     		str	r3, [r7, #12]
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 1710              		.loc 1 1293 0
 1711 08c2 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1712 08c4 FB68     		ldr	r3, [r7, #12]
 1713 08c6 D318     		adds	r3, r2, r3
 1714 08c8 FB60     		str	r3, [r7, #12]
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 1715              		.loc 1 1296 0
 1716 08ca FB68     		ldr	r3, [r7, #12]
 1717 08cc 3A88     		ldrh	r2, [r7, #0]
 1718 08ce 1A60     		str	r2, [r3, #0]
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1719              		.loc 1 1297 0
 1720 08d0 07F11407 		add	r7, r7, #20
 1721 08d4 BD46     		mov	sp, r7
 1722 08d6 80BC     		pop	{r7}
 1723 08d8 7047     		bx	lr
 1724              		.cfi_endproc
 1725              	.LFE135:
 1727 08da 00BF     		.align	2
 1728              		.global	ADC_ExternalTrigInjectedConvConfig
 1729              		.thumb
 1730              		.thumb_func
 1732              	ADC_ExternalTrigInjectedConvConfig:
 1733              	.LFB136:
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1734              		.loc 1 1323 0
 1735              		.cfi_startproc
 1736              		@ args = 0, pretend = 0, frame = 16
 1737              		@ frame_needed = 1, uses_anonymous_args = 0
 1738              		@ link register save eliminated.
 1739 08dc 80B4     		push	{r7}
 1740              	.LCFI76:
 1741              		.cfi_def_cfa_offset 4
 1742              		.cfi_offset 7, -4
 1743 08de 85B0     		sub	sp, sp, #20
 1744              	.LCFI77:
 1745              		.cfi_def_cfa_offset 24
 1746 08e0 00AF     		add	r7, sp, #0
 1747              	.LCFI78:
 1748              		.cfi_def_cfa_register 7
 1749 08e2 7860     		str	r0, [r7, #4]
 1750 08e4 3960     		str	r1, [r7, #0]
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1751              		.loc 1 1324 0
 1752 08e6 4FF00003 		mov	r3, #0
 1753 08ea FB60     		str	r3, [r7, #12]
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1754              		.loc 1 1330 0
 1755 08ec 7B68     		ldr	r3, [r7, #4]
 1756 08ee 9B68     		ldr	r3, [r3, #8]
 1757 08f0 FB60     		str	r3, [r7, #12]
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 1758              		.loc 1 1333 0
 1759 08f2 FB68     		ldr	r3, [r7, #12]
 1760 08f4 23F47023 		bic	r3, r3, #983040
 1761 08f8 FB60     		str	r3, [r7, #12]
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 1762              		.loc 1 1336 0
 1763 08fa FA68     		ldr	r2, [r7, #12]
 1764 08fc 3B68     		ldr	r3, [r7, #0]
 1765 08fe 1343     		orrs	r3, r3, r2
 1766 0900 FB60     		str	r3, [r7, #12]
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1767              		.loc 1 1339 0
 1768 0902 7B68     		ldr	r3, [r7, #4]
 1769 0904 FA68     		ldr	r2, [r7, #12]
 1770 0906 9A60     		str	r2, [r3, #8]
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1771              		.loc 1 1340 0
 1772 0908 07F11407 		add	r7, r7, #20
 1773 090c BD46     		mov	sp, r7
 1774 090e 80BC     		pop	{r7}
 1775 0910 7047     		bx	lr
 1776              		.cfi_endproc
 1777              	.LFE136:
 1779 0912 00BF     		.align	2
 1780              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 1781              		.thumb
 1782              		.thumb_func
 1784              	ADC_ExternalTrigInjectedConvEdgeConfig:
 1785              	.LFB137:
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                     injected conversion
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                               and falling edge
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1786              		.loc 1 1357 0
 1787              		.cfi_startproc
 1788              		@ args = 0, pretend = 0, frame = 16
 1789              		@ frame_needed = 1, uses_anonymous_args = 0
 1790              		@ link register save eliminated.
 1791 0914 80B4     		push	{r7}
 1792              	.LCFI79:
 1793              		.cfi_def_cfa_offset 4
 1794              		.cfi_offset 7, -4
 1795 0916 85B0     		sub	sp, sp, #20
 1796              	.LCFI80:
 1797              		.cfi_def_cfa_offset 24
 1798 0918 00AF     		add	r7, sp, #0
 1799              	.LCFI81:
 1800              		.cfi_def_cfa_register 7
 1801 091a 7860     		str	r0, [r7, #4]
 1802 091c 3960     		str	r1, [r7, #0]
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1803              		.loc 1 1358 0
 1804 091e 4FF00003 		mov	r3, #0
 1805 0922 FB60     		str	r3, [r7, #12]
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1806              		.loc 1 1363 0
 1807 0924 7B68     		ldr	r3, [r7, #4]
 1808 0926 9B68     		ldr	r3, [r3, #8]
 1809 0928 FB60     		str	r3, [r7, #12]
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 1810              		.loc 1 1365 0
 1811 092a FB68     		ldr	r3, [r7, #12]
 1812 092c 23F44013 		bic	r3, r3, #3145728
 1813 0930 FB60     		str	r3, [r7, #12]
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 1814              		.loc 1 1367 0
 1815 0932 FA68     		ldr	r2, [r7, #12]
 1816 0934 3B68     		ldr	r3, [r7, #0]
 1817 0936 1343     		orrs	r3, r3, r2
 1818 0938 FB60     		str	r3, [r7, #12]
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1819              		.loc 1 1369 0
 1820 093a 7B68     		ldr	r3, [r7, #4]
 1821 093c FA68     		ldr	r2, [r7, #12]
 1822 093e 9A60     		str	r2, [r3, #8]
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1823              		.loc 1 1370 0
 1824 0940 07F11407 		add	r7, r7, #20
 1825 0944 BD46     		mov	sp, r7
 1826 0946 80BC     		pop	{r7}
 1827 0948 7047     		bx	lr
 1828              		.cfi_endproc
 1829              	.LFE137:
 1831 094a 00BF     		.align	2
 1832              		.global	ADC_SoftwareStartInjectedConv
 1833              		.thumb
 1834              		.thumb_func
 1836              	ADC_SoftwareStartInjectedConv:
 1837              	.LFB138:
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1838              		.loc 1 1378 0
 1839              		.cfi_startproc
 1840              		@ args = 0, pretend = 0, frame = 8
 1841              		@ frame_needed = 1, uses_anonymous_args = 0
 1842              		@ link register save eliminated.
 1843 094c 80B4     		push	{r7}
 1844              	.LCFI82:
 1845              		.cfi_def_cfa_offset 4
 1846              		.cfi_offset 7, -4
 1847 094e 83B0     		sub	sp, sp, #12
 1848              	.LCFI83:
 1849              		.cfi_def_cfa_offset 16
 1850 0950 00AF     		add	r7, sp, #0
 1851              	.LCFI84:
 1852              		.cfi_def_cfa_register 7
 1853 0952 7860     		str	r0, [r7, #4]
1379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 1854              		.loc 1 1382 0
 1855 0954 7B68     		ldr	r3, [r7, #4]
 1856 0956 9B68     		ldr	r3, [r3, #8]
 1857 0958 43F48002 		orr	r2, r3, #4194304
 1858 095c 7B68     		ldr	r3, [r7, #4]
 1859 095e 9A60     		str	r2, [r3, #8]
1383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1860              		.loc 1 1383 0
 1861 0960 07F10C07 		add	r7, r7, #12
 1862 0964 BD46     		mov	sp, r7
 1863 0966 80BC     		pop	{r7}
 1864 0968 7047     		bx	lr
 1865              		.cfi_endproc
 1866              	.LFE138:
 1868 096a 00BF     		.align	2
 1869              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1870              		.thumb
 1871              		.thumb_func
 1873              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1874              	.LFB139:
1384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1875              		.loc 1 1391 0
 1876              		.cfi_startproc
 1877              		@ args = 0, pretend = 0, frame = 16
 1878              		@ frame_needed = 1, uses_anonymous_args = 0
 1879              		@ link register save eliminated.
 1880 096c 80B4     		push	{r7}
 1881              	.LCFI85:
 1882              		.cfi_def_cfa_offset 4
 1883              		.cfi_offset 7, -4
 1884 096e 85B0     		sub	sp, sp, #20
 1885              	.LCFI86:
 1886              		.cfi_def_cfa_offset 24
 1887 0970 00AF     		add	r7, sp, #0
 1888              	.LCFI87:
 1889              		.cfi_def_cfa_register 7
 1890 0972 7860     		str	r0, [r7, #4]
1392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 1891              		.loc 1 1392 0
 1892 0974 4FF00003 		mov	r3, #0
 1893 0978 FB73     		strb	r3, [r7, #15]
1393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 1894              		.loc 1 1397 0
 1895 097a 7B68     		ldr	r3, [r7, #4]
 1896 097c 9B68     		ldr	r3, [r3, #8]
 1897 097e 03F48003 		and	r3, r3, #4194304
 1898 0982 002B     		cmp	r3, #0
 1899 0984 03D0     		beq	.L58
1398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1900              		.loc 1 1400 0
 1901 0986 4FF00103 		mov	r3, #1
 1902 098a FB73     		strb	r3, [r7, #15]
 1903 098c 02E0     		b	.L59
 1904              	.L58:
1401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1905              		.loc 1 1405 0
 1906 098e 4FF00003 		mov	r3, #0
 1907 0992 FB73     		strb	r3, [r7, #15]
 1908              	.L59:
1406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 1909              		.loc 1 1408 0
 1910 0994 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1911              		.loc 1 1409 0
 1912 0996 1846     		mov	r0, r3
 1913 0998 07F11407 		add	r7, r7, #20
 1914 099c BD46     		mov	sp, r7
 1915 099e 80BC     		pop	{r7}
 1916 09a0 7047     		bx	lr
 1917              		.cfi_endproc
 1918              	.LFE139:
 1920 09a2 00BF     		.align	2
 1921              		.global	ADC_AutoInjectedConvCmd
 1922              		.thumb
 1923              		.thumb_func
 1925              	ADC_AutoInjectedConvCmd:
 1926              	.LFB140:
1410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         conversion after regular one.
1414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1927              		.loc 1 1420 0
 1928              		.cfi_startproc
 1929              		@ args = 0, pretend = 0, frame = 8
 1930              		@ frame_needed = 1, uses_anonymous_args = 0
 1931              		@ link register save eliminated.
 1932 09a4 80B4     		push	{r7}
 1933              	.LCFI88:
 1934              		.cfi_def_cfa_offset 4
 1935              		.cfi_offset 7, -4
 1936 09a6 83B0     		sub	sp, sp, #12
 1937              	.LCFI89:
 1938              		.cfi_def_cfa_offset 16
 1939 09a8 00AF     		add	r7, sp, #0
 1940              	.LCFI90:
 1941              		.cfi_def_cfa_register 7
 1942 09aa 7860     		str	r0, [r7, #4]
 1943 09ac 0B46     		mov	r3, r1
 1944 09ae FB70     		strb	r3, [r7, #3]
1421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1945              		.loc 1 1424 0
 1946 09b0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1947 09b2 002B     		cmp	r3, #0
 1948 09b4 06D0     		beq	.L61
1425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 1949              		.loc 1 1427 0
 1950 09b6 7B68     		ldr	r3, [r7, #4]
 1951 09b8 5B68     		ldr	r3, [r3, #4]
 1952 09ba 43F48062 		orr	r2, r3, #1024
 1953 09be 7B68     		ldr	r3, [r7, #4]
 1954 09c0 5A60     		str	r2, [r3, #4]
 1955 09c2 05E0     		b	.L60
 1956              	.L61:
1428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 1957              		.loc 1 1432 0
 1958 09c4 7B68     		ldr	r3, [r7, #4]
 1959 09c6 5B68     		ldr	r3, [r3, #4]
 1960 09c8 23F48062 		bic	r2, r3, #1024
 1961 09cc 7B68     		ldr	r3, [r7, #4]
 1962 09ce 5A60     		str	r2, [r3, #4]
 1963              	.L60:
1433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1964              		.loc 1 1434 0
 1965 09d0 07F10C07 		add	r7, r7, #12
 1966 09d4 BD46     		mov	sp, r7
 1967 09d6 80BC     		pop	{r7}
 1968 09d8 7047     		bx	lr
 1969              		.cfi_endproc
 1970              	.LFE140:
 1972 09da 00BF     		.align	2
 1973              		.global	ADC_InjectedDiscModeCmd
 1974              		.thumb
 1975              		.thumb_func
 1977              	ADC_InjectedDiscModeCmd:
 1978              	.LFB141:
1435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         group channel.
1442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1979              		.loc 1 1446 0
 1980              		.cfi_startproc
 1981              		@ args = 0, pretend = 0, frame = 8
 1982              		@ frame_needed = 1, uses_anonymous_args = 0
 1983              		@ link register save eliminated.
 1984 09dc 80B4     		push	{r7}
 1985              	.LCFI91:
 1986              		.cfi_def_cfa_offset 4
 1987              		.cfi_offset 7, -4
 1988 09de 83B0     		sub	sp, sp, #12
 1989              	.LCFI92:
 1990              		.cfi_def_cfa_offset 16
 1991 09e0 00AF     		add	r7, sp, #0
 1992              	.LCFI93:
 1993              		.cfi_def_cfa_register 7
 1994 09e2 7860     		str	r0, [r7, #4]
 1995 09e4 0B46     		mov	r3, r1
 1996 09e6 FB70     		strb	r3, [r7, #3]
1447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1997              		.loc 1 1450 0
 1998 09e8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1999 09ea 002B     		cmp	r3, #0
 2000 09ec 06D0     		beq	.L64
1451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 2001              		.loc 1 1453 0
 2002 09ee 7B68     		ldr	r3, [r7, #4]
 2003 09f0 5B68     		ldr	r3, [r3, #4]
 2004 09f2 43F48052 		orr	r2, r3, #4096
 2005 09f6 7B68     		ldr	r3, [r7, #4]
 2006 09f8 5A60     		str	r2, [r3, #4]
 2007 09fa 05E0     		b	.L63
 2008              	.L64:
1454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 2009              		.loc 1 1458 0
 2010 09fc 7B68     		ldr	r3, [r7, #4]
 2011 09fe 5B68     		ldr	r3, [r3, #4]
 2012 0a00 23F48052 		bic	r2, r3, #4096
 2013 0a04 7B68     		ldr	r3, [r7, #4]
 2014 0a06 5A60     		str	r2, [r3, #4]
 2015              	.L63:
1459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2016              		.loc 1 1460 0
 2017 0a08 07F10C07 		add	r7, r7, #12
 2018 0a0c BD46     		mov	sp, r7
 2019 0a0e 80BC     		pop	{r7}
 2020 0a10 7047     		bx	lr
 2021              		.cfi_endproc
 2022              	.LFE141:
 2024 0a12 00BF     		.align	2
 2025              		.global	ADC_GetInjectedConversionValue
 2026              		.thumb
 2027              		.thumb_func
 2029              	ADC_GetInjectedConversionValue:
 2030              	.LFB142:
1461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2031              		.loc 1 1474 0
 2032              		.cfi_startproc
 2033              		@ args = 0, pretend = 0, frame = 16
 2034              		@ frame_needed = 1, uses_anonymous_args = 0
 2035              		@ link register save eliminated.
 2036 0a14 80B4     		push	{r7}
 2037              	.LCFI94:
 2038              		.cfi_def_cfa_offset 4
 2039              		.cfi_offset 7, -4
 2040 0a16 85B0     		sub	sp, sp, #20
 2041              	.LCFI95:
 2042              		.cfi_def_cfa_offset 24
 2043 0a18 00AF     		add	r7, sp, #0
 2044              	.LCFI96:
 2045              		.cfi_def_cfa_register 7
 2046 0a1a 7860     		str	r0, [r7, #4]
 2047 0a1c 0B46     		mov	r3, r1
 2048 0a1e FB70     		strb	r3, [r7, #3]
1475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 2049              		.loc 1 1475 0
 2050 0a20 4FF00003 		mov	r3, #0
 2051 0a24 FB60     		str	r3, [r7, #12]
1476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 2052              		.loc 1 1481 0
 2053 0a26 7B68     		ldr	r3, [r7, #4]
 2054 0a28 FB60     		str	r3, [r7, #12]
1482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 2055              		.loc 1 1482 0
 2056 0a2a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2057 0a2c FB68     		ldr	r3, [r7, #12]
 2058 0a2e D318     		adds	r3, r2, r3
 2059 0a30 03F12803 		add	r3, r3, #40
 2060 0a34 FB60     		str	r3, [r7, #12]
1483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 2061              		.loc 1 1485 0
 2062 0a36 FB68     		ldr	r3, [r7, #12]
 2063 0a38 1B68     		ldr	r3, [r3, #0]
 2064 0a3a 9BB2     		uxth	r3, r3
1486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2065              		.loc 1 1486 0
 2066 0a3c 1846     		mov	r0, r3
 2067 0a3e 07F11407 		add	r7, r7, #20
 2068 0a42 BD46     		mov	sp, r7
 2069 0a44 80BC     		pop	{r7}
 2070 0a46 7047     		bx	lr
 2071              		.cfi_endproc
 2072              	.LFE142:
 2074              		.align	2
 2075              		.global	ADC_ITConfig
 2076              		.thumb
 2077              		.thumb_func
 2079              	ADC_ITConfig:
 2080              	.LFB143:
1487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Interrupts and flags management functions
1497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the ADC Interrupts and 
1500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   to get the status and clear flags and Interrupts pending bits.
1501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Each ADC provides 4 Interrupts sources and 6 Flags which can be divided into 
1503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   3 groups:
1504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   I. Flags and Interrupts for ADC regular channels
1506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate (depending 
1512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() ) the end of:
1513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> a regular CHANNEL conversion 
1514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> sequence of regular GROUP conversions .
1515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      3. ADC_FLAG_STRT: Regular channel start ==> to indicate when regular CHANNEL 
1517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               conversion starts.
1518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_OVR : specifies the interrupt source for Overrun detection event.  
1522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_IT_EOC : specifies the interrupt source for Regular channel end of 
1523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      conversion event.
1524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   II. Flags and Interrupts for ADC Injected channels
1527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate at 
1531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                the end of injected GROUP conversion  
1532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                injected GROUP conversion starts.
1535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_JEOC : specifies the interrupt source for Injected channel end of 
1539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       conversion event.     
1540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   III. General Flags and Interrupts for the ADC
1542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ================================================= 
1543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               crosses the programmed thresholds values.
1547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   The user should identify which mode will be used in his application to manage 
1554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   the ADC controller events: Polling mode or Interrupt mode.
1555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Polling Mode it is advised to use the following functions:
1557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_GetFlagStatus() : to check if flags events occur. 
1558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_ClearFlag()     : to clear the flags events.
1559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       
1560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Interrupt Mode it is advised to use the following functions:
1561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ITConfig()          : to enable or disable the interrupt source.
1562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_GetITStatus()       : to check if Interrupt occurs.
1563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                  (corresponding Flag). 
1565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2081              		.loc 1 1582 0
 2082              		.cfi_startproc
 2083              		@ args = 0, pretend = 0, frame = 16
 2084              		@ frame_needed = 1, uses_anonymous_args = 0
 2085              		@ link register save eliminated.
 2086 0a48 80B4     		push	{r7}
 2087              	.LCFI97:
 2088              		.cfi_def_cfa_offset 4
 2089              		.cfi_offset 7, -4
 2090 0a4a 85B0     		sub	sp, sp, #20
 2091              	.LCFI98:
 2092              		.cfi_def_cfa_offset 24
 2093 0a4c 00AF     		add	r7, sp, #0
 2094              	.LCFI99:
 2095              		.cfi_def_cfa_register 7
 2096 0a4e 7860     		str	r0, [r7, #4]
 2097 0a50 1346     		mov	r3, r2
 2098 0a52 0A46     		mov	r2, r1	@ movhi
 2099 0a54 7A80     		strh	r2, [r7, #2]	@ movhi
 2100 0a56 7B70     		strb	r3, [r7, #1]
1583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
 2101              		.loc 1 1583 0
 2102 0a58 4FF00003 		mov	r3, #0
 2103 0a5c FB60     		str	r3, [r7, #12]
1584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 2104              		.loc 1 1590 0
 2105 0a5e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2106 0a60 DBB2     		uxtb	r3, r3
 2107 0a62 FB60     		str	r3, [r7, #12]
1591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 2108              		.loc 1 1591 0
 2109 0a64 FB68     		ldr	r3, [r7, #12]
 2110 0a66 4FF00102 		mov	r2, #1
 2111 0a6a 02FA03F3 		lsl	r3, r2, r3
 2112 0a6e FB60     		str	r3, [r7, #12]
1592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2113              		.loc 1 1593 0
 2114 0a70 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2115 0a72 002B     		cmp	r3, #0
 2116 0a74 07D0     		beq	.L68
1594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 2117              		.loc 1 1596 0
 2118 0a76 7B68     		ldr	r3, [r7, #4]
 2119 0a78 5B68     		ldr	r3, [r3, #4]
 2120 0a7a 1A46     		mov	r2, r3
 2121 0a7c FB68     		ldr	r3, [r7, #12]
 2122 0a7e 1A43     		orrs	r2, r2, r3
 2123 0a80 7B68     		ldr	r3, [r7, #4]
 2124 0a82 5A60     		str	r2, [r3, #4]
 2125 0a84 08E0     		b	.L67
 2126              	.L68:
1597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 2127              		.loc 1 1601 0
 2128 0a86 7B68     		ldr	r3, [r7, #4]
 2129 0a88 5B68     		ldr	r3, [r3, #4]
 2130 0a8a 1A46     		mov	r2, r3
 2131 0a8c FB68     		ldr	r3, [r7, #12]
 2132 0a8e 6FEA0303 		mvn	r3, r3
 2133 0a92 1A40     		ands	r2, r2, r3
 2134 0a94 7B68     		ldr	r3, [r7, #4]
 2135 0a96 5A60     		str	r2, [r3, #4]
 2136              	.L67:
1602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2137              		.loc 1 1603 0
 2138 0a98 07F11407 		add	r7, r7, #20
 2139 0a9c BD46     		mov	sp, r7
 2140 0a9e 80BC     		pop	{r7}
 2141 0aa0 7047     		bx	lr
 2142              		.cfi_endproc
 2143              	.LFE143:
 2145 0aa2 00BF     		.align	2
 2146              		.global	ADC_GetFlagStatus
 2147              		.thumb
 2148              		.thumb_func
 2150              	ADC_GetFlagStatus:
 2151              	.LFB144:
1604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2152              		.loc 1 1619 0
 2153              		.cfi_startproc
 2154              		@ args = 0, pretend = 0, frame = 16
 2155              		@ frame_needed = 1, uses_anonymous_args = 0
 2156              		@ link register save eliminated.
 2157 0aa4 80B4     		push	{r7}
 2158              	.LCFI100:
 2159              		.cfi_def_cfa_offset 4
 2160              		.cfi_offset 7, -4
 2161 0aa6 85B0     		sub	sp, sp, #20
 2162              	.LCFI101:
 2163              		.cfi_def_cfa_offset 24
 2164 0aa8 00AF     		add	r7, sp, #0
 2165              	.LCFI102:
 2166              		.cfi_def_cfa_register 7
 2167 0aaa 7860     		str	r0, [r7, #4]
 2168 0aac 0B46     		mov	r3, r1
 2169 0aae FB70     		strb	r3, [r7, #3]
1620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 2170              		.loc 1 1620 0
 2171 0ab0 4FF00003 		mov	r3, #0
 2172 0ab4 FB73     		strb	r3, [r7, #15]
1621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 2173              		.loc 1 1626 0
 2174 0ab6 7B68     		ldr	r3, [r7, #4]
 2175 0ab8 1B68     		ldr	r3, [r3, #0]
 2176 0aba 1A46     		mov	r2, r3
 2177 0abc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2178 0abe 1340     		ands	r3, r3, r2
 2179 0ac0 002B     		cmp	r3, #0
 2180 0ac2 03D0     		beq	.L71
1627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 2181              		.loc 1 1629 0
 2182 0ac4 4FF00103 		mov	r3, #1
 2183 0ac8 FB73     		strb	r3, [r7, #15]
 2184 0aca 02E0     		b	.L72
 2185              	.L71:
1630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2186              		.loc 1 1634 0
 2187 0acc 4FF00003 		mov	r3, #0
 2188 0ad0 FB73     		strb	r3, [r7, #15]
 2189              	.L72:
1635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 2190              		.loc 1 1637 0
 2191 0ad2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2192              		.loc 1 1638 0
 2193 0ad4 1846     		mov	r0, r3
 2194 0ad6 07F11407 		add	r7, r7, #20
 2195 0ada BD46     		mov	sp, r7
 2196 0adc 80BC     		pop	{r7}
 2197 0ade 7047     		bx	lr
 2198              		.cfi_endproc
 2199              	.LFE144:
 2201              		.align	2
 2202              		.global	ADC_ClearFlag
 2203              		.thumb
 2204              		.thumb_func
 2206              	ADC_ClearFlag:
 2207              	.LFB145:
1639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2208              		.loc 1 1654 0
 2209              		.cfi_startproc
 2210              		@ args = 0, pretend = 0, frame = 8
 2211              		@ frame_needed = 1, uses_anonymous_args = 0
 2212              		@ link register save eliminated.
 2213 0ae0 80B4     		push	{r7}
 2214              	.LCFI103:
 2215              		.cfi_def_cfa_offset 4
 2216              		.cfi_offset 7, -4
 2217 0ae2 83B0     		sub	sp, sp, #12
 2218              	.LCFI104:
 2219              		.cfi_def_cfa_offset 16
 2220 0ae4 00AF     		add	r7, sp, #0
 2221              	.LCFI105:
 2222              		.cfi_def_cfa_register 7
 2223 0ae6 7860     		str	r0, [r7, #4]
 2224 0ae8 0B46     		mov	r3, r1
 2225 0aea FB70     		strb	r3, [r7, #3]
1655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 2226              		.loc 1 1660 0
 2227 0aec FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2228 0aee 6FEA0302 		mvn	r2, r3
 2229 0af2 7B68     		ldr	r3, [r7, #4]
 2230 0af4 1A60     		str	r2, [r3, #0]
1661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2231              		.loc 1 1661 0
 2232 0af6 07F10C07 		add	r7, r7, #12
 2233 0afa BD46     		mov	sp, r7
 2234 0afc 80BC     		pop	{r7}
 2235 0afe 7047     		bx	lr
 2236              		.cfi_endproc
 2237              	.LFE145:
 2239              		.align	2
 2240              		.global	ADC_GetITStatus
 2241              		.thumb
 2242              		.thumb_func
 2244              	ADC_GetITStatus:
 2245              	.LFB146:
1662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2246              		.loc 1 1675 0
 2247              		.cfi_startproc
 2248              		@ args = 0, pretend = 0, frame = 24
 2249              		@ frame_needed = 1, uses_anonymous_args = 0
 2250              		@ link register save eliminated.
 2251 0b00 80B4     		push	{r7}
 2252              	.LCFI106:
 2253              		.cfi_def_cfa_offset 4
 2254              		.cfi_offset 7, -4
 2255 0b02 87B0     		sub	sp, sp, #28
 2256              	.LCFI107:
 2257              		.cfi_def_cfa_offset 32
 2258 0b04 00AF     		add	r7, sp, #0
 2259              	.LCFI108:
 2260              		.cfi_def_cfa_register 7
 2261 0b06 7860     		str	r0, [r7, #4]
 2262 0b08 0B46     		mov	r3, r1
 2263 0b0a 7B80     		strh	r3, [r7, #2]	@ movhi
1676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
 2264              		.loc 1 1676 0
 2265 0b0c 4FF00003 		mov	r3, #0
 2266 0b10 FB75     		strb	r3, [r7, #23]
1677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 2267              		.loc 1 1677 0
 2268 0b12 4FF00003 		mov	r3, #0
 2269 0b16 3B61     		str	r3, [r7, #16]
 2270 0b18 4FF00003 		mov	r3, #0
 2271 0b1c FB60     		str	r3, [r7, #12]
1678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
 2272              		.loc 1 1684 0
 2273 0b1e 7B88     		ldrh	r3, [r7, #2]
 2274 0b20 4FEA1323 		lsr	r3, r3, #8
 2275 0b24 9BB2     		uxth	r3, r3
 2276 0b26 3B61     		str	r3, [r7, #16]
1685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 2277              		.loc 1 1687 0
 2278 0b28 7B68     		ldr	r3, [r7, #4]
 2279 0b2a 5B68     		ldr	r3, [r3, #4]
 2280 0b2c 1A46     		mov	r2, r3
 2281 0b2e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2282 0b30 DBB2     		uxtb	r3, r3
 2283 0b32 4FF00101 		mov	r1, #1
 2284 0b36 01FA03F3 		lsl	r3, r1, r3
 2285 0b3a 1340     		ands	r3, r3, r2
 2286 0b3c FB60     		str	r3, [r7, #12]
1688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 2287              		.loc 1 1690 0
 2288 0b3e 7B68     		ldr	r3, [r7, #4]
 2289 0b40 1B68     		ldr	r3, [r3, #0]
 2290 0b42 1A46     		mov	r2, r3
 2291 0b44 3B69     		ldr	r3, [r7, #16]
 2292 0b46 1340     		ands	r3, r3, r2
 2293 0b48 002B     		cmp	r3, #0
 2294 0b4a 06D0     		beq	.L75
 2295              		.loc 1 1690 0 is_stmt 0 discriminator 1
 2296 0b4c FB68     		ldr	r3, [r7, #12]
 2297 0b4e 002B     		cmp	r3, #0
 2298 0b50 03D0     		beq	.L75
1691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 2299              		.loc 1 1693 0 is_stmt 1
 2300 0b52 4FF00103 		mov	r3, #1
 2301 0b56 FB75     		strb	r3, [r7, #23]
 2302 0b58 02E0     		b	.L76
 2303              	.L75:
1694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2304              		.loc 1 1698 0
 2305 0b5a 4FF00003 		mov	r3, #0
 2306 0b5e FB75     		strb	r3, [r7, #23]
 2307              	.L76:
1699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 2308              		.loc 1 1701 0
 2309 0b60 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2310              		.loc 1 1702 0
 2311 0b62 1846     		mov	r0, r3
 2312 0b64 07F11C07 		add	r7, r7, #28
 2313 0b68 BD46     		mov	sp, r7
 2314 0b6a 80BC     		pop	{r7}
 2315 0b6c 7047     		bx	lr
 2316              		.cfi_endproc
 2317              	.LFE146:
 2319 0b6e 00BF     		.align	2
 2320              		.global	ADC_ClearITPendingBit
 2321              		.thumb
 2322              		.thumb_func
 2324              	ADC_ClearITPendingBit:
 2325              	.LFB147:
1703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2326              		.loc 1 1716 0
 2327              		.cfi_startproc
 2328              		@ args = 0, pretend = 0, frame = 16
 2329              		@ frame_needed = 1, uses_anonymous_args = 0
 2330              		@ link register save eliminated.
 2331 0b70 80B4     		push	{r7}
 2332              	.LCFI109:
 2333              		.cfi_def_cfa_offset 4
 2334              		.cfi_offset 7, -4
 2335 0b72 85B0     		sub	sp, sp, #20
 2336              	.LCFI110:
 2337              		.cfi_def_cfa_offset 24
 2338 0b74 00AF     		add	r7, sp, #0
 2339              	.LCFI111:
 2340              		.cfi_def_cfa_register 7
 2341 0b76 7860     		str	r0, [r7, #4]
 2342 0b78 0B46     		mov	r3, r1
 2343 0b7a 7B80     		strh	r3, [r7, #2]	@ movhi
1717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
 2344              		.loc 1 1717 0
 2345 0b7c 4FF00003 		mov	r3, #0
 2346 0b80 FB73     		strb	r3, [r7, #15]
1718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 2347              		.loc 1 1722 0
 2348 0b82 7B88     		ldrh	r3, [r7, #2]
 2349 0b84 4FEA1323 		lsr	r3, r3, #8
 2350 0b88 9BB2     		uxth	r3, r3
 2351 0b8a FB73     		strb	r3, [r7, #15]
1723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 2352              		.loc 1 1724 0
 2353 0b8c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2354 0b8e 6FEA0302 		mvn	r2, r3
 2355 0b92 7B68     		ldr	r3, [r7, #4]
 2356 0b94 1A60     		str	r2, [r3, #0]
1725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }                    
 2357              		.loc 1 1725 0
 2358 0b96 07F11407 		add	r7, r7, #20
 2359 0b9a BD46     		mov	sp, r7
 2360 0b9c 80BC     		pop	{r7}
 2361 0b9e 7047     		bx	lr
 2362              		.cfi_endproc
 2363              	.LFE147:
 2365              	.Letext0:
 2366              		.file 2 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 2367              		.file 3 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Devi
 2368              		.file 4 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\STM32F4xx_S
 2369              		.file 5 "C:\\Dokumente und Einstellungen\\brand\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_adc.c
  C:\Temp\ccfJcJWj.s:18     .text:00000000 $t
  C:\Temp\ccfJcJWj.s:23     .text:00000000 ADC_DeInit
  C:\Temp\ccfJcJWj.s:56     .text:00000020 ADC_Init
  C:\Temp\ccfJcJWj.s:181    .text:000000d8 ADC_StructInit
  C:\Temp\ccfJcJWj.s:240    .text:00000124 ADC_CommonInit
  C:\Temp\ccfJcJWj.s:311    .text:00000180 ADC_CommonStructInit
  C:\Temp\ccfJcJWj.s:358    .text:000001b4 ADC_Cmd
  C:\Temp\ccfJcJWj.s:410    .text:000001ec ADC_AnalogWatchdogCmd
  C:\Temp\ccfJcJWj.s:463    .text:00000228 ADC_AnalogWatchdogThresholdsConfig
  C:\Temp\ccfJcJWj.s:506    .text:00000250 ADC_AnalogWatchdogSingleChannelConfig
  C:\Temp\ccfJcJWj.s:559    .text:00000288 ADC_TempSensorVrefintCmd
  C:\Temp\ccfJcJWj.s:614    .text:000002d4 ADC_VBATCmd
  C:\Temp\ccfJcJWj.s:669    .text:00000320 ADC_RegularChannelConfig
  C:\Temp\ccfJcJWj.s:911    .text:000004dc ADC_SoftwareStartConv
  C:\Temp\ccfJcJWj.s:948    .text:000004fc ADC_GetSoftwareStartConvStatus
  C:\Temp\ccfJcJWj.s:1000   .text:00000534 ADC_EOCOnEachRegularChannelCmd
  C:\Temp\ccfJcJWj.s:1052   .text:0000056c ADC_ContinuousModeCmd
  C:\Temp\ccfJcJWj.s:1104   .text:000005a4 ADC_DiscModeChannelCountConfig
  C:\Temp\ccfJcJWj.s:1165   .text:000005f0 ADC_DiscModeCmd
  C:\Temp\ccfJcJWj.s:1217   .text:00000628 ADC_GetConversionValue
  C:\Temp\ccfJcJWj.s:1253   .text:00000644 ADC_GetMultiModeConversionValue
  C:\Temp\ccfJcJWj.s:1284   .text:0000065c ADC_DMACmd
  C:\Temp\ccfJcJWj.s:1336   .text:00000694 ADC_DMARequestAfterLastTransferCmd
  C:\Temp\ccfJcJWj.s:1388   .text:000006cc ADC_MultiModeDMARequestAfterLastTransferCmd
  C:\Temp\ccfJcJWj.s:1443   .text:00000718 ADC_InjectedChannelConfig
  C:\Temp\ccfJcJWj.s:1621   .text:0000085c ADC_InjectedSequencerLengthConfig
  C:\Temp\ccfJcJWj.s:1682   .text:000008a8 ADC_SetInjectedOffset
  C:\Temp\ccfJcJWj.s:1732   .text:000008dc ADC_ExternalTrigInjectedConvConfig
  C:\Temp\ccfJcJWj.s:1784   .text:00000914 ADC_ExternalTrigInjectedConvEdgeConfig
  C:\Temp\ccfJcJWj.s:1836   .text:0000094c ADC_SoftwareStartInjectedConv
  C:\Temp\ccfJcJWj.s:1873   .text:0000096c ADC_GetSoftwareStartInjectedConvCmdStatus
  C:\Temp\ccfJcJWj.s:1925   .text:000009a4 ADC_AutoInjectedConvCmd
  C:\Temp\ccfJcJWj.s:1977   .text:000009dc ADC_InjectedDiscModeCmd
  C:\Temp\ccfJcJWj.s:2029   .text:00000a14 ADC_GetInjectedConversionValue
  C:\Temp\ccfJcJWj.s:2079   .text:00000a48 ADC_ITConfig
  C:\Temp\ccfJcJWj.s:2150   .text:00000aa4 ADC_GetFlagStatus
  C:\Temp\ccfJcJWj.s:2206   .text:00000ae0 ADC_ClearFlag
  C:\Temp\ccfJcJWj.s:2244   .text:00000b00 ADC_GetITStatus
  C:\Temp\ccfJcJWj.s:2324   .text:00000b70 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
