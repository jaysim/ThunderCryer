   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_pwr.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.PWR_DeInit,"ax",%progbits
  19              		.align	1
  20              		.global	PWR_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	PWR_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @file    stm32f4xx_pwr.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:           
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Backup Domain Access
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - PVD configuration
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - WakeUp pin configuration
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Backup Regulator configuration
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Performance Mode and FLASH Power Down configuration functions
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Low Power modes configuration
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Flags management
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *               
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @attention
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_pwr.h"
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_rcc.h"
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR 
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief PWR driver modules
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CR Register ---*/
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of DBP bit */
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define DBP_BitNumber            0x08
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PVDE bit */
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PVDE_BitNumber           0x04
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of FPDS bit */
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define FPDS_BitNumber           0x09
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_FPDS_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (FPDS_BitNumber * 4))
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PMODE bit */
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PMODE_BitNumber           0x0E
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PMODE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PMODE_BitNumber * 4))
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CSR Register ---*/
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP bit */
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP_BitNumber           0x08
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of BRE bit */
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define BRE_BitNumber            0x09
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_BRE_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (BRE_BitNumber * 4))
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* CR register bit mask */
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Private_Functions
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Backup Domain Access function  
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                             Backup Domain Access function 
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   After reset, the backup domain (RTC registers, RTC backup data 
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   registers and backup SRAM) is protected against possible unwanted 
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   write accesses. 
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   To enable access to the RTC Domain and RTC registers, proceed as follows:
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable the Power Controller (PWR) APB1 interface clock using the
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       RCC_APB1PeriphClockCmd() function.
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_DeInit(void)
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  27              		.loc 1 121 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 3, -8
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  36              		.loc 1 122 0
  37 0002 0121     		movs	r1, #1
  38 0004 4FF08050 		mov	r0, #268435456
  39 0008 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  40              		.loc 1 123 0
  41 000c 4FF08050 		mov	r0, #268435456
  42 0010 0021     		movs	r1, #0
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
  43              		.loc 1 124 0
  44 0012 BDE80840 		pop	{r3, lr}
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  45              		.loc 1 123 0
  46 0016 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
  47              		.cfi_endproc
  48              	.LFE110:
  50              		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  51              		.align	1
  52              		.global	PWR_BackupAccessCmd
  53              		.thumb
  54              		.thumb_func
  56              	PWR_BackupAccessCmd:
  57              	.LFB111:
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables access to the backup domain (RTC registers, RTC 
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         backup data registers and backup SRAM).
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the access to the backup domain.
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  58              		.loc 1 136 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63              	.LVL0:
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  64              		.loc 1 140 0
  65 0000 014B     		ldr	r3, .L3
  66 0002 1860     		str	r0, [r3, #0]
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
  67              		.loc 1 141 0
  68 0004 7047     		bx	lr
  69              	.L4:
  70 0006 00BF     		.align	2
  71              	.L3:
  72 0008 20000E42 		.word	1108213792
  73              		.cfi_endproc
  74              	.LFE111:
  76              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
  77              		.align	1
  78              		.global	PWR_PVDLevelConfig
  79              		.thumb
  80              		.thumb_func
  82              	PWR_PVDLevelConfig:
  83              	.LFB112:
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   PVD configuration functions 
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            PVD configuration functions
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is used to monitor the VDD power supply by comparing it to a threshold
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - A PVDO flag is available to indicate if VDD/VDDA is higher or lower than the 
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    PVD threshold. This event is internally connected to the EXTI line16
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and can generate an interrupt if enabled through the EXTI registers.
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is stopped in Standby mode.
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_0: PVD detection level set to 2.0V
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_1: PVD detection level set to 2.2V
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_2: PVD detection level set to 2.3V
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_3: PVD detection level set to 2.5V
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_4: PVD detection level set to 2.7V
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_5: PVD detection level set to 2.8V
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_6: PVD detection level set to 2.9V
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_7: PVD detection level set to 3.0V
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   Refer to the electrical characteristics of you device datasheet for more details. 
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  84              		.loc 1 182 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89              	.LVL1:
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
  90              		.loc 1 188 0
  91 0000 034B     		ldr	r3, .L6
  92 0002 1A68     		ldr	r2, [r3, #0]
  93              	.LVL2:
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PLS[7:5] bits */
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
  94              		.loc 1 191 0
  95 0004 22F0E002 		bic	r2, r2, #224
  96              	.LVL3:
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
  97              		.loc 1 194 0
  98 0008 1043     		orrs	r0, r0, r2
  99              	.LVL4:
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 100              		.loc 1 197 0
 101 000a 1860     		str	r0, [r3, #0]
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 102              		.loc 1 198 0
 103 000c 7047     		bx	lr
 104              	.L7:
 105 000e 00BF     		.align	2
 106              	.L6:
 107 0010 00700040 		.word	1073770496
 108              		.cfi_endproc
 109              	.LFE112:
 111              		.section	.text.PWR_PVDCmd,"ax",%progbits
 112              		.align	1
 113              		.global	PWR_PVDCmd
 114              		.thumb
 115              		.thumb_func
 117              	PWR_PVDCmd:
 118              	.LFB113:
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the PVD.
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 119              		.loc 1 207 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
 124              	.LVL5:
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 125              		.loc 1 211 0
 126 0000 014B     		ldr	r3, .L9
 127 0002 1860     		str	r0, [r3, #0]
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 128              		.loc 1 212 0
 129 0004 7047     		bx	lr
 130              	.L10:
 131 0006 00BF     		.align	2
 132              	.L9:
 133 0008 10000E42 		.word	1108213776
 134              		.cfi_endproc
 135              	.LFE113:
 137              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 138              		.align	1
 139              		.global	PWR_WakeUpPinCmd
 140              		.thumb
 141              		.thumb_func
 143              	PWR_WakeUpPinCmd:
 144              	.LFB114:
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pin configuration functions
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   WakeUp pin configuration functions 
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     WakeUp pin configuration functions
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - WakeUp pin is used to wakeup the system from Standby mode. This pin is 
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    forced in input pull down configuration and is active on rising edges.
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - There is only one WakeUp pin: WakeUp Pin 1 on PA.00.
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 145              		.loc 1 241 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 0
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              		@ link register save eliminated.
 150              	.LVL6:
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 151              		.loc 1 245 0
 152 0000 014B     		ldr	r3, .L12
 153 0002 1860     		str	r0, [r3, #0]
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 154              		.loc 1 246 0
 155 0004 7047     		bx	lr
 156              	.L13:
 157 0006 00BF     		.align	2
 158              	.L12:
 159 0008 A0000E42 		.word	1108213920
 160              		.cfi_endproc
 161              	.LFE114:
 163              		.section	.text.PWR_BackupRegulatorCmd,"ax",%progbits
 164              		.align	1
 165              		.global	PWR_BackupRegulatorCmd
 166              		.thumb
 167              		.thumb_func
 169              	PWR_BackupRegulatorCmd:
 170              	.LFB115:
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group4 Backup Regulator configuration functions
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Backup Regulator configuration functions 
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Backup Regulator configuration functions
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup domain includes 4 Kbytes of backup SRAM accessible only from the 
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is retained 
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    even in Standby or VBAT mode when the low power backup regulator is enabled. 
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    It can be considered as an internal EEPROM when VBAT is always present.
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    You can use the PWR_BackupRegulatorCmd() function to enable the low power
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    backup regulator and use the PWR_GetFlagStatus(PWR_FLAG_BRR) to check if it is
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ready or not. 
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - When the backup domain is supplied by VDD (analog switch connected to VDD) 
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the backup SRAM is powered from VDD which replaces the VBAT power supply to 
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    save battery life.
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup SRAM is not mass erased by an tamper event. It is read protected 
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    to prevent confidential data, such as cryptographic private key, from being 
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    accessed. The backup SRAM can be erased only through the Flash interface when
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    a protection level change from level 1 to level 0 is requested. 
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the description of Read protection (RDP) in the Flash programming manual.
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Backup Regulator.
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Backup Regulator.
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupRegulatorCmd(FunctionalState NewState)
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 171              		.loc 1 289 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              		@ link register save eliminated.
 176              	.LVL7:
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 177              		.loc 1 293 0
 178 0000 014B     		ldr	r3, .L15
 179 0002 1860     		str	r0, [r3, #0]
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 180              		.loc 1 294 0
 181 0004 7047     		bx	lr
 182              	.L16:
 183 0006 00BF     		.align	2
 184              	.L15:
 185 0008 A4000E42 		.word	1108213924
 186              		.cfi_endproc
 187              	.LFE115:
 189              		.section	.text.PWR_HighPerformanceModeCmd,"ax",%progbits
 190              		.align	1
 191              		.global	PWR_HighPerformanceModeCmd
 192              		.thumb
 193              		.thumb_func
 195              	PWR_HighPerformanceModeCmd:
 196              	.LFB116:
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group5 Performance Mode and FLASH Power Down configuration functions
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Performance Mode and FLASH Power Down configuration functions 
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            Performance Mode and FLASH Power Down configuration functions
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - By setting the PMODE bit in the PWR_CR register by using the PWR_HighPerformanceModeCmd()
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    function, the high performance mode is selected and the high voltage regulator 
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    minimum value should be around 1.2V.
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    When reset, the low performance mode is selected and the low voltage regulator 
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    minimum value should be around 1.08V.
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - By setting the FPDS bit in the PWR_CR register by using the PWR_FlashPowerDownCmd()
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    function, the Flash memory also enters power down mode when the device enters 
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode. When the Flash memory is in power down mode, an additional startup 
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    delay is incurred when waking up from Stop mode.
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the high performance mode.
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the performance mode.
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_HighPerformanceModeCmd(FunctionalState NewState)
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 197              		.loc 1 330 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 202              	.LVL8:
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_PMODE_BB = (uint32_t)NewState;
 203              		.loc 1 334 0
 204 0000 014B     		ldr	r3, .L18
 205 0002 1860     		str	r0, [r3, #0]
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 206              		.loc 1 335 0
 207 0004 7047     		bx	lr
 208              	.L19:
 209 0006 00BF     		.align	2
 210              	.L18:
 211 0008 38000E42 		.word	1108213816
 212              		.cfi_endproc
 213              	.LFE116:
 215              		.section	.text.PWR_FlashPowerDownCmd,"ax",%progbits
 216              		.align	1
 217              		.global	PWR_FlashPowerDownCmd
 218              		.thumb
 219              		.thumb_func
 221              	PWR_FlashPowerDownCmd:
 222              	.LFB117:
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Flash Power Down in STOP mode.
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Flash power mode.
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_FlashPowerDownCmd(FunctionalState NewState)
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 223              		.loc 1 344 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228              	.LVL9:
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 229              		.loc 1 348 0
 230 0000 014B     		ldr	r3, .L21
 231 0002 1860     		str	r0, [r3, #0]
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 232              		.loc 1 349 0
 233 0004 7047     		bx	lr
 234              	.L22:
 235 0006 00BF     		.align	2
 236              	.L21:
 237 0008 24000E42 		.word	1108213796
 238              		.cfi_endproc
 239              	.LFE117:
 241              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 242              		.align	1
 243              		.global	PWR_EnterSTOPMode
 244              		.thumb
 245              		.thumb_func
 247              	PWR_EnterSTOPMode:
 248              	.LFB118:
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group6 Low Power modes configuration functions
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Low Power modes configuration functions 
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Low Power modes configuration functions
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   The devices feature 3 low-power modes:
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Stop mode: all clocks are stopped, regulator running, regulator in low power mode
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Standby mode: 1.2V domain powered off.
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Sleep mode
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ===========
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Sleep mode is entered by using the __WFI() or __WFE() functions.
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any peripheral interrupt acknowledged by the nested vectored interrupt 
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         controller (NVIC) can wake up the device from Sleep mode.
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ==========
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    are preserved.
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator can be configured either in normal or low-power mode.
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    To minimize the consumption In Stop mode, FLASH can be powered off before 
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    entering the Stop mode. It can be switched on again by software after exiting 
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the Stop mode using the PWR_FlashPowerDownCmd() function. 
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Stop mode is entered using the PWR_EnterSTOPMode(PWR_Regulator_LowPower,) 
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         function with regulator in LowPower or with Regulator ON.
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Standby mode
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ============
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The Standby mode allows to achieve the lowest power consumption. It is based 
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    on the Cortex-M4 deepsleep mode, with the voltage regulator disabled. 
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the HSE oscillator are also switched off. SRAM and register contents are lost 
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    circuitry.
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator is OFF.
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         tamper event, time-stamp event, external reset in NRST pin, IWDG reset.              
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Auto-wakeup (AWU) from low-power mode
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    =====================================
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    without depending on an external interrupt (Auto-wakeup mode).
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Stop mode
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      ----------------------------------------
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 21 to be sensitive to rising edges (Interrupt 
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 22 to be sensitive to rising edges (Interrupt 
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Standby mode
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      -------------------------------------------
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STOP mode.
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *   
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.           
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *     
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_ON: STOP mode with regulator ON
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 249              		.loc 1 484 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              		@ link register save eliminated.
 254              	.LVL10:
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 255              		.loc 1 492 0
 256 0000 0A4B     		ldr	r3, .L26
 257 0002 1A68     		ldr	r2, [r3, #0]
 258              	.LVL11:
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDSR bits */
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 259              		.loc 1 494 0
 260 0004 22F00302 		bic	r2, r2, #3
 261              	.LVL12:
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set LPDSR bit according to PWR_Regulator value */
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 262              		.loc 1 497 0
 263 0008 1043     		orrs	r0, r0, r2
 264              	.LVL13:
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 265              		.loc 1 500 0
 266 000a 1860     		str	r0, [r3, #0]
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 267              		.loc 1 503 0
 268 000c 084B     		ldr	r3, .L26+4
 269 000e 1A69     		ldr	r2, [r3, #16]
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 270              		.loc 1 506 0
 271 0010 0129     		cmp	r1, #1
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 272              		.loc 1 503 0
 273 0012 42F00402 		orr	r2, r2, #4
 274 0016 1A61     		str	r2, [r3, #16]
 275              		.loc 1 506 0
 276 0018 01D1     		bne	.L24
 277              	.LBB8:
 278              	.LBB9:
 279              		.file 2 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Include/core_cmInstr.h"
   1:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /**************************************************************************//**
   2:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * @version  V2.10
   5:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * @date     19. July 2011
   6:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  *
   7:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * @note
   8:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  *
  10:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * @par
  11:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  *
  15:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * @par
  16:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  *
  22:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  ******************************************************************************/
  23:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  24:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  27:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  28:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   Access to dedicated instructions
  31:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   @{
  32:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** */
  33:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  34:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /* ARM armcc specific functions */
  36:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  37:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #endif
  40:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  41:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  42:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
  43:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  44:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
  46:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __NOP                             __nop
  47:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  48:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  49:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  51:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
  53:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
  54:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __WFI                             __wfi
  55:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  56:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  57:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
  58:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  59:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
  62:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __WFE                             __wfe
  63:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  64:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  65:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
  66:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  67:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
  69:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __SEV                             __sev
  70:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  71:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  72:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  74:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
  78:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  80:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  81:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  83:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
  86:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  88:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  89:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  91:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
  94:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  96:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  97:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  99:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 101:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 103:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 104:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __REV                             __rev
 105:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 106:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 107:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 109:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 111:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 113:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 114:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 116:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   rev16 r0, r0
 117:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   bx lr
 118:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** }
 119:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 120:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 121:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 123:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 125:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 127:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 128:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 130:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   revsh r0, r0
 131:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   bx lr
 132:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** }
 133:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 134:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 135:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 137:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 139:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 141:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 143:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 144:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __RBIT                            __rbit
 145:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 146:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 147:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 149:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 151:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 154:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 156:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 157:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 159:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 161:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 164:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 166:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 167:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 169:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 171:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 174:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 176:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 177:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 179:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 181:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 182:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 184:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 185:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 186:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 188:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 189:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 191:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 193:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 194:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 196:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 197:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 198:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 200:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 201:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 203:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 205:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 206:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 208:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 209:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 210:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 212:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 213:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 215:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 217:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 218:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __CLREX                           __clrex
 219:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 220:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 221:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Signed Saturate
 222:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 223:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function saturates a signed value.
 224:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 225:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 228:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 229:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __SSAT                            __ssat
 230:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 231:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 232:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 234:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function saturates an unsigned value.
 235:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 236:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 239:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 240:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __USAT                            __usat
 241:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 242:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 243:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Count leading zeros
 244:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 245:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 247:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return             number of leading zeros in value
 249:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 250:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __CLZ                             __clz 
 251:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 252:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 254:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 255:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 256:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 259:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #include <cmsis_iar.h>
 260:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 261:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 262:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /* GNU gcc specific functions */
 264:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 265:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
 266:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 267:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 269:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 271:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("nop");
 272:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** }
 273:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 274:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 275:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 277:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
 279:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 280:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 282:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 280              		.loc 2 282 0
 281              	@ 282 "D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include/core_cmInstr.h" 1
 282 001a 30BF     		wfi
 283              	@ 0 "" 2
 284              		.thumb
 285 001c 00E0     		b	.L25
 286              	.L24:
 287              	.LBE9:
 288              	.LBE8:
 289              	.LBB10:
 290              	.LBB11:
 283:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** }
 284:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 285:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 286:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
 287:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 288:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 291:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 293:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfe");
 291              		.loc 2 293 0
 292              	@ 293 "D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include/core_cmInstr.h" 1
 293 001e 20BF     		wfe
 294              	@ 0 "" 2
 295              		.thumb
 296              	.L25:
 297              	.LBE11:
 298              	.LBE10:
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {   
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFI();
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFE();
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 299              		.loc 1 517 0
 300 0020 1A69     		ldr	r2, [r3, #16]
 301 0022 22F00402 		bic	r2, r2, #4
 302 0026 1A61     		str	r2, [r3, #16]
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 303              		.loc 1 518 0
 304 0028 7047     		bx	lr
 305              	.L27:
 306 002a 00BF     		.align	2
 307              	.L26:
 308 002c 00700040 		.word	1073770496
 309 0030 00ED00E0 		.word	-536810240
 310              		.cfi_endproc
 311              	.LFE118:
 313              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 314              		.align	1
 315              		.global	PWR_EnterSTANDBYMode
 316              		.thumb
 317              		.thumb_func
 319              	PWR_EnterSTANDBYMode:
 320              	.LFB119:
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STANDBY mode.
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - Reset pad (still available) 
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.       
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 321              		.loc 1 532 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325              		@ link register save eliminated.
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear Wakeup flag */
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 326              		.loc 1 534 0
 327 0000 074B     		ldr	r3, .L29
 328 0002 1A68     		ldr	r2, [r3, #0]
 329 0004 42F00402 		orr	r2, r2, #4
 330 0008 1A60     		str	r2, [r3, #0]
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STANDBY mode */
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 331              		.loc 1 537 0
 332 000a 1A68     		ldr	r2, [r3, #0]
 333 000c 42F00202 		orr	r2, r2, #2
 334 0010 1A60     		str	r2, [r3, #0]
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 335              		.loc 1 540 0
 336 0012 044B     		ldr	r3, .L29+4
 337 0014 1A69     		ldr	r2, [r3, #16]
 338 0016 42F00402 		orr	r2, r2, #4
 339 001a 1A61     		str	r2, [r3, #16]
 340              	.LBB12:
 341              	.LBB13:
 282:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 342              		.loc 2 282 0
 343              	@ 282 "D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include/core_cmInstr.h" 1
 344 001c 30BF     		wfi
 345              	@ 0 "" 2
 346              		.thumb
 347              	.LBE13:
 348              	.LBE12:
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* This option is used to ensure that store operations are completed */
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined ( __CC_ARM   )
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __force_stores();
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Request Wait For Interrupt */
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __WFI();
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 349              		.loc 1 548 0
 350 001e 7047     		bx	lr
 351              	.L30:
 352              		.align	2
 353              	.L29:
 354 0020 00700040 		.word	1073770496
 355 0024 00ED00E0 		.word	-536810240
 356              		.cfi_endproc
 357              	.LFE119:
 359              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 360              		.align	1
 361              		.global	PWR_GetFlagStatus
 362              		.thumb
 363              		.thumb_func
 365              	PWR_GetFlagStatus:
 366              	.LFB120:
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group7 Flags management functions
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Flags management functions 
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            Flags management functions
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  was received from the WKUP pin or from the RTC alarm (Alarm A 
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or Alarm B), RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  An additional wakeup event is detected if the WKUP pin is enabled 
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  (by setting the EWUP bit) when the WKUP pin level is already high.  
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  resumed from StandBy mode.    
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  by the PWR_PVDCmd() function. The PVD is stopped by Standby mode 
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  For this reason, this bit is equal to 0 after Standby or reset
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  until the PVDE bit is set.
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_BRR: Backup regulator ready flag. This bit is not reset 
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  when the device wakes up from Standby mode or by a system reset 
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or power reset.  
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_REGRDY: Main regulator ready flag. 
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 367              		.loc 1 588 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              		@ link register save eliminated.
 372              	.LVL14:
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   FlagStatus bitstatus = RESET;
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 373              		.loc 1 594 0
 374 0000 034B     		ldr	r3, .L32
 375 0002 5B68     		ldr	r3, [r3, #4]
 376              	.LVL15:
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = SET;
 377              		.loc 1 596 0
 378 0004 1842     		tst	r0, r3
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = RESET;
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Return the flag status */
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   return bitstatus;
 379              		.loc 1 603 0
 380 0006 0CBF     		ite	eq
 381 0008 0020     		moveq	r0, #0
 382 000a 0120     		movne	r0, #1
 383              	.LVL16:
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 384              		.loc 1 604 0
 385 000c 7047     		bx	lr
 386              	.L33:
 387 000e 00BF     		.align	2
 388              	.L32:
 389 0010 00700040 		.word	1073770496
 390              		.cfi_endproc
 391              	.LFE120:
 393              		.section	.text.PWR_ClearFlag,"ax",%progbits
 394              		.align	1
 395              		.global	PWR_ClearFlag
 396              		.thumb
 397              		.thumb_func
 399              	PWR_ClearFlag:
 400              	.LFB121:
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 401              		.loc 1 615 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 0
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405              		@ link register save eliminated.
 406              	.LVL17:
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 407              		.loc 1 619 0
 408 0000 024B     		ldr	r3, .L35
 409 0002 1A68     		ldr	r2, [r3, #0]
 410 0004 42EA8000 		orr	r0, r2, r0, lsl #2
 411              	.LVL18:
 412 0008 1860     		str	r0, [r3, #0]
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 413              		.loc 1 620 0
 414 000a 7047     		bx	lr
 415              	.L36:
 416              		.align	2
 417              	.L35:
 418 000c 00700040 		.word	1073770496
 419              		.cfi_endproc
 420              	.LFE121:
 422              		.text
 423              	.Letext0:
 424              		.file 3 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 425              		.file 4 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Include/core_cm4.h"
 426              		.file 5 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Device\\STM32F4xx\\Include/stm32f4x
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_pwr.c
  C:\Temp\ccLCRSRv.s:19     .text.PWR_DeInit:00000000 $t
  C:\Temp\ccLCRSRv.s:24     .text.PWR_DeInit:00000000 PWR_DeInit
  C:\Temp\ccLCRSRv.s:51     .text.PWR_BackupAccessCmd:00000000 $t
  C:\Temp\ccLCRSRv.s:56     .text.PWR_BackupAccessCmd:00000000 PWR_BackupAccessCmd
  C:\Temp\ccLCRSRv.s:72     .text.PWR_BackupAccessCmd:00000008 $d
  C:\Temp\ccLCRSRv.s:77     .text.PWR_PVDLevelConfig:00000000 $t
  C:\Temp\ccLCRSRv.s:82     .text.PWR_PVDLevelConfig:00000000 PWR_PVDLevelConfig
  C:\Temp\ccLCRSRv.s:107    .text.PWR_PVDLevelConfig:00000010 $d
  C:\Temp\ccLCRSRv.s:112    .text.PWR_PVDCmd:00000000 $t
  C:\Temp\ccLCRSRv.s:117    .text.PWR_PVDCmd:00000000 PWR_PVDCmd
  C:\Temp\ccLCRSRv.s:133    .text.PWR_PVDCmd:00000008 $d
  C:\Temp\ccLCRSRv.s:138    .text.PWR_WakeUpPinCmd:00000000 $t
  C:\Temp\ccLCRSRv.s:143    .text.PWR_WakeUpPinCmd:00000000 PWR_WakeUpPinCmd
  C:\Temp\ccLCRSRv.s:159    .text.PWR_WakeUpPinCmd:00000008 $d
  C:\Temp\ccLCRSRv.s:164    .text.PWR_BackupRegulatorCmd:00000000 $t
  C:\Temp\ccLCRSRv.s:169    .text.PWR_BackupRegulatorCmd:00000000 PWR_BackupRegulatorCmd
  C:\Temp\ccLCRSRv.s:185    .text.PWR_BackupRegulatorCmd:00000008 $d
  C:\Temp\ccLCRSRv.s:190    .text.PWR_HighPerformanceModeCmd:00000000 $t
  C:\Temp\ccLCRSRv.s:195    .text.PWR_HighPerformanceModeCmd:00000000 PWR_HighPerformanceModeCmd
  C:\Temp\ccLCRSRv.s:211    .text.PWR_HighPerformanceModeCmd:00000008 $d
  C:\Temp\ccLCRSRv.s:216    .text.PWR_FlashPowerDownCmd:00000000 $t
  C:\Temp\ccLCRSRv.s:221    .text.PWR_FlashPowerDownCmd:00000000 PWR_FlashPowerDownCmd
  C:\Temp\ccLCRSRv.s:237    .text.PWR_FlashPowerDownCmd:00000008 $d
  C:\Temp\ccLCRSRv.s:242    .text.PWR_EnterSTOPMode:00000000 $t
  C:\Temp\ccLCRSRv.s:247    .text.PWR_EnterSTOPMode:00000000 PWR_EnterSTOPMode
  C:\Temp\ccLCRSRv.s:308    .text.PWR_EnterSTOPMode:0000002c $d
  C:\Temp\ccLCRSRv.s:314    .text.PWR_EnterSTANDBYMode:00000000 $t
  C:\Temp\ccLCRSRv.s:319    .text.PWR_EnterSTANDBYMode:00000000 PWR_EnterSTANDBYMode
  C:\Temp\ccLCRSRv.s:354    .text.PWR_EnterSTANDBYMode:00000020 $d
  C:\Temp\ccLCRSRv.s:360    .text.PWR_GetFlagStatus:00000000 $t
  C:\Temp\ccLCRSRv.s:365    .text.PWR_GetFlagStatus:00000000 PWR_GetFlagStatus
  C:\Temp\ccLCRSRv.s:389    .text.PWR_GetFlagStatus:00000010 $d
  C:\Temp\ccLCRSRv.s:394    .text.PWR_ClearFlag:00000000 $t
  C:\Temp\ccLCRSRv.s:399    .text.PWR_ClearFlag:00000000 PWR_ClearFlag
  C:\Temp\ccLCRSRv.s:418    .text.PWR_ClearFlag:0000000c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
