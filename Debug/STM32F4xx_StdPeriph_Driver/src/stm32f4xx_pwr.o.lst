   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_pwr.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.align	2
  20              		.global	PWR_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	PWR_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @file    stm32f4xx_pwr.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:           
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Backup Domain Access
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - PVD configuration
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - WakeUp pin configuration
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Main and Backup Regulators configuration
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - FLASH Power Down configuration
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Low Power modes configuration
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Flags management
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *               
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @attention
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_pwr.h"
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_rcc.h"
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR 
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief PWR driver modules
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CR Register ---*/
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of DBP bit */
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define DBP_BitNumber            0x08
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PVDE bit */
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PVDE_BitNumber           0x04
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of FPDS bit */
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define FPDS_BitNumber           0x09
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_FPDS_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (FPDS_BitNumber * 4))
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PMODE bit */
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PMODE_BitNumber           0x0E
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PMODE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PMODE_BitNumber * 4))
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CSR Register ---*/
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP bit */
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP_BitNumber           0x08
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of BRE bit */
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define BRE_BitNumber            0x09
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_BRE_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (BRE_BitNumber * 4))
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* CR register bit mask */
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Private_Functions
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Backup Domain Access function  
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                             Backup Domain Access function 
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   After reset, the backup domain (RTC registers, RTC backup data 
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   registers and backup SRAM) is protected against possible unwanted 
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   write accesses. 
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   To enable access to the RTC Domain and RTC registers, proceed as follows:
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable the Power Controller (PWR) APB1 interface clock using the
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       RCC_APB1PeriphClockCmd() function.
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_DeInit(void)
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  27              		.loc 1 121 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  39              		.loc 1 122 0
  40 0004 4FF08050 		mov	r0, #268435456
  41 0008 4FF00101 		mov	r1, #1
  42 000c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  43              		.loc 1 123 0
  44 0010 4FF08050 		mov	r0, #268435456
  45 0014 4FF00001 		mov	r1, #0
  46 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
  47              		.loc 1 124 0
  48 001c 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE110:
  52 001e 00BF     		.align	2
  53              		.global	PWR_BackupAccessCmd
  54              		.thumb
  55              		.thumb_func
  57              	PWR_BackupAccessCmd:
  58              	.LFB111:
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables access to the backup domain (RTC registers, RTC 
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         backup data registers and backup SRAM).
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the access to the backup domain.
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  59              		.loc 1 136 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 8
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64 0020 80B4     		push	{r7}
  65              	.LCFI2:
  66              		.cfi_def_cfa_offset 4
  67              		.cfi_offset 7, -4
  68 0022 83B0     		sub	sp, sp, #12
  69              	.LCFI3:
  70              		.cfi_def_cfa_offset 16
  71 0024 00AF     		add	r7, sp, #0
  72              	.LCFI4:
  73              		.cfi_def_cfa_register 7
  74 0026 0346     		mov	r3, r0
  75 0028 FB71     		strb	r3, [r7, #7]
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  76              		.loc 1 140 0
  77 002a 4FF02003 		mov	r3, #32
  78 002e C4F20E23 		movt	r3, 16910
  79 0032 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
  80 0034 1A60     		str	r2, [r3, #0]
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
  81              		.loc 1 141 0
  82 0036 07F10C07 		add	r7, r7, #12
  83 003a BD46     		mov	sp, r7
  84 003c 80BC     		pop	{r7}
  85 003e 7047     		bx	lr
  86              		.cfi_endproc
  87              	.LFE111:
  89              		.align	2
  90              		.global	PWR_PVDLevelConfig
  91              		.thumb
  92              		.thumb_func
  94              	PWR_PVDLevelConfig:
  95              	.LFB112:
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   PVD configuration functions 
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            PVD configuration functions
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is used to monitor the VDD power supply by comparing it to a threshold
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - A PVDO flag is available to indicate if VDD/VDDA is higher or lower than the 
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    PVD threshold. This event is internally connected to the EXTI line16
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and can generate an interrupt if enabled through the EXTI registers.
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is stopped in Standby mode.
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_0: PVD detection level set to 2.0V
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_1: PVD detection level set to 2.2V
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_2: PVD detection level set to 2.3V
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_3: PVD detection level set to 2.5V
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_4: PVD detection level set to 2.7V
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_5: PVD detection level set to 2.8V
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_6: PVD detection level set to 2.9V
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_7: PVD detection level set to 3.0V
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   Refer to the electrical characteristics of you device datasheet for more details. 
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  96              		.loc 1 182 0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 16
  99              		@ frame_needed = 1, uses_anonymous_args = 0
 100              		@ link register save eliminated.
 101 0040 80B4     		push	{r7}
 102              	.LCFI5:
 103              		.cfi_def_cfa_offset 4
 104              		.cfi_offset 7, -4
 105 0042 85B0     		sub	sp, sp, #20
 106              	.LCFI6:
 107              		.cfi_def_cfa_offset 24
 108 0044 00AF     		add	r7, sp, #0
 109              	.LCFI7:
 110              		.cfi_def_cfa_register 7
 111 0046 7860     		str	r0, [r7, #4]
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 112              		.loc 1 183 0
 113 0048 4FF00003 		mov	r3, #0
 114 004c FB60     		str	r3, [r7, #12]
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 115              		.loc 1 188 0
 116 004e 4FF4E043 		mov	r3, #28672
 117 0052 C4F20003 		movt	r3, 16384
 118 0056 1B68     		ldr	r3, [r3, #0]
 119 0058 FB60     		str	r3, [r7, #12]
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PLS[7:5] bits */
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
 120              		.loc 1 191 0
 121 005a FB68     		ldr	r3, [r7, #12]
 122 005c 23F0E003 		bic	r3, r3, #224
 123 0060 FB60     		str	r3, [r7, #12]
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
 124              		.loc 1 194 0
 125 0062 FA68     		ldr	r2, [r7, #12]
 126 0064 7B68     		ldr	r3, [r7, #4]
 127 0066 1343     		orrs	r3, r3, r2
 128 0068 FB60     		str	r3, [r7, #12]
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 129              		.loc 1 197 0
 130 006a 4FF4E043 		mov	r3, #28672
 131 006e C4F20003 		movt	r3, 16384
 132 0072 FA68     		ldr	r2, [r7, #12]
 133 0074 1A60     		str	r2, [r3, #0]
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 134              		.loc 1 198 0
 135 0076 07F11407 		add	r7, r7, #20
 136 007a BD46     		mov	sp, r7
 137 007c 80BC     		pop	{r7}
 138 007e 7047     		bx	lr
 139              		.cfi_endproc
 140              	.LFE112:
 142              		.align	2
 143              		.global	PWR_PVDCmd
 144              		.thumb
 145              		.thumb_func
 147              	PWR_PVDCmd:
 148              	.LFB113:
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the PVD.
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 149              		.loc 1 207 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 8
 152              		@ frame_needed = 1, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154 0080 80B4     		push	{r7}
 155              	.LCFI8:
 156              		.cfi_def_cfa_offset 4
 157              		.cfi_offset 7, -4
 158 0082 83B0     		sub	sp, sp, #12
 159              	.LCFI9:
 160              		.cfi_def_cfa_offset 16
 161 0084 00AF     		add	r7, sp, #0
 162              	.LCFI10:
 163              		.cfi_def_cfa_register 7
 164 0086 0346     		mov	r3, r0
 165 0088 FB71     		strb	r3, [r7, #7]
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 166              		.loc 1 211 0
 167 008a 4FF01003 		mov	r3, #16
 168 008e C4F20E23 		movt	r3, 16910
 169 0092 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 170 0094 1A60     		str	r2, [r3, #0]
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 171              		.loc 1 212 0
 172 0096 07F10C07 		add	r7, r7, #12
 173 009a BD46     		mov	sp, r7
 174 009c 80BC     		pop	{r7}
 175 009e 7047     		bx	lr
 176              		.cfi_endproc
 177              	.LFE113:
 179              		.align	2
 180              		.global	PWR_WakeUpPinCmd
 181              		.thumb
 182              		.thumb_func
 184              	PWR_WakeUpPinCmd:
 185              	.LFB114:
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pin configuration functions
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   WakeUp pin configuration functions 
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     WakeUp pin configuration functions
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - WakeUp pin is used to wakeup the system from Standby mode. This pin is 
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    forced in input pull down configuration and is active on rising edges.
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - There is only one WakeUp pin: WakeUp Pin 1 on PA.00.
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 186              		.loc 1 241 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 8
 189              		@ frame_needed = 1, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191 00a0 80B4     		push	{r7}
 192              	.LCFI11:
 193              		.cfi_def_cfa_offset 4
 194              		.cfi_offset 7, -4
 195 00a2 83B0     		sub	sp, sp, #12
 196              	.LCFI12:
 197              		.cfi_def_cfa_offset 16
 198 00a4 00AF     		add	r7, sp, #0
 199              	.LCFI13:
 200              		.cfi_def_cfa_register 7
 201 00a6 0346     		mov	r3, r0
 202 00a8 FB71     		strb	r3, [r7, #7]
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 203              		.loc 1 245 0
 204 00aa 4FF0A003 		mov	r3, #160
 205 00ae C4F20E23 		movt	r3, 16910
 206 00b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 207 00b4 1A60     		str	r2, [r3, #0]
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 208              		.loc 1 246 0
 209 00b6 07F10C07 		add	r7, r7, #12
 210 00ba BD46     		mov	sp, r7
 211 00bc 80BC     		pop	{r7}
 212 00be 7047     		bx	lr
 213              		.cfi_endproc
 214              	.LFE114:
 216              		.align	2
 217              		.global	PWR_BackupRegulatorCmd
 218              		.thumb
 219              		.thumb_func
 221              	PWR_BackupRegulatorCmd:
 222              	.LFB115:
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group4 Main and Backup Regulators configuration functions
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Main and Backup Regulators configuration functions 
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Main and Backup Regulators configuration functions
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup domain includes 4 Kbytes of backup SRAM accessible only from the 
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is retained 
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    even in Standby or VBAT mode when the low power backup regulator is enabled. 
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    It can be considered as an internal EEPROM when VBAT is always present.
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    You can use the PWR_BackupRegulatorCmd() function to enable the low power
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    backup regulator and use the PWR_GetFlagStatus(PWR_FLAG_BRR) to check if it is
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ready or not. 
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - When the backup domain is supplied by VDD (analog switch connected to VDD) 
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the backup SRAM is powered from VDD which replaces the VBAT power supply to 
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    save battery life.
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup SRAM is not mass erased by an tamper event. It is read protected 
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    to prevent confidential data, such as cryptographic private key, from being 
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    accessed. The backup SRAM can be erased only through the Flash interface when
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    a protection level change from level 1 to level 0 is requested. 
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the description of Read protection (RDP) in the Flash programming manual.
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The main internal regulator can be configured to have a tradeoff between performance
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and power consumption when the device does not operate at the maximum frequency. 
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    This is done through PWR_MainRegulatorModeConfig() function which configure VOS bit
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    in PWR_CR register: 
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - When this bit is set (Regulator voltage output Scale 1 mode selected) the System
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         frequency can go up to 168 MHz. 
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - When this bit is reset (Regulator voltage output Scale 2 mode selected) the System
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         frequency can go up to 144 MHz. 
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the datasheets for more details.
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Backup Regulator.
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Backup Regulator.
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupRegulatorCmd(FunctionalState NewState)
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 223              		.loc 1 299 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 8
 226              		@ frame_needed = 1, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228 00c0 80B4     		push	{r7}
 229              	.LCFI14:
 230              		.cfi_def_cfa_offset 4
 231              		.cfi_offset 7, -4
 232 00c2 83B0     		sub	sp, sp, #12
 233              	.LCFI15:
 234              		.cfi_def_cfa_offset 16
 235 00c4 00AF     		add	r7, sp, #0
 236              	.LCFI16:
 237              		.cfi_def_cfa_register 7
 238 00c6 0346     		mov	r3, r0
 239 00c8 FB71     		strb	r3, [r7, #7]
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 240              		.loc 1 303 0
 241 00ca 4FF0A403 		mov	r3, #164
 242 00ce C4F20E23 		movt	r3, 16910
 243 00d2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 244 00d4 1A60     		str	r2, [r3, #0]
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 245              		.loc 1 304 0
 246 00d6 07F10C07 		add	r7, r7, #12
 247 00da BD46     		mov	sp, r7
 248 00dc 80BC     		pop	{r7}
 249 00de 7047     		bx	lr
 250              		.cfi_endproc
 251              	.LFE115:
 253              		.align	2
 254              		.global	PWR_MainRegulatorModeConfig
 255              		.thumb
 256              		.thumb_func
 258              	PWR_MainRegulatorModeConfig:
 259              	.LFB116:
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the main internal regulator output voltage.
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator_Voltage: specifies the regulator output voltage to achieve
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         a tradeoff between performance and power consumption when the device does
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         not operate at the maximum frequency (refer to the datasheets for more details).
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale1: Regulator voltage output Scale 1 mode, 
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 168 MHz. 
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 144 MHz.    
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 260              		.loc 1 319 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 8
 263              		@ frame_needed = 1, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 265 00e0 80B4     		push	{r7}
 266              	.LCFI17:
 267              		.cfi_def_cfa_offset 4
 268              		.cfi_offset 7, -4
 269 00e2 83B0     		sub	sp, sp, #12
 270              	.LCFI18:
 271              		.cfi_def_cfa_offset 16
 272 00e4 00AF     		add	r7, sp, #0
 273              	.LCFI19:
 274              		.cfi_def_cfa_register 7
 275 00e6 7860     		str	r0, [r7, #4]
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 276              		.loc 1 323 0
 277 00e8 7B68     		ldr	r3, [r7, #4]
 278 00ea 002B     		cmp	r3, #0
 279 00ec 0CD1     		bne	.L8
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 280              		.loc 1 325 0
 281 00ee 4FF4E043 		mov	r3, #28672
 282 00f2 C4F20003 		movt	r3, 16384
 283 00f6 4FF4E042 		mov	r2, #28672
 284 00fa C4F20002 		movt	r2, 16384
 285 00fe 1268     		ldr	r2, [r2, #0]
 286 0100 22F48042 		bic	r2, r2, #16384
 287 0104 1A60     		str	r2, [r3, #0]
 288 0106 0BE0     		b	.L7
 289              	.L8:
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {    
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR |= PWR_Regulator_Voltage_Scale1;
 290              		.loc 1 329 0
 291 0108 4FF4E043 		mov	r3, #28672
 292 010c C4F20003 		movt	r3, 16384
 293 0110 4FF4E042 		mov	r2, #28672
 294 0114 C4F20002 		movt	r2, 16384
 295 0118 1268     		ldr	r2, [r2, #0]
 296 011a 42F48042 		orr	r2, r2, #16384
 297 011e 1A60     		str	r2, [r3, #0]
 298              	.L7:
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 299              		.loc 1 331 0
 300 0120 07F10C07 		add	r7, r7, #12
 301 0124 BD46     		mov	sp, r7
 302 0126 80BC     		pop	{r7}
 303 0128 7047     		bx	lr
 304              		.cfi_endproc
 305              	.LFE116:
 307 012a 00BF     		.align	2
 308              		.global	PWR_FlashPowerDownCmd
 309              		.thumb
 310              		.thumb_func
 312              	PWR_FlashPowerDownCmd:
 313              	.LFB117:
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group5 FLASH Power Down configuration functions
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   FLASH Power Down configuration functions 
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            FLASH Power Down configuration functions
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - By setting the FPDS bit in the PWR_CR register by using the PWR_FlashPowerDownCmd()
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    function, the Flash memory also enters power down mode when the device enters 
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode. When the Flash memory is in power down mode, an additional startup 
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    delay is incurred when waking up from Stop mode.
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Flash Power Down in STOP mode.
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Flash power mode.
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_FlashPowerDownCmd(FunctionalState NewState)
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 314              		.loc 1 361 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 8
 317              		@ frame_needed = 1, uses_anonymous_args = 0
 318              		@ link register save eliminated.
 319 012c 80B4     		push	{r7}
 320              	.LCFI20:
 321              		.cfi_def_cfa_offset 4
 322              		.cfi_offset 7, -4
 323 012e 83B0     		sub	sp, sp, #12
 324              	.LCFI21:
 325              		.cfi_def_cfa_offset 16
 326 0130 00AF     		add	r7, sp, #0
 327              	.LCFI22:
 328              		.cfi_def_cfa_register 7
 329 0132 0346     		mov	r3, r0
 330 0134 FB71     		strb	r3, [r7, #7]
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 331              		.loc 1 365 0
 332 0136 4FF02403 		mov	r3, #36
 333 013a C4F20E23 		movt	r3, 16910
 334 013e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 335 0140 1A60     		str	r2, [r3, #0]
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 336              		.loc 1 366 0
 337 0142 07F10C07 		add	r7, r7, #12
 338 0146 BD46     		mov	sp, r7
 339 0148 80BC     		pop	{r7}
 340 014a 7047     		bx	lr
 341              		.cfi_endproc
 342              	.LFE117:
 344              		.align	2
 345              		.global	PWR_EnterSTOPMode
 346              		.thumb
 347              		.thumb_func
 349              	PWR_EnterSTOPMode:
 350              	.LFB118:
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group6 Low Power modes configuration functions
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Low Power modes configuration functions 
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Low Power modes configuration functions
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   The devices feature 3 low-power modes:
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Stop mode: all clocks are stopped, regulator running, regulator in low power mode
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Standby mode: 1.2V domain powered off.
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Sleep mode
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ===========
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Sleep mode is entered by using the __WFI() or __WFE() functions.
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any peripheral interrupt acknowledged by the nested vectored interrupt 
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         controller (NVIC) can wake up the device from Sleep mode.
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ==========
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    are preserved.
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator can be configured either in normal or low-power mode.
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    To minimize the consumption In Stop mode, FLASH can be powered off before 
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    entering the Stop mode. It can be switched on again by software after exiting 
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the Stop mode using the PWR_FlashPowerDownCmd() function. 
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Stop mode is entered using the PWR_EnterSTOPMode(PWR_Regulator_LowPower,) 
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         function with regulator in LowPower or with Regulator ON.
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Standby mode
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ============
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The Standby mode allows to achieve the lowest power consumption. It is based 
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    on the Cortex-M4 deepsleep mode, with the voltage regulator disabled. 
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the HSE oscillator are also switched off. SRAM and register contents are lost 
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    circuitry.
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator is OFF.
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         tamper event, time-stamp event, external reset in NRST pin, IWDG reset.              
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Auto-wakeup (AWU) from low-power mode
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    =====================================
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    without depending on an external interrupt (Auto-wakeup mode).
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Stop mode
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      ----------------------------------------
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 21 to be sensitive to rising edges (Interrupt 
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 22 to be sensitive to rising edges (Interrupt 
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Standby mode
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      -------------------------------------------
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STOP mode.
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *   
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.           
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *     
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_ON: STOP mode with regulator ON
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 351              		.loc 1 501 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 16
 354              		@ frame_needed = 1, uses_anonymous_args = 0
 355              		@ link register save eliminated.
 356 014c 80B4     		push	{r7}
 357              	.LCFI23:
 358              		.cfi_def_cfa_offset 4
 359              		.cfi_offset 7, -4
 360 014e 85B0     		sub	sp, sp, #20
 361              	.LCFI24:
 362              		.cfi_def_cfa_offset 24
 363 0150 00AF     		add	r7, sp, #0
 364              	.LCFI25:
 365              		.cfi_def_cfa_register 7
 366 0152 7860     		str	r0, [r7, #4]
 367 0154 0B46     		mov	r3, r1
 368 0156 FB70     		strb	r3, [r7, #3]
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 369              		.loc 1 502 0
 370 0158 4FF00003 		mov	r3, #0
 371 015c FB60     		str	r3, [r7, #12]
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 372              		.loc 1 509 0
 373 015e 4FF4E043 		mov	r3, #28672
 374 0162 C4F20003 		movt	r3, 16384
 375 0166 1B68     		ldr	r3, [r3, #0]
 376 0168 FB60     		str	r3, [r7, #12]
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDSR bits */
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 377              		.loc 1 511 0
 378 016a FB68     		ldr	r3, [r7, #12]
 379 016c 23F00303 		bic	r3, r3, #3
 380 0170 FB60     		str	r3, [r7, #12]
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set LPDSR bit according to PWR_Regulator value */
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 381              		.loc 1 514 0
 382 0172 FA68     		ldr	r2, [r7, #12]
 383 0174 7B68     		ldr	r3, [r7, #4]
 384 0176 1343     		orrs	r3, r3, r2
 385 0178 FB60     		str	r3, [r7, #12]
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 386              		.loc 1 517 0
 387 017a 4FF4E043 		mov	r3, #28672
 388 017e C4F20003 		movt	r3, 16384
 389 0182 FA68     		ldr	r2, [r7, #12]
 390 0184 1A60     		str	r2, [r3, #0]
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 391              		.loc 1 520 0
 392 0186 4FF46D43 		mov	r3, #60672
 393 018a CEF20003 		movt	r3, 57344
 394 018e 4FF46D42 		mov	r2, #60672
 395 0192 CEF20002 		movt	r2, 57344
 396 0196 1269     		ldr	r2, [r2, #16]
 397 0198 42F00402 		orr	r2, r2, #4
 398 019c 1A61     		str	r2, [r3, #16]
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 399              		.loc 1 523 0
 400 019e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 401 01a0 012B     		cmp	r3, #1
 402 01a2 01D1     		bne	.L12
 403              	.LBB8:
 404              	.LBB9:
 405              		.file 2 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cmInstr.h"
   1:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /**************************************************************************//**
   2:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @version  V2.10
   5:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @date     19. July 2011
   6:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
   7:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @note
   8:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  10:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @par
  11:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  15:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @par
  16:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  22:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  ******************************************************************************/
  23:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  24:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  27:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  28:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   Access to dedicated instructions
  31:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   @{
  32:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** */
  33:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  34:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* ARM armcc specific functions */
  36:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  37:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #endif
  40:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  41:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  42:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
  43:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  44:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  46:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __NOP                             __nop
  47:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  48:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  49:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  51:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
  53:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  54:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __WFI                             __wfi
  55:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  56:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  57:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
  58:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  59:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  62:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __WFE                             __wfe
  63:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  64:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  65:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
  66:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  67:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  69:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __SEV                             __sev
  70:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  71:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  72:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  74:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  78:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  80:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  81:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  83:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  86:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  88:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  89:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  91:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  94:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  96:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  97:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  99:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 101:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 103:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 104:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __REV                             __rev
 105:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 106:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 107:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 109:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 111:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 113:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 114:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 116:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   rev16 r0, r0
 117:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   bx lr
 118:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 119:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 120:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 121:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 123:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 125:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 127:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 128:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 130:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   revsh r0, r0
 131:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   bx lr
 132:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 133:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 134:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 135:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 137:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 139:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 141:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 143:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 144:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __RBIT                            __rbit
 145:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 146:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 147:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 149:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 151:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 154:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 156:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 157:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 159:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 161:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 164:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 166:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 167:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 169:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 171:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 174:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 176:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 177:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 179:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 181:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 182:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 184:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 185:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 186:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 188:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 189:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 191:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 193:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 194:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 196:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 197:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 198:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 200:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 201:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 203:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 205:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 206:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 208:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 209:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 210:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 212:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 213:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 215:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 217:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 218:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CLREX                           __clrex
 219:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 220:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 221:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Signed Saturate
 222:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 223:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function saturates a signed value.
 224:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 225:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 228:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 229:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __SSAT                            __ssat
 230:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 231:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 232:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 234:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function saturates an unsigned value.
 235:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 236:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 239:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 240:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __USAT                            __usat
 241:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 242:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 243:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Count leading zeros
 244:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 245:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 247:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             number of leading zeros in value
 249:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 250:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CLZ                             __clz 
 251:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 252:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 254:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 255:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 256:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 259:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #include <cmsis_iar.h>
 260:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 261:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 262:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* GNU gcc specific functions */
 264:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 265:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
 266:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 267:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 269:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 271:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("nop");
 272:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 273:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 274:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 275:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 277:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
 279:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 280:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 282:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 406              		.loc 2 282 0
 407              	@ 282 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 408 01a4 30BF     		wfi
 409              	@ 0 "" 2
 410              		.thumb
 411 01a6 00E0     		b	.L13
 412              	.L12:
 413              	.LBE9:
 414              	.LBE8:
 415              	.LBB10:
 416              	.LBB11:
 283:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 284:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 285:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 286:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
 287:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 288:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 291:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 293:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfe");
 417              		.loc 2 293 0
 418              	@ 293 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 419 01a8 20BF     		wfe
 420              	@ 0 "" 2
 421              		.thumb
 422              	.L13:
 423              	.LBE11:
 424              	.LBE10:
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {   
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFI();
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFE();
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 425              		.loc 1 534 0
 426 01aa 4FF46D43 		mov	r3, #60672
 427 01ae CEF20003 		movt	r3, 57344
 428 01b2 4FF46D42 		mov	r2, #60672
 429 01b6 CEF20002 		movt	r2, 57344
 430 01ba 1269     		ldr	r2, [r2, #16]
 431 01bc 22F00402 		bic	r2, r2, #4
 432 01c0 1A61     		str	r2, [r3, #16]
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 433              		.loc 1 535 0
 434 01c2 07F11407 		add	r7, r7, #20
 435 01c6 BD46     		mov	sp, r7
 436 01c8 80BC     		pop	{r7}
 437 01ca 7047     		bx	lr
 438              		.cfi_endproc
 439              	.LFE118:
 441              		.align	2
 442              		.global	PWR_EnterSTANDBYMode
 443              		.thumb
 444              		.thumb_func
 446              	PWR_EnterSTANDBYMode:
 447              	.LFB119:
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STANDBY mode.
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - Reset pad (still available) 
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.       
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 448              		.loc 1 549 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 1, uses_anonymous_args = 0
 452              		@ link register save eliminated.
 453 01cc 80B4     		push	{r7}
 454              	.LCFI26:
 455              		.cfi_def_cfa_offset 4
 456              		.cfi_offset 7, -4
 457 01ce 00AF     		add	r7, sp, #0
 458              	.LCFI27:
 459              		.cfi_def_cfa_register 7
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear Wakeup flag */
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 460              		.loc 1 551 0
 461 01d0 4FF4E043 		mov	r3, #28672
 462 01d4 C4F20003 		movt	r3, 16384
 463 01d8 4FF4E042 		mov	r2, #28672
 464 01dc C4F20002 		movt	r2, 16384
 465 01e0 1268     		ldr	r2, [r2, #0]
 466 01e2 42F00402 		orr	r2, r2, #4
 467 01e6 1A60     		str	r2, [r3, #0]
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STANDBY mode */
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 468              		.loc 1 554 0
 469 01e8 4FF4E043 		mov	r3, #28672
 470 01ec C4F20003 		movt	r3, 16384
 471 01f0 4FF4E042 		mov	r2, #28672
 472 01f4 C4F20002 		movt	r2, 16384
 473 01f8 1268     		ldr	r2, [r2, #0]
 474 01fa 42F00202 		orr	r2, r2, #2
 475 01fe 1A60     		str	r2, [r3, #0]
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 476              		.loc 1 557 0
 477 0200 4FF46D43 		mov	r3, #60672
 478 0204 CEF20003 		movt	r3, 57344
 479 0208 4FF46D42 		mov	r2, #60672
 480 020c CEF20002 		movt	r2, 57344
 481 0210 1269     		ldr	r2, [r2, #16]
 482 0212 42F00402 		orr	r2, r2, #4
 483 0216 1A61     		str	r2, [r3, #16]
 484              	.LBB12:
 485              	.LBB13:
 282:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 486              		.loc 2 282 0
 487              	@ 282 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 488 0218 30BF     		wfi
 489              	@ 0 "" 2
 490              		.thumb
 491              	.LBE13:
 492              	.LBE12:
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* This option is used to ensure that store operations are completed */
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined ( __CC_ARM   )
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __force_stores();
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Request Wait For Interrupt */
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __WFI();
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 493              		.loc 1 565 0
 494 021a BD46     		mov	sp, r7
 495 021c 80BC     		pop	{r7}
 496 021e 7047     		bx	lr
 497              		.cfi_endproc
 498              	.LFE119:
 500              		.align	2
 501              		.global	PWR_GetFlagStatus
 502              		.thumb
 503              		.thumb_func
 505              	PWR_GetFlagStatus:
 506              	.LFB120:
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group7 Flags management functions
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Flags management functions 
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            Flags management functions
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  was received from the WKUP pin or from the RTC alarm (Alarm A 
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or Alarm B), RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  An additional wakeup event is detected if the WKUP pin is enabled 
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  (by setting the EWUP bit) when the WKUP pin level is already high.  
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  resumed from StandBy mode.    
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  by the PWR_PVDCmd() function. The PVD is stopped by Standby mode 
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  For this reason, this bit is equal to 0 after Standby or reset
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  until the PVDE bit is set.
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_BRR: Backup regulator ready flag. This bit is not reset 
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  when the device wakes up from Standby mode or by a system reset 
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or power reset.  
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 scaling output selection is ready. 
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 507              		.loc 1 606 0
 508              		.cfi_startproc
 509              		@ args = 0, pretend = 0, frame = 16
 510              		@ frame_needed = 1, uses_anonymous_args = 0
 511              		@ link register save eliminated.
 512 0220 80B4     		push	{r7}
 513              	.LCFI28:
 514              		.cfi_def_cfa_offset 4
 515              		.cfi_offset 7, -4
 516 0222 85B0     		sub	sp, sp, #20
 517              	.LCFI29:
 518              		.cfi_def_cfa_offset 24
 519 0224 00AF     		add	r7, sp, #0
 520              	.LCFI30:
 521              		.cfi_def_cfa_register 7
 522 0226 7860     		str	r0, [r7, #4]
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   FlagStatus bitstatus = RESET;
 523              		.loc 1 607 0
 524 0228 4FF00003 		mov	r3, #0
 525 022c FB73     		strb	r3, [r7, #15]
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 526              		.loc 1 612 0
 527 022e 4FF4E043 		mov	r3, #28672
 528 0232 C4F20003 		movt	r3, 16384
 529 0236 5B68     		ldr	r3, [r3, #4]
 530 0238 1A46     		mov	r2, r3
 531 023a 7B68     		ldr	r3, [r7, #4]
 532 023c 1340     		ands	r3, r3, r2
 533 023e 002B     		cmp	r3, #0
 534 0240 03D0     		beq	.L16
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = SET;
 535              		.loc 1 614 0
 536 0242 4FF00103 		mov	r3, #1
 537 0246 FB73     		strb	r3, [r7, #15]
 538 0248 02E0     		b	.L17
 539              	.L16:
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = RESET;
 540              		.loc 1 618 0
 541 024a 4FF00003 		mov	r3, #0
 542 024e FB73     		strb	r3, [r7, #15]
 543              	.L17:
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Return the flag status */
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   return bitstatus;
 544              		.loc 1 621 0
 545 0250 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 546              		.loc 1 622 0
 547 0252 1846     		mov	r0, r3
 548 0254 07F11407 		add	r7, r7, #20
 549 0258 BD46     		mov	sp, r7
 550 025a 80BC     		pop	{r7}
 551 025c 7047     		bx	lr
 552              		.cfi_endproc
 553              	.LFE120:
 555 025e 00BF     		.align	2
 556              		.global	PWR_ClearFlag
 557              		.thumb
 558              		.thumb_func
 560              	PWR_ClearFlag:
 561              	.LFB121:
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 562              		.loc 1 633 0
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 8
 565              		@ frame_needed = 1, uses_anonymous_args = 0
 566              		@ link register save eliminated.
 567 0260 80B4     		push	{r7}
 568              	.LCFI31:
 569              		.cfi_def_cfa_offset 4
 570              		.cfi_offset 7, -4
 571 0262 83B0     		sub	sp, sp, #12
 572              	.LCFI32:
 573              		.cfi_def_cfa_offset 16
 574 0264 00AF     		add	r7, sp, #0
 575              	.LCFI33:
 576              		.cfi_def_cfa_register 7
 577 0266 7860     		str	r0, [r7, #4]
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 578              		.loc 1 637 0
 579 0268 4FF4E043 		mov	r3, #28672
 580 026c C4F20003 		movt	r3, 16384
 581 0270 4FF4E042 		mov	r2, #28672
 582 0274 C4F20002 		movt	r2, 16384
 583 0278 1268     		ldr	r2, [r2, #0]
 584 027a 1146     		mov	r1, r2
 585 027c 7A68     		ldr	r2, [r7, #4]
 586 027e 4FEA8202 		lsl	r2, r2, #2
 587 0282 0A43     		orrs	r2, r2, r1
 588 0284 1A60     		str	r2, [r3, #0]
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 589              		.loc 1 638 0
 590 0286 07F10C07 		add	r7, r7, #12
 591 028a BD46     		mov	sp, r7
 592 028c 80BC     		pop	{r7}
 593 028e 7047     		bx	lr
 594              		.cfi_endproc
 595              	.LFE121:
 597              	.Letext0:
 598              		.file 3 "c:\\chibistudio\\tools\\gnu tools arm embedded\\4.6 2012q2\\bin\\../lib/gcc/arm-none-eabi
 599              		.file 4 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
 600              		.file 5 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Device\\STM32F4xx\\Include/stm32f4xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_pwr.c
C:\Users\Alex\AppData\Local\Temp\cc0egn5i.s:19     .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc0egn5i.s:24     .text:00000000 PWR_DeInit
C:\Users\Alex\AppData\Local\Temp\cc0egn5i.s:57     .text:00000020 PWR_BackupAccessCmd
C:\Users\Alex\AppData\Local\Temp\cc0egn5i.s:94     .text:00000040 PWR_PVDLevelConfig
C:\Users\Alex\AppData\Local\Temp\cc0egn5i.s:147    .text:00000080 PWR_PVDCmd
C:\Users\Alex\AppData\Local\Temp\cc0egn5i.s:184    .text:000000a0 PWR_WakeUpPinCmd
C:\Users\Alex\AppData\Local\Temp\cc0egn5i.s:221    .text:000000c0 PWR_BackupRegulatorCmd
C:\Users\Alex\AppData\Local\Temp\cc0egn5i.s:258    .text:000000e0 PWR_MainRegulatorModeConfig
C:\Users\Alex\AppData\Local\Temp\cc0egn5i.s:312    .text:0000012c PWR_FlashPowerDownCmd
C:\Users\Alex\AppData\Local\Temp\cc0egn5i.s:349    .text:0000014c PWR_EnterSTOPMode
C:\Users\Alex\AppData\Local\Temp\cc0egn5i.s:446    .text:000001cc PWR_EnterSTANDBYMode
C:\Users\Alex\AppData\Local\Temp\cc0egn5i.s:505    .text:00000220 PWR_GetFlagStatus
C:\Users\Alex\AppData\Local\Temp\cc0egn5i.s:560    .text:00000260 PWR_ClearFlag
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
