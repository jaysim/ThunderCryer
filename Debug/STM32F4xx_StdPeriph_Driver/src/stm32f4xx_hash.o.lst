   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_hash.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HASH_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	HASH_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	HASH_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @file    stm32f4xx_hash.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          functionalities of the HASH / HMAC Processor (HASH) peripheral:           
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *           - Initialization and Configuration functions
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *           - Message Digest generation functions
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *           - context swapping functions   
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *           - DMA interface function       
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *           - Interrupts and flags management       
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *  @verbatim
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *                               
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          ===================================================================      
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *                                   How to use this driver
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          ===================================================================
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          HASH operation : 
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          ----------------                   
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         1. Enable the HASH controller clock using 
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE) function.
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *           
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         2. Initialise the HASH using HASH_Init() function. 
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *               
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         3 . Reset the HASH processor core, so that the HASH will be ready 
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             to compute he message digest of a new message by using 
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             HASH_Reset() function.
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         4. Enable the HASH controller using the HASH_Cmd() function. 
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *                
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         5. if using DMA for Data input transfer, Activate the DMA Request 
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            using HASH_DMACmd() function 
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *                    
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         6. if DMA is not used for data transfer, use HASH_DataIn() function 
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            to enter data to IN FIFO.
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         7. Configure the Number of valid bits in last word of the message 
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            using HASH_SetLastWordValidBitsNbr() function.
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         8. if the message length is not an exact multiple of 512 bits, 
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            then the function HASH_StartDigest() must be called to 
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            launch the computation of the final digest.     
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         9. Once computed, the digest can be read using HASH_GetDigest() 
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            function.         
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *                   
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *        10. To control HASH events you can use one of the following 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *              two methods:
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *               a- Check on HASH flags using the HASH_GetFlagStatus() function.  
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *               b- Use HASH interrupts through the function HASH_ITConfig() at 
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *                  initialization phase and HASH_GetITStatus() function into 
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *                  interrupt routines in hashing phase.
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          After checking on a flag you should clear it using HASH_ClearFlag()
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          function. And after checking on an interrupt event you should 
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          clear it using HASH_ClearITPendingBit() function.     
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *                     
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *        11. Save and restore hash processor context using 
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            HASH_SaveContext() and HASH_RestoreContext() functions.     
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *              
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          HMAC operation : 
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          ----------------  
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          The HMAC algorithm is used for message authentication, by 
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          irreversibly binding the message being processed to a key chosen 
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          by the user. 
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          For HMAC specifications, refer to "HMAC: keyed-hashing for message 
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          authentication, H. Krawczyk, M. Bellare, R. Canetti, February 1997"
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          Basically, the HMAC algorithm consists of two nested hash operations:
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          HMAC(message) = Hash[((key | pad) XOR 0x5C) | Hash(((key | pad) XOR 0x36) | message)]
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          where:
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          - "pad" is a sequence of zeroes needed to extend the key to the 
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *                  length of the underlying hash function data block (that is 
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *                  512 bits for both the SHA-1 and MD5 hash algorithms)
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          - "|"   represents the concatenation operator 
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         To compute the HMAC, four different phases are required:
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *                    
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         1.  Initialise the HASH using HASH_Init() function to do HMAC 
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             operation. 
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *                
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         2.  The key (to be used for the inner hash function) is then given 
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             to the core. This operation follows the same mechanism as the 
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             one used to send the message in the hash operation (that is, 
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             by HASH_DataIn() function and, finally, 
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             HASH_StartDigest() function.
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         3.  Once the last word has been entered and computation has started, 
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             the hash processor elaborates the key. It is then ready to 
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             accept the message text using the same mechanism as the one 
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             used to send the message in the hash operation.
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *       
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         4.  After the first hash round, the hash processor returns "ready" 
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             to indicate that it is ready to receive the key to be used for 
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             the outer hash function (normally, this key is the same as the 
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             one used for the inner hash function). When the last word of 
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             the key is entered and computation starts, the HMAC result is 
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             made available using HASH_GetDigest() function.
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *               
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *              
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *  @endverbatim
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   ******************************************************************************
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @attention
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   ******************************************************************************  
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /* Includes ------------------------------------------------------------------*/
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** #include "stm32f4xx_hash.h"
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** #include "stm32f4xx_rcc.h"
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @{
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /** @defgroup HASH 
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief HASH driver modules
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @{
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */ 
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /* Private typedef -----------------------------------------------------------*/
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /* Private define ------------------------------------------------------------*/
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /* Private macro -------------------------------------------------------------*/
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /* Private variables ---------------------------------------------------------*/
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /* Private function prototypes -----------------------------------------------*/
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /* Private functions ---------------------------------------------------------*/ 
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /** @defgroup HASH_Private_Functions
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @{
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */ 
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group1 Initialization and Configuration functions
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  *  @brief    Initialization and Configuration functions 
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  *
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** @verbatim    
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  ===============================================================================
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                       Initialization and Configuration functions
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  ===============================================================================  
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   This section provides functions allowing to 
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****    - Initialize the HASH peripheral
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****    - Configure the HASH Processor 
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****       - MD5/SHA1, 
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****       - HASH/HMAC, 
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****       - datatype 
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****       - HMAC Key (if mode = HMAC)
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****    - Reset the HASH Processor 
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****    
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** @endverbatim
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @{
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Deinitializes the HASH peripheral registers to their default reset values
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  None
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval None
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** void HASH_DeInit(void)
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
  27              		.loc 1 172 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Enable HASH reset state */
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
  39              		.loc 1 174 0
  40 0004 4FF02000 		mov	r0, #32
  41 0008 4FF00101 		mov	r1, #1
  42 000c FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Release HASH from reset state */
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
  43              		.loc 1 176 0
  44 0010 4FF02000 		mov	r0, #32
  45 0014 4FF00001 		mov	r1, #0
  46 0018 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
  47              		.loc 1 177 0
  48 001c 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE110:
  52 001e 00BF     		.section	.text.HASH_Init,"ax",%progbits
  53              		.align	2
  54              		.global	HASH_Init
  55              		.thumb
  56              		.thumb_func
  58              	HASH_Init:
  59              	.LFB111:
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Initializes the HASH peripheral according to the specified parameters
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         in the HASH_InitStruct structure.
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @note   the hash processor is reset when calling this function so that the
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         HASH will be ready to compute the message digest of a new message.
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         There is no need to call HASH_Reset() function.           
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  HASH_InitStruct: pointer to a HASH_InitTypeDef structure that contains
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         the configuration information for the HASH peripheral.
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          if the algorithm mode is HMAC.       
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval None
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
  60              		.loc 1 192 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 8
  63              		@ frame_needed = 1, uses_anonymous_args = 0
  64              		@ link register save eliminated.
  65 0000 80B4     		push	{r7}
  66              	.LCFI2:
  67              		.cfi_def_cfa_offset 4
  68              		.cfi_offset 7, -4
  69 0002 83B0     		sub	sp, sp, #12
  70              	.LCFI3:
  71              		.cfi_def_cfa_offset 16
  72 0004 00AF     		add	r7, sp, #0
  73              	.LCFI4:
  74              		.cfi_def_cfa_register 7
  75 0006 7860     		str	r0, [r7, #4]
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Check the parameters */
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Configure the Algorithm used, algorithm mode and the datatype */
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  76              		.loc 1 199 0
  77 0008 4FF48063 		mov	r3, #1024
  78 000c C5F20603 		movt	r3, 20486
  79 0010 4FF48062 		mov	r2, #1024
  80 0014 C5F20602 		movt	r2, 20486
  81 0018 1268     		ldr	r2, [r2, #0]
  82 001a 22F0F002 		bic	r2, r2, #240
  83 001e 1A60     		str	r2, [r3, #0]
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
  84              		.loc 1 200 0
  85 0020 4FF48063 		mov	r3, #1024
  86 0024 C5F20603 		movt	r3, 20486
  87 0028 4FF48062 		mov	r2, #1024
  88 002c C5F20602 		movt	r2, 20486
  89 0030 1268     		ldr	r2, [r2, #0]
  90 0032 1146     		mov	r1, r2
  91 0034 7A68     		ldr	r2, [r7, #4]
  92 0036 1068     		ldr	r0, [r2, #0]
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                HASH_InitStruct->HASH_DataType | \
  93              		.loc 1 201 0
  94 0038 7A68     		ldr	r2, [r7, #4]
  95 003a 9268     		ldr	r2, [r2, #8]
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
  96              		.loc 1 200 0
  97 003c 1043     		orrs	r0, r0, r2
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                HASH_InitStruct->HASH_AlgoMode);
  98              		.loc 1 202 0
  99 003e 7A68     		ldr	r2, [r7, #4]
 100 0040 5268     		ldr	r2, [r2, #4]
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                HASH_InitStruct->HASH_DataType | \
 101              		.loc 1 201 0
 102 0042 0243     		orrs	r2, r2, r0
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 103              		.loc 1 200 0
 104 0044 0A43     		orrs	r2, r2, r1
 105 0046 1A60     		str	r2, [r3, #0]
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* if algorithm mode is HMAC, set the Key */  
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 106              		.loc 1 205 0
 107 0048 7B68     		ldr	r3, [r7, #4]
 108 004a 5B68     		ldr	r3, [r3, #4]
 109 004c 402B     		cmp	r3, #64
 110 004e 19D1     		bne	.L3
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   {
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     HASH->CR &= ~HASH_CR_LKEY;
 111              		.loc 1 208 0
 112 0050 4FF48063 		mov	r3, #1024
 113 0054 C5F20603 		movt	r3, 20486
 114 0058 4FF48062 		mov	r2, #1024
 115 005c C5F20602 		movt	r2, 20486
 116 0060 1268     		ldr	r2, [r2, #0]
 117 0062 22F48032 		bic	r2, r2, #65536
 118 0066 1A60     		str	r2, [r3, #0]
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 119              		.loc 1 209 0
 120 0068 4FF48063 		mov	r3, #1024
 121 006c C5F20603 		movt	r3, 20486
 122 0070 4FF48062 		mov	r2, #1024
 123 0074 C5F20602 		movt	r2, 20486
 124 0078 1268     		ldr	r2, [r2, #0]
 125 007a 1146     		mov	r1, r2
 126 007c 7A68     		ldr	r2, [r7, #4]
 127 007e D268     		ldr	r2, [r2, #12]
 128 0080 0A43     		orrs	r2, r2, r1
 129 0082 1A60     		str	r2, [r3, #0]
 130              	.L3:
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   }
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Reset the HASH processor core, so that the HASH will be ready to compute 
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****      the message digest of a new message */
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->CR |= HASH_CR_INIT;  
 131              		.loc 1 214 0
 132 0084 4FF48063 		mov	r3, #1024
 133 0088 C5F20603 		movt	r3, 20486
 134 008c 4FF48062 		mov	r2, #1024
 135 0090 C5F20602 		movt	r2, 20486
 136 0094 1268     		ldr	r2, [r2, #0]
 137 0096 42F00402 		orr	r2, r2, #4
 138 009a 1A60     		str	r2, [r3, #0]
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 139              		.loc 1 215 0
 140 009c 07F10C07 		add	r7, r7, #12
 141 00a0 BD46     		mov	sp, r7
 142 00a2 80BC     		pop	{r7}
 143 00a4 7047     		bx	lr
 144              		.cfi_endproc
 145              	.LFE111:
 147 00a6 00BF     		.section	.text.HASH_StructInit,"ax",%progbits
 148              		.align	2
 149              		.global	HASH_StructInit
 150              		.thumb
 151              		.thumb_func
 153              	HASH_StructInit:
 154              	.LFB112:
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Fills each HASH_InitStruct member with its default value.
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  HASH_InitStruct : pointer to a HASH_InitTypeDef structure which will
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          be initialized.  
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          Data type selected is 32b and HMAC Key Type is short key.  
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval None
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 155              		.loc 1 226 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 8
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159              		@ link register save eliminated.
 160 0000 80B4     		push	{r7}
 161              	.LCFI5:
 162              		.cfi_def_cfa_offset 4
 163              		.cfi_offset 7, -4
 164 0002 83B0     		sub	sp, sp, #12
 165              	.LCFI6:
 166              		.cfi_def_cfa_offset 16
 167 0004 00AF     		add	r7, sp, #0
 168              	.LCFI7:
 169              		.cfi_def_cfa_register 7
 170 0006 7860     		str	r0, [r7, #4]
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Initialize the HASH_AlgoSelection member */
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 171              		.loc 1 228 0
 172 0008 7B68     		ldr	r3, [r7, #4]
 173 000a 4FF00002 		mov	r2, #0
 174 000e 1A60     		str	r2, [r3, #0]
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Initialize the HASH_AlgoMode member */
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 175              		.loc 1 231 0
 176 0010 7B68     		ldr	r3, [r7, #4]
 177 0012 4FF00002 		mov	r2, #0
 178 0016 5A60     		str	r2, [r3, #4]
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Initialize the HASH_DataType member */
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 179              		.loc 1 234 0
 180 0018 7B68     		ldr	r3, [r7, #4]
 181 001a 4FF00002 		mov	r2, #0
 182 001e 9A60     		str	r2, [r3, #8]
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Initialize the HASH_HMACKeyType member */
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 183              		.loc 1 237 0
 184 0020 7B68     		ldr	r3, [r7, #4]
 185 0022 4FF00002 		mov	r2, #0
 186 0026 DA60     		str	r2, [r3, #12]
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 187              		.loc 1 238 0
 188 0028 07F10C07 		add	r7, r7, #12
 189 002c BD46     		mov	sp, r7
 190 002e 80BC     		pop	{r7}
 191 0030 7047     		bx	lr
 192              		.cfi_endproc
 193              	.LFE112:
 195 0032 00BF     		.section	.text.HASH_Reset,"ax",%progbits
 196              		.align	2
 197              		.global	HASH_Reset
 198              		.thumb
 199              		.thumb_func
 201              	HASH_Reset:
 202              	.LFB113:
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Resets the HASH processor core, so that the HASH will be ready
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         to compute the message digest of a new message.
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @note   Calling this function will clear the HASH_SR_DCIS (Digest calculation 
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         completion interrupt status) bit corresponding to HASH_IT_DCI 
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         interrupt and HASH_FLAG_DCIS flag. 
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  None
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval None
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** void HASH_Reset(void)
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 203              		.loc 1 250 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 1, uses_anonymous_args = 0
 207              		@ link register save eliminated.
 208 0000 80B4     		push	{r7}
 209              	.LCFI8:
 210              		.cfi_def_cfa_offset 4
 211              		.cfi_offset 7, -4
 212 0002 00AF     		add	r7, sp, #0
 213              	.LCFI9:
 214              		.cfi_def_cfa_register 7
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Reset the HASH processor core */
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->CR |= HASH_CR_INIT;
 215              		.loc 1 252 0
 216 0004 4FF48063 		mov	r3, #1024
 217 0008 C5F20603 		movt	r3, 20486
 218 000c 4FF48062 		mov	r2, #1024
 219 0010 C5F20602 		movt	r2, 20486
 220 0014 1268     		ldr	r2, [r2, #0]
 221 0016 42F00402 		orr	r2, r2, #4
 222 001a 1A60     		str	r2, [r3, #0]
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 223              		.loc 1 253 0
 224 001c BD46     		mov	sp, r7
 225 001e 80BC     		pop	{r7}
 226 0020 7047     		bx	lr
 227              		.cfi_endproc
 228              	.LFE113:
 230 0022 00BF     		.section	.text.HASH_SetLastWordValidBitsNbr,"ax",%progbits
 231              		.align	2
 232              		.global	HASH_SetLastWordValidBitsNbr
 233              		.thumb
 234              		.thumb_func
 236              	HASH_SetLastWordValidBitsNbr:
 237              	.LFB114:
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @}
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group2 Message Digest generation functions
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  *  @brief    Message Digest generation functions
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  *
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** @verbatim    
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  ===============================================================================
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                       Message Digest generation functions
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  ===============================================================================  
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   This section provides functions allowing the generation of message digest: 
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   - Push data in the IN FIFO : using HASH_DataIn()
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   - Get the number of words set in IN FIFO, use HASH_GetInFIFOWordsNbr()  
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   - set the last word valid bits number using HASH_SetLastWordValidBitsNbr() 
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   - start digest calculation : using HASH_StartDigest()
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   - Get the Digest message : using HASH_GetDigest()
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** @endverbatim
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @{
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Configure the Number of valid bits in last word of the message
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  ValidNumber: Number of valid bits in last word of the message.
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *           This parameter must be a number between 0 and 0x1F.
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             - 0x00: All 32 bits of the last data written are valid
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             - 0x01: Only bit [0] of the last data written is valid
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             - 0x02: Only bits[1:0] of the last data written are valid
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             - 0x03: Only bits[2:0] of the last data written are valid
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             - ...
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *             - 0x1F: Only bits[30:0] of the last data written are valid    
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @note   The Number of valid bits must be set before to start the message 
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval None
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 238              		.loc 1 292 0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 8
 241              		@ frame_needed = 1, uses_anonymous_args = 0
 242              		@ link register save eliminated.
 243 0000 80B4     		push	{r7}
 244              	.LCFI10:
 245              		.cfi_def_cfa_offset 4
 246              		.cfi_offset 7, -4
 247 0002 83B0     		sub	sp, sp, #12
 248              	.LCFI11:
 249              		.cfi_def_cfa_offset 16
 250 0004 00AF     		add	r7, sp, #0
 251              	.LCFI12:
 252              		.cfi_def_cfa_register 7
 253 0006 0346     		mov	r3, r0
 254 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Check the parameters */
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Configure the Number of valid bits in last word of the message */
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->STR &= ~(HASH_STR_NBW);
 255              		.loc 1 297 0
 256 000a 4FF48063 		mov	r3, #1024
 257 000e C5F20603 		movt	r3, 20486
 258 0012 4FF48062 		mov	r2, #1024
 259 0016 C5F20602 		movt	r2, 20486
 260 001a 9268     		ldr	r2, [r2, #8]
 261 001c 22F01F02 		bic	r2, r2, #31
 262 0020 9A60     		str	r2, [r3, #8]
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->STR |= ValidNumber;
 263              		.loc 1 298 0
 264 0022 4FF48063 		mov	r3, #1024
 265 0026 C5F20603 		movt	r3, 20486
 266 002a 4FF48062 		mov	r2, #1024
 267 002e C5F20602 		movt	r2, 20486
 268 0032 9268     		ldr	r2, [r2, #8]
 269 0034 1146     		mov	r1, r2
 270 0036 FA88     		ldrh	r2, [r7, #6]
 271 0038 0A43     		orrs	r2, r2, r1
 272 003a 9A60     		str	r2, [r3, #8]
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 273              		.loc 1 299 0
 274 003c 07F10C07 		add	r7, r7, #12
 275 0040 BD46     		mov	sp, r7
 276 0042 80BC     		pop	{r7}
 277 0044 7047     		bx	lr
 278              		.cfi_endproc
 279              	.LFE114:
 281 0046 00BF     		.section	.text.HASH_DataIn,"ax",%progbits
 282              		.align	2
 283              		.global	HASH_DataIn
 284              		.thumb
 285              		.thumb_func
 287              	HASH_DataIn:
 288              	.LFB115:
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Writes data in the Data Input FIFO
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  Data: new data of the message to be processed.
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval None
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** void HASH_DataIn(uint32_t Data)
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 289              		.loc 1 307 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 8
 292              		@ frame_needed = 1, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 294 0000 80B4     		push	{r7}
 295              	.LCFI13:
 296              		.cfi_def_cfa_offset 4
 297              		.cfi_offset 7, -4
 298 0002 83B0     		sub	sp, sp, #12
 299              	.LCFI14:
 300              		.cfi_def_cfa_offset 16
 301 0004 00AF     		add	r7, sp, #0
 302              	.LCFI15:
 303              		.cfi_def_cfa_register 7
 304 0006 7860     		str	r0, [r7, #4]
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Write in the DIN register a new data */
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->DIN = Data;
 305              		.loc 1 309 0
 306 0008 4FF48063 		mov	r3, #1024
 307 000c C5F20603 		movt	r3, 20486
 308 0010 7A68     		ldr	r2, [r7, #4]
 309 0012 5A60     		str	r2, [r3, #4]
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 310              		.loc 1 310 0
 311 0014 07F10C07 		add	r7, r7, #12
 312 0018 BD46     		mov	sp, r7
 313 001a 80BC     		pop	{r7}
 314 001c 7047     		bx	lr
 315              		.cfi_endproc
 316              	.LFE115:
 318 001e 00BF     		.section	.text.HASH_GetInFIFOWordsNbr,"ax",%progbits
 319              		.align	2
 320              		.global	HASH_GetInFIFOWordsNbr
 321              		.thumb
 322              		.thumb_func
 324              	HASH_GetInFIFOWordsNbr:
 325              	.LFB116:
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Returns the number of words already pushed into the IN FIFO.
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  None
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval The value of words already pushed into the IN FIFO.
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** uint8_t HASH_GetInFIFOWordsNbr(void)
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 326              		.loc 1 318 0
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 1, uses_anonymous_args = 0
 330              		@ link register save eliminated.
 331 0000 80B4     		push	{r7}
 332              	.LCFI16:
 333              		.cfi_def_cfa_offset 4
 334              		.cfi_offset 7, -4
 335 0002 00AF     		add	r7, sp, #0
 336              	.LCFI17:
 337              		.cfi_def_cfa_register 7
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Return the value of NBW bits */
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   return ((HASH->CR & HASH_CR_NBW) >> 8);
 338              		.loc 1 320 0
 339 0004 4FF48063 		mov	r3, #1024
 340 0008 C5F20603 		movt	r3, 20486
 341 000c 1B68     		ldr	r3, [r3, #0]
 342 000e 03F47063 		and	r3, r3, #3840
 343 0012 4FEA1323 		lsr	r3, r3, #8
 344 0016 DBB2     		uxtb	r3, r3
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 345              		.loc 1 321 0
 346 0018 1846     		mov	r0, r3
 347 001a BD46     		mov	sp, r7
 348 001c 80BC     		pop	{r7}
 349 001e 7047     		bx	lr
 350              		.cfi_endproc
 351              	.LFE116:
 353              		.section	.text.HASH_GetDigest,"ax",%progbits
 354              		.align	2
 355              		.global	HASH_GetDigest
 356              		.thumb
 357              		.thumb_func
 359              	HASH_GetDigest:
 360              	.LFB117:
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Provides the message digest result.
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @note   In MD5 mode, Data[4] filed of HASH_MsgDigest structure is not used
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         and is read as zero.  
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         hold the message digest result 
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval None
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 361              		.loc 1 332 0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 8
 364              		@ frame_needed = 1, uses_anonymous_args = 0
 365              		@ link register save eliminated.
 366 0000 80B4     		push	{r7}
 367              	.LCFI18:
 368              		.cfi_def_cfa_offset 4
 369              		.cfi_offset 7, -4
 370 0002 83B0     		sub	sp, sp, #12
 371              	.LCFI19:
 372              		.cfi_def_cfa_offset 16
 373 0004 00AF     		add	r7, sp, #0
 374              	.LCFI20:
 375              		.cfi_def_cfa_register 7
 376 0006 7860     		str	r0, [r7, #4]
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Get the data field */
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[0] = HASH->HR[0];
 377              		.loc 1 334 0
 378 0008 4FF48063 		mov	r3, #1024
 379 000c C5F20603 		movt	r3, 20486
 380 0010 DB68     		ldr	r3, [r3, #12]
 381 0012 1A46     		mov	r2, r3
 382 0014 7B68     		ldr	r3, [r7, #4]
 383 0016 1A60     		str	r2, [r3, #0]
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[1] = HASH->HR[1];
 384              		.loc 1 335 0
 385 0018 4FF48063 		mov	r3, #1024
 386 001c C5F20603 		movt	r3, 20486
 387 0020 1B69     		ldr	r3, [r3, #16]
 388 0022 1A46     		mov	r2, r3
 389 0024 7B68     		ldr	r3, [r7, #4]
 390 0026 5A60     		str	r2, [r3, #4]
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[2] = HASH->HR[2];
 391              		.loc 1 336 0
 392 0028 4FF48063 		mov	r3, #1024
 393 002c C5F20603 		movt	r3, 20486
 394 0030 5B69     		ldr	r3, [r3, #20]
 395 0032 1A46     		mov	r2, r3
 396 0034 7B68     		ldr	r3, [r7, #4]
 397 0036 9A60     		str	r2, [r3, #8]
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[3] = HASH->HR[3];
 398              		.loc 1 337 0
 399 0038 4FF48063 		mov	r3, #1024
 400 003c C5F20603 		movt	r3, 20486
 401 0040 9B69     		ldr	r3, [r3, #24]
 402 0042 1A46     		mov	r2, r3
 403 0044 7B68     		ldr	r3, [r7, #4]
 404 0046 DA60     		str	r2, [r3, #12]
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[4] = HASH->HR[4];
 405              		.loc 1 338 0
 406 0048 4FF48063 		mov	r3, #1024
 407 004c C5F20603 		movt	r3, 20486
 408 0050 DB69     		ldr	r3, [r3, #28]
 409 0052 1A46     		mov	r2, r3
 410 0054 7B68     		ldr	r3, [r7, #4]
 411 0056 1A61     		str	r2, [r3, #16]
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 412              		.loc 1 339 0
 413 0058 07F10C07 		add	r7, r7, #12
 414 005c BD46     		mov	sp, r7
 415 005e 80BC     		pop	{r7}
 416 0060 7047     		bx	lr
 417              		.cfi_endproc
 418              	.LFE117:
 420 0062 00BF     		.section	.text.HASH_StartDigest,"ax",%progbits
 421              		.align	2
 422              		.global	HASH_StartDigest
 423              		.thumb
 424              		.thumb_func
 426              	HASH_StartDigest:
 427              	.LFB118:
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Starts the message padding and calculation of the final message     
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  None
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval None
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** void HASH_StartDigest(void)
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 428              		.loc 1 347 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 1, uses_anonymous_args = 0
 432              		@ link register save eliminated.
 433 0000 80B4     		push	{r7}
 434              	.LCFI21:
 435              		.cfi_def_cfa_offset 4
 436              		.cfi_offset 7, -4
 437 0002 00AF     		add	r7, sp, #0
 438              	.LCFI22:
 439              		.cfi_def_cfa_register 7
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Start the Digest calculation */
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->STR |= HASH_STR_DCAL;
 440              		.loc 1 349 0
 441 0004 4FF48063 		mov	r3, #1024
 442 0008 C5F20603 		movt	r3, 20486
 443 000c 4FF48062 		mov	r2, #1024
 444 0010 C5F20602 		movt	r2, 20486
 445 0014 9268     		ldr	r2, [r2, #8]
 446 0016 42F48072 		orr	r2, r2, #256
 447 001a 9A60     		str	r2, [r3, #8]
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 448              		.loc 1 350 0
 449 001c BD46     		mov	sp, r7
 450 001e 80BC     		pop	{r7}
 451 0020 7047     		bx	lr
 452              		.cfi_endproc
 453              	.LFE118:
 455 0022 00BF     		.section	.text.HASH_SaveContext,"ax",%progbits
 456              		.align	2
 457              		.global	HASH_SaveContext
 458              		.thumb
 459              		.thumb_func
 461              	HASH_SaveContext:
 462              	.LFB119:
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @}
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group3 Context swapping functions
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  *  @brief   Context swapping functions
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  *
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** @verbatim   
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  ===============================================================================
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                              Context swapping functions
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  ===============================================================================  
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   This section provides functions allowing to save and store HASH Context
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   It is possible to interrupt a HASH/HMAC process to perform another processing 
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   with a higher priority, and to complete the interrupted process later on, when 
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   the higher priority task is complete. To do so, the context of the interrupted 
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   task must be saved from the HASH registers to memory, and then be restored 
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   from memory to the HASH registers.
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   1. To save the current context, use HASH_SaveContext() function
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   2. To restore the saved context, use HASH_RestoreContext() function 
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** @endverbatim
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @{
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Save the Hash peripheral Context. 
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @note   The context can be saved only when no block is currently being 
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         processed. So user must wait for DINIS = 1 (the last block has been 
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         processed and the input FIFO is empty) or NBW != 0 (the FIFO is not 
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         full and no processing is ongoing).   
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         the repository for current context.
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval None
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** void HASH_SaveContext(HASH_Context* HASH_ContextSave)
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 463              		.loc 1 390 0
 464              		.cfi_startproc
 465              		@ args = 0, pretend = 0, frame = 16
 466              		@ frame_needed = 1, uses_anonymous_args = 0
 467              		@ link register save eliminated.
 468 0000 80B4     		push	{r7}
 469              	.LCFI23:
 470              		.cfi_def_cfa_offset 4
 471              		.cfi_offset 7, -4
 472 0002 85B0     		sub	sp, sp, #20
 473              	.LCFI24:
 474              		.cfi_def_cfa_offset 24
 475 0004 00AF     		add	r7, sp, #0
 476              	.LCFI25:
 477              		.cfi_def_cfa_register 7
 478 0006 7860     		str	r0, [r7, #4]
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   uint8_t i = 0;
 479              		.loc 1 391 0
 480 0008 4FF00003 		mov	r3, #0
 481 000c FB73     		strb	r3, [r7, #15]
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* save context registers */
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH_ContextSave->HASH_IMR = HASH->IMR;  
 482              		.loc 1 394 0
 483 000e 4FF48063 		mov	r3, #1024
 484 0012 C5F20603 		movt	r3, 20486
 485 0016 1B6A     		ldr	r3, [r3, #32]
 486 0018 1A46     		mov	r2, r3
 487 001a 7B68     		ldr	r3, [r7, #4]
 488 001c 1A60     		str	r2, [r3, #0]
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH_ContextSave->HASH_STR = HASH->STR;      
 489              		.loc 1 395 0
 490 001e 4FF48063 		mov	r3, #1024
 491 0022 C5F20603 		movt	r3, 20486
 492 0026 9B68     		ldr	r3, [r3, #8]
 493 0028 1A46     		mov	r2, r3
 494 002a 7B68     		ldr	r3, [r7, #4]
 495 002c 5A60     		str	r2, [r3, #4]
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH_ContextSave->HASH_CR  = HASH->CR;     
 496              		.loc 1 396 0
 497 002e 4FF48063 		mov	r3, #1024
 498 0032 C5F20603 		movt	r3, 20486
 499 0036 1B68     		ldr	r3, [r3, #0]
 500 0038 1A46     		mov	r2, r3
 501 003a 7B68     		ldr	r3, [r7, #4]
 502 003c 9A60     		str	r2, [r3, #8]
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   for(i=0; i<=50;i++)
 503              		.loc 1 397 0
 504 003e 4FF00003 		mov	r3, #0
 505 0042 FB73     		strb	r3, [r7, #15]
 506 0044 15E0     		b	.L12
 507              	.L13:
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   {
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****      HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 508              		.loc 1 399 0 discriminator 2
 509 0046 F87B     		ldrb	r0, [r7, #15]	@ zero_extendqisi2
 510 0048 4FF48063 		mov	r3, #1024
 511 004c C5F20603 		movt	r3, 20486
 512 0050 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 513 0052 02F13E02 		add	r2, r2, #62
 514 0056 53F82230 		ldr	r3, [r3, r2, lsl #2]
 515 005a 1A46     		mov	r2, r3
 516 005c 7968     		ldr	r1, [r7, #4]
 517 005e 00F10203 		add	r3, r0, #2
 518 0062 4FEA8303 		lsl	r3, r3, #2
 519 0066 CB18     		adds	r3, r1, r3
 520 0068 5A60     		str	r2, [r3, #4]
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   for(i=0; i<=50;i++)
 521              		.loc 1 397 0 discriminator 2
 522 006a FB7B     		ldrb	r3, [r7, #15]
 523 006c 03F10103 		add	r3, r3, #1
 524 0070 FB73     		strb	r3, [r7, #15]
 525              	.L12:
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   for(i=0; i<=50;i++)
 526              		.loc 1 397 0 is_stmt 0 discriminator 1
 527 0072 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 528 0074 322B     		cmp	r3, #50
 529 0076 E6D9     		bls	.L13
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   }   
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 530              		.loc 1 401 0 is_stmt 1
 531 0078 07F11407 		add	r7, r7, #20
 532 007c BD46     		mov	sp, r7
 533 007e 80BC     		pop	{r7}
 534 0080 7047     		bx	lr
 535              		.cfi_endproc
 536              	.LFE119:
 538 0082 00BF     		.section	.text.HASH_RestoreContext,"ax",%progbits
 539              		.align	2
 540              		.global	HASH_RestoreContext
 541              		.thumb
 542              		.thumb_func
 544              	HASH_RestoreContext:
 545              	.LFB120:
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Restore the Hash peripheral Context.  
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @note   After calling this function, user can restart the processing from the
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         point where it has been interrupted.  
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *         the repository for saved context.
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval None
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 546              		.loc 1 412 0
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 16
 549              		@ frame_needed = 1, uses_anonymous_args = 0
 550              		@ link register save eliminated.
 551 0000 80B4     		push	{r7}
 552              	.LCFI26:
 553              		.cfi_def_cfa_offset 4
 554              		.cfi_offset 7, -4
 555 0002 85B0     		sub	sp, sp, #20
 556              	.LCFI27:
 557              		.cfi_def_cfa_offset 24
 558 0004 00AF     		add	r7, sp, #0
 559              	.LCFI28:
 560              		.cfi_def_cfa_register 7
 561 0006 7860     		str	r0, [r7, #4]
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   uint8_t i = 0;
 562              		.loc 1 413 0
 563 0008 4FF00003 		mov	r3, #0
 564 000c FB73     		strb	r3, [r7, #15]
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* restore context registers */
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 565              		.loc 1 416 0
 566 000e 4FF48063 		mov	r3, #1024
 567 0012 C5F20603 		movt	r3, 20486
 568 0016 7A68     		ldr	r2, [r7, #4]
 569 0018 1268     		ldr	r2, [r2, #0]
 570 001a 1A62     		str	r2, [r3, #32]
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->STR = HASH_ContextRestore->HASH_STR;     
 571              		.loc 1 417 0
 572 001c 4FF48063 		mov	r3, #1024
 573 0020 C5F20603 		movt	r3, 20486
 574 0024 7A68     		ldr	r2, [r7, #4]
 575 0026 5268     		ldr	r2, [r2, #4]
 576 0028 9A60     		str	r2, [r3, #8]
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->CR = HASH_ContextRestore->HASH_CR;
 577              		.loc 1 418 0
 578 002a 4FF48063 		mov	r3, #1024
 579 002e C5F20603 		movt	r3, 20486
 580 0032 7A68     		ldr	r2, [r7, #4]
 581 0034 9268     		ldr	r2, [r2, #8]
 582 0036 1A60     		str	r2, [r3, #0]
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Initialize the hash processor */
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->CR |= HASH_CR_INIT; 
 583              		.loc 1 421 0
 584 0038 4FF48063 		mov	r3, #1024
 585 003c C5F20603 		movt	r3, 20486
 586 0040 4FF48062 		mov	r2, #1024
 587 0044 C5F20602 		movt	r2, 20486
 588 0048 1268     		ldr	r2, [r2, #0]
 589 004a 42F00402 		orr	r2, r2, #4
 590 004e 1A60     		str	r2, [r3, #0]
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****    /* continue restoring context registers */     
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   for(i=0; i<=50;i++)
 591              		.loc 1 424 0
 592 0050 4FF00003 		mov	r3, #0
 593 0054 FB73     		strb	r3, [r7, #15]
 594 0056 14E0     		b	.L15
 595              	.L16:
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   {
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****      HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 596              		.loc 1 426 0 discriminator 2
 597 0058 4FF48063 		mov	r3, #1024
 598 005c C5F20603 		movt	r3, 20486
 599 0060 F87B     		ldrb	r0, [r7, #15]	@ zero_extendqisi2
 600 0062 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 601 0064 7968     		ldr	r1, [r7, #4]
 602 0066 02F10202 		add	r2, r2, #2
 603 006a 4FEA8202 		lsl	r2, r2, #2
 604 006e 8A18     		adds	r2, r1, r2
 605 0070 5168     		ldr	r1, [r2, #4]
 606 0072 00F13E02 		add	r2, r0, #62
 607 0076 43F82210 		str	r1, [r3, r2, lsl #2]
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   for(i=0; i<=50;i++)
 608              		.loc 1 424 0 discriminator 2
 609 007a FB7B     		ldrb	r3, [r7, #15]
 610 007c 03F10103 		add	r3, r3, #1
 611 0080 FB73     		strb	r3, [r7, #15]
 612              	.L15:
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   for(i=0; i<=50;i++)
 613              		.loc 1 424 0 is_stmt 0 discriminator 1
 614 0082 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 615 0084 322B     		cmp	r3, #50
 616 0086 E7D9     		bls	.L16
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   }   
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 617              		.loc 1 428 0 is_stmt 1
 618 0088 07F11407 		add	r7, r7, #20
 619 008c BD46     		mov	sp, r7
 620 008e 80BC     		pop	{r7}
 621 0090 7047     		bx	lr
 622              		.cfi_endproc
 623              	.LFE120:
 625 0092 00BF     		.section	.text.HASH_DMACmd,"ax",%progbits
 626              		.align	2
 627              		.global	HASH_DMACmd
 628              		.thumb
 629              		.thumb_func
 631              	HASH_DMACmd:
 632              	.LFB121:
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @}
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group4 HASH's DMA interface Configuration function
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  *  @brief   HASH's DMA interface Configuration function 
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  *
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** @verbatim   
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  ===============================================================================
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                    HASH's DMA interface Configuration function
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  ===============================================================================  
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   This section provides functions allowing to configure the DMA interface for 
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH/ HMAC data input transfer.
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****    
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   When the DMA mode is enabled (using the HASH_DMACmd() function), data can be 
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   sent to the IN FIFO using the DMA peripheral.
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** @endverbatim
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @{
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Enables or disables the HASH DMA interface.
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @note   The DMA is disabled by hardware after the end of transfer.
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  NewState: new state of the selected HASH DMA transfer request.
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          This parameter can be: ENABLE or DISABLE.
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval None
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** void HASH_DMACmd(FunctionalState NewState)
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 633              		.loc 1 461 0
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 8
 636              		@ frame_needed = 1, uses_anonymous_args = 0
 637              		@ link register save eliminated.
 638 0000 80B4     		push	{r7}
 639              	.LCFI29:
 640              		.cfi_def_cfa_offset 4
 641              		.cfi_offset 7, -4
 642 0002 83B0     		sub	sp, sp, #12
 643              	.LCFI30:
 644              		.cfi_def_cfa_offset 16
 645 0004 00AF     		add	r7, sp, #0
 646              	.LCFI31:
 647              		.cfi_def_cfa_register 7
 648 0006 0346     		mov	r3, r0
 649 0008 FB71     		strb	r3, [r7, #7]
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Check the parameters */
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   if (NewState != DISABLE)
 650              		.loc 1 465 0
 651 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 652 000c 002B     		cmp	r3, #0
 653 000e 0CD0     		beq	.L18
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   {
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     /* Enable the HASH DMA request */
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     HASH->CR |= HASH_CR_DMAE;
 654              		.loc 1 468 0
 655 0010 4FF48063 		mov	r3, #1024
 656 0014 C5F20603 		movt	r3, 20486
 657 0018 4FF48062 		mov	r2, #1024
 658 001c C5F20602 		movt	r2, 20486
 659 0020 1268     		ldr	r2, [r2, #0]
 660 0022 42F00802 		orr	r2, r2, #8
 661 0026 1A60     		str	r2, [r3, #0]
 662 0028 0BE0     		b	.L17
 663              	.L18:
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   }
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   else
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   {
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     /* Disable the HASH DMA request */
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     HASH->CR &= ~HASH_CR_DMAE;
 664              		.loc 1 473 0
 665 002a 4FF48063 		mov	r3, #1024
 666 002e C5F20603 		movt	r3, 20486
 667 0032 4FF48062 		mov	r2, #1024
 668 0036 C5F20602 		movt	r2, 20486
 669 003a 1268     		ldr	r2, [r2, #0]
 670 003c 22F00802 		bic	r2, r2, #8
 671 0040 1A60     		str	r2, [r3, #0]
 672              	.L17:
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   }
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 673              		.loc 1 475 0
 674 0042 07F10C07 		add	r7, r7, #12
 675 0046 BD46     		mov	sp, r7
 676 0048 80BC     		pop	{r7}
 677 004a 7047     		bx	lr
 678              		.cfi_endproc
 679              	.LFE121:
 681              		.section	.text.HASH_ITConfig,"ax",%progbits
 682              		.align	2
 683              		.global	HASH_ITConfig
 684              		.thumb
 685              		.thumb_func
 687              	HASH_ITConfig:
 688              	.LFB122:
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @}
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /** @defgroup HASH_Group5 Interrupts and flags management functions
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  *  @brief   Interrupts and flags management functions
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  *
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** @verbatim   
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  ===============================================================================
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                    Interrupts and flags management functions
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****  ===============================================================================  
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   This section provides functions allowing to configure the HASH Interrupts and 
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   to get the status and clear flags and Interrupts pending bits.
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   The HASH provides 2 Interrupts sources and 5 Flags:
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   Flags :
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   ---------- 
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****      1. HASH_FLAG_DINIS : set when 16 locations are free in the Data IN FIFO 
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                           which means that a  new block (512 bit) can be entered 
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                           into the input buffer.
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                           
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****      2. HASH_FLAG_DCIS :  set when Digest calculation is complete
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****       
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****      3. HASH_FLAG_DMAS :  set when HASH's DMA interface is enabled (DMAE=1) or 
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                           a transfer is ongoing.
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                           This Flag is cleared only by hardware.
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                            
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****      4. HASH_FLAG_BUSY :  set when The hash core is processing a block of data
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                           This Flag is cleared only by hardware. 
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                            
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****      5. HASH_FLAG_DINNE : set when Data IN FIFO is not empty which means that 
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                           the Data IN FIFO contains at least one word of data.
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                           This Flag is cleared only by hardware.
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****      
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   Interrupts :
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   ------------
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****    1. HASH_IT_DINI  : if enabled, this interrupt source is pending when 16 
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                       locations are free in the Data IN FIFO  which means that 
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                       a new block (512 bit) can be entered into the input buffer.
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                       This interrupt source is cleared using 
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                       HASH_ClearITPendingBit(HASH_IT_DINI) function.
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****    
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****    2. HASH_IT_DCI   : if enabled, this interrupt source is pending when Digest 
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                       calculation is complete.
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                       This interrupt source is cleared using 
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                       HASH_ClearITPendingBit(HASH_IT_DCI) function.
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   Managing the HASH controller events :
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   ------------------------------------ 
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   The user should identify which mode will be used in his application to manage 
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   the HASH controller events: Polling mode or Interrupt mode.
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   1.  In the Polling Mode it is advised to use the following functions:
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****       - HASH_GetFlagStatus() : to check if flags events occur. 
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****       - HASH_ClearFlag()     : to clear the flags events.
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   2.  In the Interrupt Mode it is advised to use the following functions:
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****       - HASH_ITConfig()       : to enable or disable the interrupt source.
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****       - HASH_GetITStatus()    : to check if Interrupt occurs.
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****       - HASH_ClearITPendingBit() : to clear the Interrupt pending Bit 
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****                                 (corresponding Flag). 
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** @endverbatim
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @{
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */ 
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Enables or disables the specified HASH interrupts.
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  HASH_IT: specifies the HASH interrupt source to be enabled or disabled.
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          This parameter can be any combination of the following values:
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DINI: Data Input interrupt
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  NewState: new state of the specified HASH interrupt.
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *           This parameter can be: ENABLE or DISABLE.
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval None
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** void HASH_ITConfig(uint8_t HASH_IT, FunctionalState NewState)
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 689              		.loc 1 556 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 8
 692              		@ frame_needed = 1, uses_anonymous_args = 0
 693              		@ link register save eliminated.
 694 0000 80B4     		push	{r7}
 695              	.LCFI32:
 696              		.cfi_def_cfa_offset 4
 697              		.cfi_offset 7, -4
 698 0002 83B0     		sub	sp, sp, #12
 699              	.LCFI33:
 700              		.cfi_def_cfa_offset 16
 701 0004 00AF     		add	r7, sp, #0
 702              	.LCFI34:
 703              		.cfi_def_cfa_register 7
 704 0006 0246     		mov	r2, r0
 705 0008 0B46     		mov	r3, r1
 706 000a FA71     		strb	r2, [r7, #7]
 707 000c BB71     		strb	r3, [r7, #6]
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Check the parameters */
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_IT(HASH_IT));
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   if (NewState != DISABLE)
 708              		.loc 1 561 0
 709 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 710 0010 002B     		cmp	r3, #0
 711 0012 0DD0     		beq	.L21
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   {
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     /* Enable the selected HASH interrupt */
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     HASH->IMR |= HASH_IT;
 712              		.loc 1 564 0
 713 0014 4FF48063 		mov	r3, #1024
 714 0018 C5F20603 		movt	r3, 20486
 715 001c 4FF48062 		mov	r2, #1024
 716 0020 C5F20602 		movt	r2, 20486
 717 0024 126A     		ldr	r2, [r2, #32]
 718 0026 1146     		mov	r1, r2
 719 0028 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 720 002a 0A43     		orrs	r2, r2, r1
 721 002c 1A62     		str	r2, [r3, #32]
 722 002e 0FE0     		b	.L20
 723              	.L21:
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   }
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   else
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   {
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     /* Disable the selected HASH interrupt */
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     HASH->IMR &= (uint8_t) ~HASH_IT;
 724              		.loc 1 569 0
 725 0030 4FF48063 		mov	r3, #1024
 726 0034 C5F20603 		movt	r3, 20486
 727 0038 4FF48062 		mov	r2, #1024
 728 003c C5F20602 		movt	r2, 20486
 729 0040 126A     		ldr	r2, [r2, #32]
 730 0042 1146     		mov	r1, r2
 731 0044 FA79     		ldrb	r2, [r7, #7]
 732 0046 6FEA0202 		mvn	r2, r2
 733 004a D2B2     		uxtb	r2, r2
 734 004c 0A40     		ands	r2, r2, r1
 735 004e 1A62     		str	r2, [r3, #32]
 736              	.L20:
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   }
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 737              		.loc 1 571 0
 738 0050 07F10C07 		add	r7, r7, #12
 739 0054 BD46     		mov	sp, r7
 740 0056 80BC     		pop	{r7}
 741 0058 7047     		bx	lr
 742              		.cfi_endproc
 743              	.LFE122:
 745 005a 00BF     		.section	.text.HASH_GetFlagStatus,"ax",%progbits
 746              		.align	2
 747              		.global	HASH_GetFlagStatus
 748              		.thumb
 749              		.thumb_func
 751              	HASH_GetFlagStatus:
 752              	.LFB123:
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Checks whether the specified HASH flag is set or not.
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  HASH_FLAG: specifies the HASH flag to check.
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          This parameter can be one of the following values:
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DINIS: Data input interrupt status flag
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DCIS: Digest calculation completion interrupt status flag
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_BUSY: Busy flag
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DMAS: DMAS Status flag
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval The new state of HASH_FLAG (SET or RESET)
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** FlagStatus HASH_GetFlagStatus(uint16_t HASH_FLAG)
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 753              		.loc 1 585 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 16
 756              		@ frame_needed = 1, uses_anonymous_args = 0
 757              		@ link register save eliminated.
 758 0000 80B4     		push	{r7}
 759              	.LCFI35:
 760              		.cfi_def_cfa_offset 4
 761              		.cfi_offset 7, -4
 762 0002 85B0     		sub	sp, sp, #20
 763              	.LCFI36:
 764              		.cfi_def_cfa_offset 24
 765 0004 00AF     		add	r7, sp, #0
 766              	.LCFI37:
 767              		.cfi_def_cfa_register 7
 768 0006 0346     		mov	r3, r0
 769 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   FlagStatus bitstatus = RESET;
 770              		.loc 1 586 0
 771 000a 4FF00003 		mov	r3, #0
 772 000e FB73     		strb	r3, [r7, #15]
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   uint32_t tempreg = 0;
 773              		.loc 1 587 0
 774 0010 4FF00003 		mov	r3, #0
 775 0014 BB60     		str	r3, [r7, #8]
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Check the parameters */
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_GET_FLAG(HASH_FLAG));
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* check if the FLAG is in CR register */
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
 776              		.loc 1 593 0
 777 0016 FB88     		ldrh	r3, [r7, #6]
 778 0018 03F48053 		and	r3, r3, #4096
 779 001c 002B     		cmp	r3, #0
 780 001e 06D0     		beq	.L24
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   {
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     tempreg = HASH->CR;
 781              		.loc 1 595 0
 782 0020 4FF48063 		mov	r3, #1024
 783 0024 C5F20603 		movt	r3, 20486
 784 0028 1B68     		ldr	r3, [r3, #0]
 785 002a BB60     		str	r3, [r7, #8]
 786 002c 05E0     		b	.L25
 787              	.L24:
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   }
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   else /* The FLAG is in SR register */
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   {
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     tempreg = HASH->SR;
 788              		.loc 1 599 0
 789 002e 4FF48063 		mov	r3, #1024
 790 0032 C5F20603 		movt	r3, 20486
 791 0036 5B6A     		ldr	r3, [r3, #36]
 792 0038 BB60     		str	r3, [r7, #8]
 793              	.L25:
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   }
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Check the status of the specified HASH flag */
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   if ((tempreg & HASH_FLAG) != (uint16_t)RESET)
 794              		.loc 1 603 0
 795 003a FA88     		ldrh	r2, [r7, #6]
 796 003c BB68     		ldr	r3, [r7, #8]
 797 003e 1340     		ands	r3, r3, r2
 798 0040 002B     		cmp	r3, #0
 799 0042 03D0     		beq	.L26
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   {
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     /* HASH is set */
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     bitstatus = SET;
 800              		.loc 1 606 0
 801 0044 4FF00103 		mov	r3, #1
 802 0048 FB73     		strb	r3, [r7, #15]
 803 004a 02E0     		b	.L27
 804              	.L26:
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   }
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   else
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   {
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     /* HASH_FLAG is reset */
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     bitstatus = RESET;
 805              		.loc 1 611 0
 806 004c 4FF00003 		mov	r3, #0
 807 0050 FB73     		strb	r3, [r7, #15]
 808              	.L27:
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   }
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Return the HASH_FLAG status */
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   return  bitstatus;
 809              		.loc 1 615 0
 810 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 811              		.loc 1 616 0
 812 0054 1846     		mov	r0, r3
 813 0056 07F11407 		add	r7, r7, #20
 814 005a BD46     		mov	sp, r7
 815 005c 80BC     		pop	{r7}
 816 005e 7047     		bx	lr
 817              		.cfi_endproc
 818              	.LFE123:
 820              		.section	.text.HASH_ClearFlag,"ax",%progbits
 821              		.align	2
 822              		.global	HASH_ClearFlag
 823              		.thumb
 824              		.thumb_func
 826              	HASH_ClearFlag:
 827              	.LFB124:
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Clears the HASH flags.
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  HASH_FLAG: specifies the flag to clear. 
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          This parameter can be any combination of the following values:
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DINIS: Data Input Flag
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval None
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** void HASH_ClearFlag(uint16_t HASH_FLAG)
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 828              		.loc 1 626 0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 8
 831              		@ frame_needed = 1, uses_anonymous_args = 0
 832              		@ link register save eliminated.
 833 0000 80B4     		push	{r7}
 834              	.LCFI38:
 835              		.cfi_def_cfa_offset 4
 836              		.cfi_offset 7, -4
 837 0002 83B0     		sub	sp, sp, #12
 838              	.LCFI39:
 839              		.cfi_def_cfa_offset 16
 840 0004 00AF     		add	r7, sp, #0
 841              	.LCFI40:
 842              		.cfi_def_cfa_register 7
 843 0006 0346     		mov	r3, r0
 844 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Check the parameters */
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Clear the selected HASH flags */
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->SR = ~(uint32_t)HASH_FLAG;
 845              		.loc 1 631 0
 846 000a 4FF48063 		mov	r3, #1024
 847 000e C5F20603 		movt	r3, 20486
 848 0012 FA88     		ldrh	r2, [r7, #6]
 849 0014 6FEA0202 		mvn	r2, r2
 850 0018 5A62     		str	r2, [r3, #36]
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 851              		.loc 1 632 0
 852 001a 07F10C07 		add	r7, r7, #12
 853 001e BD46     		mov	sp, r7
 854 0020 80BC     		pop	{r7}
 855 0022 7047     		bx	lr
 856              		.cfi_endproc
 857              	.LFE124:
 859              		.section	.text.HASH_GetITStatus,"ax",%progbits
 860              		.align	2
 861              		.global	HASH_GetITStatus
 862              		.thumb
 863              		.thumb_func
 865              	HASH_GetITStatus:
 866              	.LFB125:
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Checks whether the specified HASH interrupt has occurred or not.
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  HASH_IT: specifies the HASH interrupt source to check.
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          This parameter can be one of the following values:
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DINI: Data Input interrupt
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval The new state of HASH_IT (SET or RESET).
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** ITStatus HASH_GetITStatus(uint8_t HASH_IT)
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 867              		.loc 1 642 0
 868              		.cfi_startproc
 869              		@ args = 0, pretend = 0, frame = 16
 870              		@ frame_needed = 1, uses_anonymous_args = 0
 871              		@ link register save eliminated.
 872 0000 80B4     		push	{r7}
 873              	.LCFI41:
 874              		.cfi_def_cfa_offset 4
 875              		.cfi_offset 7, -4
 876 0002 85B0     		sub	sp, sp, #20
 877              	.LCFI42:
 878              		.cfi_def_cfa_offset 24
 879 0004 00AF     		add	r7, sp, #0
 880              	.LCFI43:
 881              		.cfi_def_cfa_register 7
 882 0006 0346     		mov	r3, r0
 883 0008 FB71     		strb	r3, [r7, #7]
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   ITStatus bitstatus = RESET;
 884              		.loc 1 643 0
 885 000a 4FF00003 		mov	r3, #0
 886 000e FB73     		strb	r3, [r7, #15]
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   uint32_t tmpreg = 0;
 887              		.loc 1 644 0
 888 0010 4FF00003 		mov	r3, #0
 889 0014 BB60     		str	r3, [r7, #8]
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Check the parameters */
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_GET_IT(HASH_IT));  
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Check the status of the specified HASH interrupt */
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   tmpreg =  HASH->SR;
 890              		.loc 1 651 0
 891 0016 4FF48063 		mov	r3, #1024
 892 001a C5F20603 		movt	r3, 20486
 893 001e 5B6A     		ldr	r3, [r3, #36]
 894 0020 BB60     		str	r3, [r7, #8]
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 895              		.loc 1 653 0
 896 0022 4FF48063 		mov	r3, #1024
 897 0026 C5F20603 		movt	r3, 20486
 898 002a 1B6A     		ldr	r3, [r3, #32]
 899 002c 1A46     		mov	r2, r3
 900 002e BB68     		ldr	r3, [r7, #8]
 901 0030 1A40     		ands	r2, r2, r3
 902 0032 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 903 0034 1340     		ands	r3, r3, r2
 904 0036 002B     		cmp	r3, #0
 905 0038 03D0     		beq	.L30
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   {
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     /* HASH_IT is set */
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     bitstatus = SET;
 906              		.loc 1 656 0
 907 003a 4FF00103 		mov	r3, #1
 908 003e FB73     		strb	r3, [r7, #15]
 909 0040 02E0     		b	.L31
 910              	.L30:
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   }
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   else
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   {
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     /* HASH_IT is reset */
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****     bitstatus = RESET;
 911              		.loc 1 661 0
 912 0042 4FF00003 		mov	r3, #0
 913 0046 FB73     		strb	r3, [r7, #15]
 914              	.L31:
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   }
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Return the HASH_IT status */
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   return bitstatus;
 915              		.loc 1 664 0
 916 0048 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 917              		.loc 1 665 0
 918 004a 1846     		mov	r0, r3
 919 004c 07F11407 		add	r7, r7, #20
 920 0050 BD46     		mov	sp, r7
 921 0052 80BC     		pop	{r7}
 922 0054 7047     		bx	lr
 923              		.cfi_endproc
 924              	.LFE125:
 926 0056 00BF     		.section	.text.HASH_ClearITPendingBit,"ax",%progbits
 927              		.align	2
 928              		.global	HASH_ClearITPendingBit
 929              		.thumb
 930              		.thumb_func
 932              	HASH_ClearITPendingBit:
 933              	.LFB126:
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** /**
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @brief  Clears the HASH interrupt pending bit(s).
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @param  HASH_IT: specifies the HASH interrupt pending bit(s) to clear.
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *          This parameter can be any combination of the following values:
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DINI: Data Input interrupt
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   * @retval None
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   */
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** void HASH_ClearITPendingBit(uint8_t HASH_IT)
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** {
 934              		.loc 1 676 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 8
 937              		@ frame_needed = 1, uses_anonymous_args = 0
 938              		@ link register save eliminated.
 939 0000 80B4     		push	{r7}
 940              	.LCFI44:
 941              		.cfi_def_cfa_offset 4
 942              		.cfi_offset 7, -4
 943 0002 83B0     		sub	sp, sp, #12
 944              	.LCFI45:
 945              		.cfi_def_cfa_offset 16
 946 0004 00AF     		add	r7, sp, #0
 947              	.LCFI46:
 948              		.cfi_def_cfa_register 7
 949 0006 0346     		mov	r3, r0
 950 0008 FB71     		strb	r3, [r7, #7]
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Check the parameters */
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   assert_param(IS_HASH_IT(HASH_IT));
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** 
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   /* Clear the selected HASH interrupt pending bit */
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c ****   HASH->SR = (uint8_t)~HASH_IT;
 951              		.loc 1 681 0
 952 000a 4FF48063 		mov	r3, #1024
 953 000e C5F20603 		movt	r3, 20486
 954 0012 FA79     		ldrb	r2, [r7, #7]
 955 0014 6FEA0202 		mvn	r2, r2
 956 0018 D2B2     		uxtb	r2, r2
 957 001a 5A62     		str	r2, [r3, #36]
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c **** }
 958              		.loc 1 682 0
 959 001c 07F10C07 		add	r7, r7, #12
 960 0020 BD46     		mov	sp, r7
 961 0022 80BC     		pop	{r7}
 962 0024 7047     		bx	lr
 963              		.cfi_endproc
 964              	.LFE126:
 966 0026 00BF     		.text
 967              	.Letext0:
 968              		.file 2 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 969              		.file 3 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Device\\STM32F4xx\\Include/stm3
 970              		.file 4 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f
 971              		.file 5 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_hash.c
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:19     .text.HASH_DeInit:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:24     .text.HASH_DeInit:00000000 HASH_DeInit
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:53     .text.HASH_Init:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:58     .text.HASH_Init:00000000 HASH_Init
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:148    .text.HASH_StructInit:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:153    .text.HASH_StructInit:00000000 HASH_StructInit
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:196    .text.HASH_Reset:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:201    .text.HASH_Reset:00000000 HASH_Reset
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:231    .text.HASH_SetLastWordValidBitsNbr:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:236    .text.HASH_SetLastWordValidBitsNbr:00000000 HASH_SetLastWordValidBitsNbr
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:282    .text.HASH_DataIn:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:287    .text.HASH_DataIn:00000000 HASH_DataIn
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:319    .text.HASH_GetInFIFOWordsNbr:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:324    .text.HASH_GetInFIFOWordsNbr:00000000 HASH_GetInFIFOWordsNbr
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:354    .text.HASH_GetDigest:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:359    .text.HASH_GetDigest:00000000 HASH_GetDigest
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:421    .text.HASH_StartDigest:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:426    .text.HASH_StartDigest:00000000 HASH_StartDigest
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:456    .text.HASH_SaveContext:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:461    .text.HASH_SaveContext:00000000 HASH_SaveContext
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:539    .text.HASH_RestoreContext:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:544    .text.HASH_RestoreContext:00000000 HASH_RestoreContext
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:626    .text.HASH_DMACmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:631    .text.HASH_DMACmd:00000000 HASH_DMACmd
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:682    .text.HASH_ITConfig:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:687    .text.HASH_ITConfig:00000000 HASH_ITConfig
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:746    .text.HASH_GetFlagStatus:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:751    .text.HASH_GetFlagStatus:00000000 HASH_GetFlagStatus
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:821    .text.HASH_ClearFlag:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:826    .text.HASH_ClearFlag:00000000 HASH_ClearFlag
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:860    .text.HASH_GetITStatus:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:865    .text.HASH_GetITStatus:00000000 HASH_GetITStatus
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:927    .text.HASH_ClearITPendingBit:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cc62IgHh.s:932    .text.HASH_ClearITPendingBit:00000000 HASH_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
