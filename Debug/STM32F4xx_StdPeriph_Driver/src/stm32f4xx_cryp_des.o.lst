   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_cryp_des.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.align	2
  19              		.global	CRYP_DES_ECB
  20              		.thumb
  21              		.thumb_func
  23              	CRYP_DES_ECB:
  24              	.LFB110:
  25              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @file    stm32f4xx_cryp_des.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          input message using DES in ECB/CBC modes.
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          peripheral.
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *  @verbatim
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          ===================================================================
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *                                   How to use this driver
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          ===================================================================
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          1. Enable The CRYP controller clock using 
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          2. Encrypt and decrypt using DES in ECB Mode using CRYP_DES_ECB()
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *             function.
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          3. Encrypt and decrypt using DES in CBC Mode using CRYP_DES_CBC()
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *             function.
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *  @endverbatim
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @attention
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Includes ------------------------------------------------------------------*/
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** #include "stm32f4xx_cryp.h"
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief CRYP driver modules
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private typedef -----------------------------------------------------------*/
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private define ------------------------------------------------------------*/
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** #define DESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private macro -------------------------------------------------------------*/
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private variables ---------------------------------------------------------*/
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private function prototypes -----------------------------------------------*/
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private functions ---------------------------------------------------------*/
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Private_Functions
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */ 
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Group8 High Level DES functions
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  *  @brief   High Level DES functions 
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  *
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** @verbatim   
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  ===============================================================================
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****                           High Level DES functions
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  ===============================================================================
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** @endverbatim
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /**
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in ECB Mode
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *           This parameter can be one of the following values:
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****                          uint32_t Ilength, uint8_t *Output)
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** {
  26              		.loc 1 96 0
  27              		.cfi_startproc
  28              		@ args = 4, pretend = 0, frame = 104
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 90B5     		push	{r4, r7, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 4, -12
  36 0002 9BB0     		sub	sp, sp, #108
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 120
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 B960     		str	r1, [r7, #8]
  43 0008 7A60     		str	r2, [r7, #4]
  44 000a 3B60     		str	r3, [r7, #0]
  45 000c 0346     		mov	r3, r0
  46 000e FB73     		strb	r3, [r7, #15]
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
  47              		.loc 1 99 0
  48 0010 4FF00003 		mov	r3, #0
  49 0014 7B61     		str	r3, [r7, #20]
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
  50              		.loc 1 100 0
  51 0016 4FF00003 		mov	r3, #0
  52 001a 7B65     		str	r3, [r7, #84]
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
  53              		.loc 1 101 0
  54 001c 4FF00103 		mov	r3, #1
  55 0020 87F86730 		strb	r3, [r7, #103]
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
  56              		.loc 1 102 0
  57 0024 BB68     		ldr	r3, [r7, #8]
  58 0026 3B65     		str	r3, [r7, #80]
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
  59              		.loc 1 103 0
  60 0028 7B68     		ldr	r3, [r7, #4]
  61 002a 3B66     		str	r3, [r7, #96]
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
  62              		.loc 1 104 0
  63 002c BB6F     		ldr	r3, [r7, #120]
  64 002e FB65     		str	r3, [r7, #92]
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
  65              		.loc 1 105 0
  66 0030 4FF00003 		mov	r3, #0
  67 0034 BB65     		str	r3, [r7, #88]
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
  68              		.loc 1 108 0
  69 0036 07F11803 		add	r3, r7, #24
  70 003a 1846     		mov	r0, r3
  71 003c FFF7FEFF 		bl	CRYP_KeyStructInit
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   if( Mode == MODE_ENCRYPT ) /* DES encryption */
  72              		.loc 1 111 0
  73 0040 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  74 0042 012B     		cmp	r3, #1
  75 0044 03D1     		bne	.L2
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  76              		.loc 1 113 0
  77 0046 4FF00003 		mov	r3, #0
  78 004a 3B87     		strh	r3, [r7, #56]	@ movhi
  79 004c 02E0     		b	.L3
  80              	.L2:
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {      
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  81              		.loc 1 117 0
  82 004e 4FF00403 		mov	r3, #4
  83 0052 3B87     		strh	r3, [r7, #56]	@ movhi
  84              	.L3:
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
  85              		.loc 1 120 0
  86 0054 4FF01003 		mov	r3, #16
  87 0058 7B87     		strh	r3, [r7, #58]	@ movhi
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  88              		.loc 1 121 0
  89 005a 4FF08003 		mov	r3, #128
  90 005e BB87     		strh	r3, [r7, #60]	@ movhi
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
  91              		.loc 1 122 0
  92 0060 07F13803 		add	r3, r7, #56
  93 0064 1846     		mov	r0, r3
  94 0066 FFF7FEFF 		bl	CRYP_Init
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  95              		.loc 1 125 0
  96 006a 3B6D     		ldr	r3, [r7, #80]
  97 006c 1B68     		ldr	r3, [r3, #0]
  98 006e FB64     		str	r3, [r7, #76]
  99              	.LBB14:
 100              	.LBB15:
 101              		.file 2 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cmInstr.h"
   1:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @version  V2.10
   5:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @date     19. July 2011
   6:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
   7:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @note
   8:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  10:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @par
  11:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  15:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @par
  16:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  22:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  ******************************************************************************/
  23:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  24:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  27:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  28:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   Access to dedicated instructions
  31:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   @{
  32:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** */
  33:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  34:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* ARM armcc specific functions */
  36:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  37:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #endif
  40:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  41:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  42:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
  43:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  44:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  46:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __NOP                             __nop
  47:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  48:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  49:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  51:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
  53:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  54:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __WFI                             __wfi
  55:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  56:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  57:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
  58:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  59:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  62:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __WFE                             __wfe
  63:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  64:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  65:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
  66:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  67:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  69:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __SEV                             __sev
  70:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  71:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  72:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  74:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  78:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  80:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  81:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  83:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  86:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  88:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  89:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  91:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  94:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  96:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  97:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  99:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 101:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 103:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 104:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __REV                             __rev
 105:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 106:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 107:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 109:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 111:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 113:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 114:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 116:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   rev16 r0, r0
 117:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   bx lr
 118:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 119:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 120:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 121:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 123:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 125:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 128:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 130:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   revsh r0, r0
 131:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   bx lr
 132:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 133:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 134:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 135:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 137:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 139:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 141:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 143:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 144:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __RBIT                            __rbit
 145:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 146:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 147:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 149:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 151:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 154:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 156:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 157:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 159:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 161:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 164:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 166:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 167:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 169:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 171:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 174:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 176:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 177:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 179:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 181:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 182:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 184:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 185:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 186:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 188:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 189:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 191:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 193:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 194:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 196:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 197:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 198:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 200:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 201:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 203:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 205:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 206:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 208:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 209:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 210:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 212:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 213:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 215:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 217:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 218:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CLREX                           __clrex
 219:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 220:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 221:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Signed Saturate
 222:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 223:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function saturates a signed value.
 224:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 225:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 228:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 229:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __SSAT                            __ssat
 230:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 231:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 232:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 234:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function saturates an unsigned value.
 235:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 236:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 239:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 240:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __USAT                            __usat
 241:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 242:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 243:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Count leading zeros
 244:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 245:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 247:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             number of leading zeros in value
 249:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 250:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CLZ                             __clz 
 251:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 252:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 254:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 255:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 256:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 259:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #include <cmsis_iar.h>
 260:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 261:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 262:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* GNU gcc specific functions */
 264:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 265:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
 266:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 267:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 269:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 271:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("nop");
 272:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 273:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 274:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 275:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 277:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
 279:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 280:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 282:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 283:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 284:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 285:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 286:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
 287:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 288:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 291:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 293:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfe");
 294:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 295:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 296:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 297:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
 298:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 299:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 300:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 301:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
 302:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 303:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("sev");
 304:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 305:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 306:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 307:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 308:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 309:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
 310:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
 311:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
 312:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 313:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
 314:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 315:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("isb");
 316:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 317:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 318:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 319:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 320:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 321:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
 322:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 323:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 324:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
 325:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 326:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dsb");
 327:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 328:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 329:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 330:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 331:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 332:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
 333:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 334:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 335:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
 336:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 337:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dmb");
 338:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 339:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 340:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 341:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 342:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 343:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 344:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 345:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 346:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 347:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 348:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
 349:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 350:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   uint32_t result;
 351:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 102              		.loc 2 352 0
 103 0070 FB6C     		ldr	r3, [r7, #76]
 104              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 105 0072 1CBA     		rev r4, r3
 106              	@ 0 "" 2
 107              		.thumb
 108 0074 BC64     		str	r4, [r7, #72]
 353:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   return(result);
 109              		.loc 2 353 0
 110 0076 BB6C     		ldr	r3, [r7, #72]
 111              	.LBE15:
 112              	.LBE14:
 113              		.loc 1 125 0
 114 0078 3B62     		str	r3, [r7, #32]
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 115              		.loc 1 126 0
 116 007a 3B6D     		ldr	r3, [r7, #80]
 117 007c 03F10403 		add	r3, r3, #4
 118 0080 3B65     		str	r3, [r7, #80]
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 119              		.loc 1 127 0
 120 0082 3B6D     		ldr	r3, [r7, #80]
 121 0084 1B68     		ldr	r3, [r3, #0]
 122 0086 7B64     		str	r3, [r7, #68]
 123              	.LBB16:
 124              	.LBB17:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 125              		.loc 2 352 0
 126 0088 7B6C     		ldr	r3, [r7, #68]
 127              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 128 008a 1CBA     		rev r4, r3
 129              	@ 0 "" 2
 130              		.thumb
 131 008c 3C64     		str	r4, [r7, #64]
 132              		.loc 2 353 0
 133 008e 3B6C     		ldr	r3, [r7, #64]
 134              	.LBE17:
 135              	.LBE16:
 136              		.loc 1 127 0
 137 0090 7B62     		str	r3, [r7, #36]
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 138              		.loc 1 128 0
 139 0092 07F11803 		add	r3, r7, #24
 140 0096 1846     		mov	r0, r3
 141 0098 FFF7FEFF 		bl	CRYP_KeyInit
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 142              		.loc 1 131 0
 143 009c FFF7FEFF 		bl	CRYP_FIFOFlush
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 144              		.loc 1 134 0
 145 00a0 4FF00100 		mov	r0, #1
 146 00a4 FFF7FEFF 		bl	CRYP_Cmd
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 147              		.loc 1 136 0
 148 00a8 4FF00003 		mov	r3, #0
 149 00ac BB65     		str	r3, [r7, #88]
 150 00ae 43E0     		b	.L4
 151              	.L10:
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     /* Write the Input block in the Input FIFO */
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 152              		.loc 1 140 0
 153 00b0 3B6E     		ldr	r3, [r7, #96]
 154 00b2 1B68     		ldr	r3, [r3, #0]
 155 00b4 1846     		mov	r0, r3
 156 00b6 FFF7FEFF 		bl	CRYP_DataIn
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 157              		.loc 1 141 0
 158 00ba 3B6E     		ldr	r3, [r7, #96]
 159 00bc 03F10403 		add	r3, r3, #4
 160 00c0 3B66     		str	r3, [r7, #96]
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 161              		.loc 1 142 0
 162 00c2 3B6E     		ldr	r3, [r7, #96]
 163 00c4 1B68     		ldr	r3, [r3, #0]
 164 00c6 1846     		mov	r0, r3
 165 00c8 FFF7FEFF 		bl	CRYP_DataIn
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 166              		.loc 1 143 0
 167 00cc 3B6E     		ldr	r3, [r7, #96]
 168 00ce 03F10403 		add	r3, r3, #4
 169 00d2 3B66     		str	r3, [r7, #96]
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Wait until the complete message has been processed */
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     counter = 0;
 170              		.loc 1 146 0
 171 00d4 4FF00003 		mov	r3, #0
 172 00d8 7B61     		str	r3, [r7, #20]
 173              	.L6:
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     do
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 174              		.loc 1 149 0 discriminator 1
 175 00da 4FF01000 		mov	r0, #16
 176 00de FFF7FEFF 		bl	CRYP_GetFlagStatus
 177 00e2 0346     		mov	r3, r0
 178 00e4 7B65     		str	r3, [r7, #84]
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       counter++;
 179              		.loc 1 150 0 discriminator 1
 180 00e6 7B69     		ldr	r3, [r7, #20]
 181 00e8 03F10103 		add	r3, r3, #1
 182 00ec 7B61     		str	r3, [r7, #20]
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 183              		.loc 1 151 0 discriminator 1
 184 00ee 7B69     		ldr	r3, [r7, #20]
 185 00f0 B3F5803F 		cmp	r3, #65536
 186 00f4 02D0     		beq	.L5
 187 00f6 7B6D     		ldr	r3, [r7, #84]
 188 00f8 002B     		cmp	r3, #0
 189 00fa EED1     		bne	.L6
 190              	.L5:
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     if (busystatus != RESET)
 191              		.loc 1 153 0
 192 00fc 7B6D     		ldr	r3, [r7, #84]
 193 00fe 002B     		cmp	r3, #0
 194 0100 04D0     		beq	.L7
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****    {
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****        status = ERROR;
 195              		.loc 1 155 0
 196 0102 4FF00003 		mov	r3, #0
 197 0106 87F86730 		strb	r3, [r7, #103]
 198 010a 11E0     		b	.L8
 199              	.L7:
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     else
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       /* Read the Output block from the Output FIFO */
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 200              		.loc 1 161 0
 201 010c FC6D     		ldr	r4, [r7, #92]
 202 010e FFF7FEFF 		bl	CRYP_DataOut
 203 0112 0346     		mov	r3, r0
 204 0114 2360     		str	r3, [r4, #0]
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 205              		.loc 1 162 0
 206 0116 FB6D     		ldr	r3, [r7, #92]
 207 0118 03F10403 		add	r3, r3, #4
 208 011c FB65     		str	r3, [r7, #92]
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 209              		.loc 1 163 0
 210 011e FC6D     		ldr	r4, [r7, #92]
 211 0120 FFF7FEFF 		bl	CRYP_DataOut
 212 0124 0346     		mov	r3, r0
 213 0126 2360     		str	r3, [r4, #0]
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 214              		.loc 1 164 0
 215 0128 FB6D     		ldr	r3, [r7, #92]
 216 012a 03F10403 		add	r3, r3, #4
 217 012e FB65     		str	r3, [r7, #92]
 218              	.L8:
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 219              		.loc 1 136 0
 220 0130 BB6D     		ldr	r3, [r7, #88]
 221 0132 03F10803 		add	r3, r3, #8
 222 0136 BB65     		str	r3, [r7, #88]
 223              	.L4:
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 224              		.loc 1 136 0 is_stmt 0 discriminator 1
 225 0138 BA6D     		ldr	r2, [r7, #88]
 226 013a 3B68     		ldr	r3, [r7, #0]
 227 013c 9A42     		cmp	r2, r3
 228 013e 03D2     		bcs	.L9
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 229              		.loc 1 136 0 discriminator 2
 230 0140 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 231 0144 002B     		cmp	r3, #0
 232 0146 B3D1     		bne	.L10
 233              	.L9:
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Disable Crypto */
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(DISABLE);
 234              		.loc 1 169 0 is_stmt 1
 235 0148 4FF00000 		mov	r0, #0
 236 014c FFF7FEFF 		bl	CRYP_Cmd
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   return status; 
 237              		.loc 1 171 0
 238 0150 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** }
 239              		.loc 1 172 0
 240 0154 1846     		mov	r0, r3
 241 0156 07F16C07 		add	r7, r7, #108
 242 015a BD46     		mov	sp, r7
 243 015c 90BD     		pop	{r4, r7, pc}
 244              		.cfi_endproc
 245              	.LFE110:
 247 015e 00BF     		.align	2
 248              		.global	CRYP_DES_CBC
 249              		.thumb
 250              		.thumb_func
 252              	CRYP_DES_CBC:
 253              	.LFB111:
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /**
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in CBC Mode
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          This parameter can be one of the following values:
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  InitVectors: Initialisation Vectors used for DES algorithm.
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** {
 254              		.loc 1 191 0
 255              		.cfi_startproc
 256              		@ args = 8, pretend = 0, frame = 136
 257              		@ frame_needed = 1, uses_anonymous_args = 0
 258 0160 90B5     		push	{r4, r7, lr}
 259              	.LCFI3:
 260              		.cfi_def_cfa_offset 12
 261              		.cfi_offset 14, -4
 262              		.cfi_offset 7, -8
 263              		.cfi_offset 4, -12
 264 0162 A3B0     		sub	sp, sp, #140
 265              	.LCFI4:
 266              		.cfi_def_cfa_offset 152
 267 0164 00AF     		add	r7, sp, #0
 268              	.LCFI5:
 269              		.cfi_def_cfa_register 7
 270 0166 B960     		str	r1, [r7, #8]
 271 0168 7A60     		str	r2, [r7, #4]
 272 016a 3B60     		str	r3, [r7, #0]
 273 016c 0346     		mov	r3, r0
 274 016e FB73     		strb	r3, [r7, #15]
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
 275              		.loc 1 195 0
 276 0170 4FF00003 		mov	r3, #0
 277 0174 3B61     		str	r3, [r7, #16]
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
 278              		.loc 1 196 0
 279 0176 4FF00003 		mov	r3, #0
 280 017a 7B67     		str	r3, [r7, #116]
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 281              		.loc 1 197 0
 282 017c 4FF00103 		mov	r3, #1
 283 0180 87F88730 		strb	r3, [r7, #135]
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 284              		.loc 1 198 0
 285 0184 BB68     		ldr	r3, [r7, #8]
 286 0186 3B67     		str	r3, [r7, #112]
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
 287              		.loc 1 199 0
 288 0188 3B68     		ldr	r3, [r7, #0]
 289 018a C7F88030 		str	r3, [r7, #128]
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
 290              		.loc 1 200 0
 291 018e D7F89C30 		ldr	r3, [r7, #156]
 292 0192 FB67     		str	r3, [r7, #124]
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 293              		.loc 1 201 0
 294 0194 7B68     		ldr	r3, [r7, #4]
 295 0196 FB66     		str	r3, [r7, #108]
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
 296              		.loc 1 202 0
 297 0198 4FF00003 		mov	r3, #0
 298 019c BB67     		str	r3, [r7, #120]
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 299              		.loc 1 205 0
 300 019e 07F12403 		add	r3, r7, #36
 301 01a2 1846     		mov	r0, r3
 302 01a4 FFF7FEFF 		bl	CRYP_KeyStructInit
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   if(Mode == MODE_ENCRYPT) /* DES encryption */
 303              		.loc 1 208 0
 304 01a8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 305 01aa 012B     		cmp	r3, #1
 306 01ac 04D1     		bne	.L12
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 307              		.loc 1 210 0
 308 01ae 4FF00003 		mov	r3, #0
 309 01b2 A7F84430 		strh	r3, [r7, #68]	@ movhi
 310 01b6 03E0     		b	.L13
 311              	.L12:
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 312              		.loc 1 214 0
 313 01b8 4FF00403 		mov	r3, #4
 314 01bc A7F84430 		strh	r3, [r7, #68]	@ movhi
 315              	.L13:
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 316              		.loc 1 217 0
 317 01c0 4FF01803 		mov	r3, #24
 318 01c4 A7F84630 		strh	r3, [r7, #70]	@ movhi
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 319              		.loc 1 218 0
 320 01c8 4FF08003 		mov	r3, #128
 321 01cc A7F84830 		strh	r3, [r7, #72]	@ movhi
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
 322              		.loc 1 219 0
 323 01d0 07F14403 		add	r3, r7, #68
 324 01d4 1846     		mov	r0, r3
 325 01d6 FFF7FEFF 		bl	CRYP_Init
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 326              		.loc 1 222 0
 327 01da 3B6F     		ldr	r3, [r7, #112]
 328 01dc 1B68     		ldr	r3, [r3, #0]
 329 01de BB66     		str	r3, [r7, #104]
 330              	.LBB18:
 331              	.LBB19:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 332              		.loc 2 352 0
 333 01e0 BB6E     		ldr	r3, [r7, #104]
 334              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 335 01e2 1CBA     		rev r4, r3
 336              	@ 0 "" 2
 337              		.thumb
 338 01e4 7C66     		str	r4, [r7, #100]
 339              		.loc 2 353 0
 340 01e6 7B6E     		ldr	r3, [r7, #100]
 341              	.LBE19:
 342              	.LBE18:
 343              		.loc 1 222 0
 344 01e8 FB62     		str	r3, [r7, #44]
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 345              		.loc 1 223 0
 346 01ea 3B6F     		ldr	r3, [r7, #112]
 347 01ec 03F10403 		add	r3, r3, #4
 348 01f0 3B67     		str	r3, [r7, #112]
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 349              		.loc 1 224 0
 350 01f2 3B6F     		ldr	r3, [r7, #112]
 351 01f4 1B68     		ldr	r3, [r3, #0]
 352 01f6 3B66     		str	r3, [r7, #96]
 353              	.LBB20:
 354              	.LBB21:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 355              		.loc 2 352 0
 356 01f8 3B6E     		ldr	r3, [r7, #96]
 357              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 358 01fa 1CBA     		rev r4, r3
 359              	@ 0 "" 2
 360              		.thumb
 361 01fc FC65     		str	r4, [r7, #92]
 362              		.loc 2 353 0
 363 01fe FB6D     		ldr	r3, [r7, #92]
 364              	.LBE21:
 365              	.LBE20:
 366              		.loc 1 224 0
 367 0200 3B63     		str	r3, [r7, #48]
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 368              		.loc 1 225 0
 369 0202 07F12403 		add	r3, r7, #36
 370 0206 1846     		mov	r0, r3
 371 0208 FFF7FEFF 		bl	CRYP_KeyInit
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Initialization Vectors */
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 372              		.loc 1 228 0
 373 020c FB6E     		ldr	r3, [r7, #108]
 374 020e 1B68     		ldr	r3, [r3, #0]
 375 0210 BB65     		str	r3, [r7, #88]
 376              	.LBB22:
 377              	.LBB23:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 378              		.loc 2 352 0
 379 0212 BB6D     		ldr	r3, [r7, #88]
 380              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 381 0214 1CBA     		rev r4, r3
 382              	@ 0 "" 2
 383              		.thumb
 384 0216 7C65     		str	r4, [r7, #84]
 385              		.loc 2 353 0
 386 0218 7B6D     		ldr	r3, [r7, #84]
 387              	.LBE23:
 388              	.LBE22:
 389              		.loc 1 228 0
 390 021a 7B61     		str	r3, [r7, #20]
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ivaddr+=4;
 391              		.loc 1 229 0
 392 021c FB6E     		ldr	r3, [r7, #108]
 393 021e 03F10403 		add	r3, r3, #4
 394 0222 FB66     		str	r3, [r7, #108]
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 395              		.loc 1 230 0
 396 0224 FB6E     		ldr	r3, [r7, #108]
 397 0226 1B68     		ldr	r3, [r3, #0]
 398 0228 3B65     		str	r3, [r7, #80]
 399              	.LBB24:
 400              	.LBB25:
 352:C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 401              		.loc 2 352 0
 402 022a 3B6D     		ldr	r3, [r7, #80]
 403              	@ 352 "C:\Users\Alex\git\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 404 022c 1CBA     		rev r4, r3
 405              	@ 0 "" 2
 406              		.thumb
 407 022e FC64     		str	r4, [r7, #76]
 408              		.loc 2 353 0
 409 0230 FB6C     		ldr	r3, [r7, #76]
 410              	.LBE25:
 411              	.LBE24:
 412              		.loc 1 230 0
 413 0232 BB61     		str	r3, [r7, #24]
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_IVInit(&DES_CRYP_IVInitStructure);
 414              		.loc 1 231 0
 415 0234 07F11403 		add	r3, r7, #20
 416 0238 1846     		mov	r0, r3
 417 023a FFF7FEFF 		bl	CRYP_IVInit
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 418              		.loc 1 234 0
 419 023e FFF7FEFF 		bl	CRYP_FIFOFlush
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 420              		.loc 1 237 0
 421 0242 4FF00100 		mov	r0, #1
 422 0246 FFF7FEFF 		bl	CRYP_Cmd
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 423              		.loc 1 239 0
 424 024a 4FF00003 		mov	r3, #0
 425 024e BB67     		str	r3, [r7, #120]
 426 0250 49E0     		b	.L14
 427              	.L20:
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     /* Write the Input block in the Input FIFO */
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 428              		.loc 1 242 0
 429 0252 D7F88030 		ldr	r3, [r7, #128]
 430 0256 1B68     		ldr	r3, [r3, #0]
 431 0258 1846     		mov	r0, r3
 432 025a FFF7FEFF 		bl	CRYP_DataIn
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 433              		.loc 1 243 0
 434 025e D7F88030 		ldr	r3, [r7, #128]
 435 0262 03F10403 		add	r3, r3, #4
 436 0266 C7F88030 		str	r3, [r7, #128]
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 437              		.loc 1 244 0
 438 026a D7F88030 		ldr	r3, [r7, #128]
 439 026e 1B68     		ldr	r3, [r3, #0]
 440 0270 1846     		mov	r0, r3
 441 0272 FFF7FEFF 		bl	CRYP_DataIn
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 442              		.loc 1 245 0
 443 0276 D7F88030 		ldr	r3, [r7, #128]
 444 027a 03F10403 		add	r3, r3, #4
 445 027e C7F88030 		str	r3, [r7, #128]
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     /* Wait until the complete message has been processed */
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     counter = 0;
 446              		.loc 1 248 0
 447 0282 4FF00003 		mov	r3, #0
 448 0286 3B61     		str	r3, [r7, #16]
 449              	.L16:
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     do
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 450              		.loc 1 251 0 discriminator 1
 451 0288 4FF01000 		mov	r0, #16
 452 028c FFF7FEFF 		bl	CRYP_GetFlagStatus
 453 0290 0346     		mov	r3, r0
 454 0292 7B67     		str	r3, [r7, #116]
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       counter++;
 455              		.loc 1 252 0 discriminator 1
 456 0294 3B69     		ldr	r3, [r7, #16]
 457 0296 03F10103 		add	r3, r3, #1
 458 029a 3B61     		str	r3, [r7, #16]
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 459              		.loc 1 253 0 discriminator 1
 460 029c 3B69     		ldr	r3, [r7, #16]
 461 029e B3F5803F 		cmp	r3, #65536
 462 02a2 02D0     		beq	.L15
 463 02a4 7B6F     		ldr	r3, [r7, #116]
 464 02a6 002B     		cmp	r3, #0
 465 02a8 EED1     		bne	.L16
 466              	.L15:
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     if (busystatus != RESET)
 467              		.loc 1 255 0
 468 02aa 7B6F     		ldr	r3, [r7, #116]
 469 02ac 002B     		cmp	r3, #0
 470 02ae 04D0     		beq	.L17
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****    {
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****        status = ERROR;
 471              		.loc 1 257 0
 472 02b0 4FF00003 		mov	r3, #0
 473 02b4 87F88730 		strb	r3, [r7, #135]
 474 02b8 11E0     		b	.L18
 475              	.L17:
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     else
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       /* Read the Output block from the Output FIFO */
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 476              		.loc 1 262 0
 477 02ba FC6F     		ldr	r4, [r7, #124]
 478 02bc FFF7FEFF 		bl	CRYP_DataOut
 479 02c0 0346     		mov	r3, r0
 480 02c2 2360     		str	r3, [r4, #0]
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 481              		.loc 1 263 0
 482 02c4 FB6F     		ldr	r3, [r7, #124]
 483 02c6 03F10403 		add	r3, r3, #4
 484 02ca FB67     		str	r3, [r7, #124]
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 485              		.loc 1 264 0
 486 02cc FC6F     		ldr	r4, [r7, #124]
 487 02ce FFF7FEFF 		bl	CRYP_DataOut
 488 02d2 0346     		mov	r3, r0
 489 02d4 2360     		str	r3, [r4, #0]
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 490              		.loc 1 265 0
 491 02d6 FB6F     		ldr	r3, [r7, #124]
 492 02d8 03F10403 		add	r3, r3, #4
 493 02dc FB67     		str	r3, [r7, #124]
 494              	.L18:
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 495              		.loc 1 239 0
 496 02de BB6F     		ldr	r3, [r7, #120]
 497 02e0 03F10803 		add	r3, r3, #8
 498 02e4 BB67     		str	r3, [r7, #120]
 499              	.L14:
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 500              		.loc 1 239 0 is_stmt 0 discriminator 1
 501 02e6 BA6F     		ldr	r2, [r7, #120]
 502 02e8 D7F89830 		ldr	r3, [r7, #152]
 503 02ec 9A42     		cmp	r2, r3
 504 02ee 03D2     		bcs	.L19
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 505              		.loc 1 239 0 discriminator 2
 506 02f0 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 507 02f4 002B     		cmp	r3, #0
 508 02f6 ACD1     		bne	.L20
 509              	.L19:
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Disable Crypto */
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(DISABLE);
 510              		.loc 1 270 0 is_stmt 1
 511 02f8 4FF00000 		mov	r0, #0
 512 02fc FFF7FEFF 		bl	CRYP_Cmd
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   return status; 
 513              		.loc 1 272 0
 514 0300 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** }
 515              		.loc 1 273 0
 516 0304 1846     		mov	r0, r3
 517 0306 07F18C07 		add	r7, r7, #140
 518 030a BD46     		mov	sp, r7
 519 030c 90BD     		pop	{r4, r7, pc}
 520              		.cfi_endproc
 521              	.LFE111:
 523              	.Letext0:
 524              		.file 3 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 525              		.file 4 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Device\\STM32F4xx\\Include/stm3
 526              		.file 5 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f
 527              		.file 6 "C:\\Users\\Alex\\git\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_cryp_des.c
C:\Users\Alex\AppData\Local\Temp\ccOPwLvd.s:18     .text:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccOPwLvd.s:23     .text:00000000 CRYP_DES_ECB
C:\Users\Alex\AppData\Local\Temp\ccOPwLvd.s:252    .text:00000160 CRYP_DES_CBC
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
