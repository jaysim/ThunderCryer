   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 4
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_cryp_des.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.CRYP_DES_ECB,"ax",%progbits
  19              		.align	1
  20              		.global	CRYP_DES_ECB
  21              		.thumb
  22              		.thumb_func
  24              	CRYP_DES_ECB:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @file    stm32f4xx_cryp_des.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @version V1.0.0RC1
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @date    25-August-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          input message using DES in ECB/CBC modes.
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          peripheral.
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *  @verbatim
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          ===================================================================
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *                                   How to use this driver
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          ===================================================================
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          1. Enable The CRYP controller clock using 
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          2. Encrypt and decrypt using DES in ECB Mode using CRYP_DES_ECB()
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *             function.
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          3. Encrypt and decrypt using DES in CBC Mode using CRYP_DES_CBC()
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *             function.
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *  @endverbatim
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @attention
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ******************************************************************************
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Includes ------------------------------------------------------------------*/
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** #include "stm32f4xx_cryp.h"
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief CRYP driver modules
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private typedef -----------------------------------------------------------*/
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private define ------------------------------------------------------------*/
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** #define DESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private macro -------------------------------------------------------------*/
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private variables ---------------------------------------------------------*/
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private function prototypes -----------------------------------------------*/
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Private functions ---------------------------------------------------------*/
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Private_Functions
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */ 
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Group8 High Level DES functions
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  *  @brief   High Level DES functions 
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  *
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** @verbatim   
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  ===============================================================================
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****                           High Level DES functions
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****  ===============================================================================
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** @endverbatim
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @{
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /**
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in ECB Mode
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *           This parameter can be one of the following values:
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****                          uint32_t Ilength, uint8_t *Output)
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** {
  27              		.loc 1 96 0
  28              		.cfi_startproc
  29              		@ args = 4, pretend = 0, frame = 48
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, sl, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 32
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 10, -8
  37              		.cfi_offset 9, -12
  38              		.cfi_offset 8, -16
  39              		.cfi_offset 7, -20
  40              		.cfi_offset 6, -24
  41              		.cfi_offset 5, -28
  42              		.cfi_offset 4, -32
  43 0004 8CB0     		sub	sp, sp, #48
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 80
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
  46              		.loc 1 99 0
  47 0006 4FF00009 		mov	r9, #0
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** {
  48              		.loc 1 96 0
  49 000a 0446     		mov	r4, r0
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
  50              		.loc 1 108 0
  51 000c 01A8     		add	r0, sp, #4
  52              	.LVL1:
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** {
  53              		.loc 1 96 0
  54 000e 0D46     		mov	r5, r1
  55 0010 1646     		mov	r6, r2
  56 0012 9A46     		mov	sl, r3
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
  57              		.loc 1 103 0
  58 0014 9046     		mov	r8, r2
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
  59              		.loc 1 99 0
  60 0016 CDF82C90 		str	r9, [sp, #44]
  61              	.LVL2:
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
  62              		.loc 1 104 0
  63 001a 149F     		ldr	r7, [sp, #80]
  64              	.LVL3:
  65              		.loc 1 108 0
  66 001c FFF7FEFF 		bl	CRYP_KeyStructInit
  67              	.LVL4:
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   if( Mode == MODE_ENCRYPT ) /* DES encryption */
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {      
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
  68              		.loc 1 120 0
  69 0020 1023     		movs	r3, #16
  70 0022 ADF82630 		strh	r3, [sp, #38]	@ movhi
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  71              		.loc 1 113 0
  72 0026 012C     		cmp	r4, #1
  73 0028 14BF     		ite	ne
  74 002a 0424     		movne	r4, #4
  75 002c 4C46     		moveq	r4, r9
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  76              		.loc 1 121 0
  77 002e 8023     		movs	r3, #128
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
  78              		.loc 1 122 0
  79 0030 09A8     		add	r0, sp, #36
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  80              		.loc 1 121 0
  81 0032 ADF82830 		strh	r3, [sp, #40]	@ movhi
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   if( Mode == MODE_ENCRYPT ) /* DES encryption */
  82              		.loc 1 111 0
  83 0036 ADF82440 		strh	r4, [sp, #36]	@ movhi
  84              		.loc 1 122 0
  85 003a FFF7FEFF 		bl	CRYP_Init
  86              	.LVL5:
  87              	.LBB14:
  88              	.LBB15:
  89              		.file 2 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Include/core_cmInstr.h"
   1:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /**************************************************************************//**
   2:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * @version  V2.10
   5:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * @date     19. July 2011
   6:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  *
   7:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * @note
   8:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  *
  10:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * @par
  11:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  *
  15:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * @par
  16:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  *
  22:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  ******************************************************************************/
  23:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  24:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  27:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  28:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   Access to dedicated instructions
  31:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   @{
  32:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** */
  33:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  34:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /* ARM armcc specific functions */
  36:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  37:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #endif
  40:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  41:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  42:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
  43:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  44:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
  46:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __NOP                             __nop
  47:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  48:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  49:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  51:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
  53:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
  54:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __WFI                             __wfi
  55:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  56:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  57:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
  58:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  59:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
  62:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __WFE                             __wfe
  63:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  64:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  65:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
  66:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  67:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
  69:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __SEV                             __sev
  70:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  71:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  72:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  74:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
  78:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  80:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  81:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  83:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
  86:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  88:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  89:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  91:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
  94:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  96:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  97:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
  99:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 101:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 103:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 104:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __REV                             __rev
 105:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 106:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 107:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 109:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 111:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 113:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 114:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 116:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   rev16 r0, r0
 117:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   bx lr
 118:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** }
 119:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 120:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 121:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 123:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 125:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 127:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 128:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 130:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   revsh r0, r0
 131:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   bx lr
 132:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** }
 133:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 134:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 135:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 137:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 139:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 141:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 143:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 144:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __RBIT                            __rbit
 145:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 146:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 147:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 149:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 151:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 154:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 156:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 157:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 159:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 161:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 164:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 166:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 167:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 169:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 171:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 174:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 176:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 177:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 179:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 181:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 182:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 184:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 185:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 186:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 188:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 189:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 191:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 193:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 194:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 196:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 197:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 198:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 200:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 201:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 203:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 205:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 206:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 208:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 209:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 210:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 212:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 213:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 215:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 217:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 218:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __CLREX                           __clrex
 219:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 220:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 221:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Signed Saturate
 222:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 223:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function saturates a signed value.
 224:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 225:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 228:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 229:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __SSAT                            __ssat
 230:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 231:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 232:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 234:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function saturates an unsigned value.
 235:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 236:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 239:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 240:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __USAT                            __usat
 241:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 242:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 243:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Count leading zeros
 244:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 245:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 247:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return             number of leading zeros in value
 249:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 250:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #define __CLZ                             __clz 
 251:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 252:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 254:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 255:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 256:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 259:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #include <cmsis_iar.h>
 260:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 261:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 262:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /* GNU gcc specific functions */
 264:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 265:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
 266:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 267:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 269:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 271:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("nop");
 272:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** }
 273:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 274:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 275:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 277:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
 279:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 280:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 282:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 283:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** }
 284:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 285:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 286:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
 287:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 288:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 291:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 293:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfe");
 294:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** }
 295:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 296:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 297:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
 298:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 299:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 300:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 301:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
 302:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 303:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("sev");
 304:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** }
 305:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 306:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 307:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 308:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 309:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
 310:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
 311:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
 312:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 313:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
 314:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 315:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("isb");
 316:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** }
 317:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 318:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 319:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 320:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 321:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
 322:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 323:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 324:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
 325:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 326:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dsb");
 327:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** }
 328:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 329:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 330:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 331:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 332:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
 333:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 334:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 335:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
 336:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 337:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dmb");
 338:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** }
 339:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 340:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 341:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 342:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 343:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 344:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** 
 345:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 346:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 347:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****  */
 348:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
 349:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h **** {
 350:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   uint32_t result;
 351:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   
 352:D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
  90              		.loc 2 352 0
  91 003e 2B68     		ldr	r3, [r5, #0]
  92              	@ 352 "D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include/core_cmInstr.h" 1
  93 0040 1BBA     		rev r3, r3
  94              	@ 0 "" 2
  95              	.LVL6:
  96              		.thumb
  97              	.LBE15:
  98              	.LBE14:
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  99              		.loc 1 125 0
 100 0042 0393     		str	r3, [sp, #12]
 101              	.LVL7:
 102              	.LBB16:
 103              	.LBB17:
 104              		.loc 2 352 0
 105 0044 6B68     		ldr	r3, [r5, #4]
 106              	.LVL8:
 107              	@ 352 "D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include/core_cmInstr.h" 1
 108 0046 1BBA     		rev r3, r3
 109              	@ 0 "" 2
 110              	.LVL9:
 111              		.thumb
 112              	.LBE17:
 113              	.LBE16:
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 114              		.loc 1 128 0
 115 0048 01A8     		add	r0, sp, #4
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 116              		.loc 1 127 0
 117 004a 0493     		str	r3, [sp, #16]
 118              		.loc 1 128 0
 119 004c FFF7FEFF 		bl	CRYP_KeyInit
 120              	.LVL10:
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 121              		.loc 1 131 0
 122 0050 FFF7FEFF 		bl	CRYP_FIFOFlush
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 123              		.loc 1 134 0
 124 0054 0120     		movs	r0, #1
 125 0056 FFF7FEFF 		bl	CRYP_Cmd
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 126              		.loc 1 136 0
 127 005a 4C46     		mov	r4, r9
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 128              		.loc 1 101 0
 129 005c 0125     		movs	r5, #1
 130              	.LVL11:
 131              		.loc 1 136 0
 132 005e 22E0     		b	.L3
 133              	.LVL12:
 134              	.L8:
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     /* Write the Input block in the Input FIFO */
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 135              		.loc 1 140 0
 136 0060 3059     		ldr	r0, [r6, r4]
 137 0062 FFF7FEFF 		bl	CRYP_DataIn
 138              	.LVL13:
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 139              		.loc 1 142 0
 140 0066 D8F80400 		ldr	r0, [r8, #4]
 141 006a FFF7FEFF 		bl	CRYP_DataIn
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 142              		.loc 1 143 0
 143 006e 08F10808 		add	r8, r8, #8
 144              	.LVL14:
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /* Wait until the complete message has been processed */
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     counter = 0;
 145              		.loc 1 146 0
 146 0072 CDF82C90 		str	r9, [sp, #44]
 147              	.L5:
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     do
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 148              		.loc 1 149 0 discriminator 1
 149 0076 1020     		movs	r0, #16
 150 0078 FFF7FEFF 		bl	CRYP_GetFlagStatus
 151              	.LVL15:
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       counter++;
 152              		.loc 1 150 0 discriminator 1
 153 007c 0B9B     		ldr	r3, [sp, #44]
 154 007e 0133     		adds	r3, r3, #1
 155              	.LVL16:
 156 0080 0B93     		str	r3, [sp, #44]
 157              	.LVL17:
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 158              		.loc 1 151 0 discriminator 1
 159 0082 0B9B     		ldr	r3, [sp, #44]
 160              	.LVL18:
 161 0084 B3F5803F 		cmp	r3, #65536
 162 0088 02D0     		beq	.L4
 163 008a 0028     		cmp	r0, #0
 164 008c F3D1     		bne	.L5
 165 008e 01E0     		b	.L6
 166              	.L4:
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     if (busystatus != RESET)
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****    {
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****        status = ERROR;
 167              		.loc 1 155 0
 168 0090 0025     		movs	r5, #0
 169              	.LVL19:
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     if (busystatus != RESET)
 170              		.loc 1 153 0
 171 0092 38B9     		cbnz	r0, .L7
 172              	.L6:
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     else
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       /* Read the Output block from the Output FIFO */
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 173              		.loc 1 161 0
 174 0094 FFF7FEFF 		bl	CRYP_DataOut
 175              	.LVL20:
 176 0098 3860     		str	r0, [r7, #0]
 177              	.LVL21:
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 178              		.loc 1 163 0
 179 009a FFF7FEFF 		bl	CRYP_DataOut
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 180              		.loc 1 164 0
 181 009e 0125     		movs	r5, #1
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 182              		.loc 1 163 0
 183 00a0 7860     		str	r0, [r7, #4]
 184              		.loc 1 164 0
 185 00a2 0837     		adds	r7, r7, #8
 186              	.LVL22:
 187              	.L7:
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 188              		.loc 1 136 0
 189 00a4 0834     		adds	r4, r4, #8
 190              	.LVL23:
 191              	.L3:
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 192              		.loc 1 136 0 is_stmt 0 discriminator 1
 193 00a6 5445     		cmp	r4, sl
 194 00a8 2CBF     		ite	cs
 195 00aa 0020     		movcs	r0, #0
 196 00ac 05F00100 		andcc	r0, r5, #1
 197 00b0 0028     		cmp	r0, #0
 198 00b2 D5D1     		bne	.L8
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Disable Crypto */
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(DISABLE);
 199              		.loc 1 169 0 is_stmt 1
 200 00b4 FFF7FEFF 		bl	CRYP_Cmd
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   return status; 
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** }
 201              		.loc 1 172 0
 202 00b8 2846     		mov	r0, r5
 203 00ba 0CB0     		add	sp, sp, #48
 204 00bc BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 205              		.cfi_endproc
 206              	.LFE110:
 208              		.section	.text.CRYP_DES_CBC,"ax",%progbits
 209              		.align	1
 210              		.global	CRYP_DES_CBC
 211              		.thumb
 212              		.thumb_func
 214              	CRYP_DES_CBC:
 215              	.LFB111:
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** /**
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in CBC Mode
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          This parameter can be one of the following values:
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  InitVectors: Initialisation Vectors used for DES algorithm.
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   */
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** {
 216              		.loc 1 191 0
 217              		.cfi_startproc
 218              		@ args = 8, pretend = 0, frame = 64
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              	.LVL24:
 221 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 222              	.LCFI2:
 223              		.cfi_def_cfa_offset 36
 224              		.cfi_offset 14, -4
 225              		.cfi_offset 11, -8
 226              		.cfi_offset 10, -12
 227              		.cfi_offset 9, -16
 228              		.cfi_offset 8, -20
 229              		.cfi_offset 7, -24
 230              		.cfi_offset 6, -28
 231              		.cfi_offset 5, -32
 232              		.cfi_offset 4, -36
 233 0004 91B0     		sub	sp, sp, #68
 234              	.LCFI3:
 235              		.cfi_def_cfa_offset 104
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
 236              		.loc 1 195 0
 237 0006 4FF00009 		mov	r9, #0
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** {
 238              		.loc 1 191 0
 239 000a 0446     		mov	r4, r0
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 240              		.loc 1 205 0
 241 000c 01A8     		add	r0, sp, #4
 242              	.LVL25:
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** {
 243              		.loc 1 191 0
 244 000e 0D46     		mov	r5, r1
 245 0010 1646     		mov	r6, r2
 246 0012 9A46     		mov	sl, r3
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
 247              		.loc 1 199 0
 248 0014 9846     		mov	r8, r3
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** {
 249              		.loc 1 191 0
 250 0016 DDF868B0 		ldr	fp, [sp, #104]
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
 251              		.loc 1 195 0
 252 001a CDF83C90 		str	r9, [sp, #60]
 253              	.LVL26:
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
 254              		.loc 1 200 0
 255 001e 1B9F     		ldr	r7, [sp, #108]
 256              	.LVL27:
 257              		.loc 1 205 0
 258 0020 FFF7FEFF 		bl	CRYP_KeyStructInit
 259              	.LVL28:
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   if(Mode == MODE_ENCRYPT) /* DES encryption */
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 260              		.loc 1 217 0
 261 0024 1823     		movs	r3, #24
 262 0026 ADF83630 		strh	r3, [sp, #54]	@ movhi
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 263              		.loc 1 210 0
 264 002a 012C     		cmp	r4, #1
 265 002c 14BF     		ite	ne
 266 002e 0424     		movne	r4, #4
 267 0030 4C46     		moveq	r4, r9
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 268              		.loc 1 218 0
 269 0032 8023     		movs	r3, #128
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
 270              		.loc 1 219 0
 271 0034 0DA8     		add	r0, sp, #52
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 272              		.loc 1 218 0
 273 0036 ADF83830 		strh	r3, [sp, #56]	@ movhi
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   if(Mode == MODE_ENCRYPT) /* DES encryption */
 274              		.loc 1 208 0
 275 003a ADF83440 		strh	r4, [sp, #52]	@ movhi
 276              		.loc 1 219 0
 277 003e FFF7FEFF 		bl	CRYP_Init
 278              	.LVL29:
 279              	.LBB18:
 280              	.LBB19:
 281              		.loc 2 352 0
 282 0042 2B68     		ldr	r3, [r5, #0]
 283              	@ 352 "D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include/core_cmInstr.h" 1
 284 0044 1BBA     		rev r3, r3
 285              	@ 0 "" 2
 286              	.LVL30:
 287              		.thumb
 288              	.LBE19:
 289              	.LBE18:
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 290              		.loc 1 222 0
 291 0046 0393     		str	r3, [sp, #12]
 292              	.LVL31:
 293              	.LBB20:
 294              	.LBB21:
 295              		.loc 2 352 0
 296 0048 6B68     		ldr	r3, [r5, #4]
 297              	.LVL32:
 298              	@ 352 "D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include/core_cmInstr.h" 1
 299 004a 1BBA     		rev r3, r3
 300              	@ 0 "" 2
 301              	.LVL33:
 302              		.thumb
 303              	.LBE21:
 304              	.LBE20:
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 305              		.loc 1 225 0
 306 004c 01A8     		add	r0, sp, #4
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 307              		.loc 1 224 0
 308 004e 0493     		str	r3, [sp, #16]
 309              		.loc 1 225 0
 310 0050 FFF7FEFF 		bl	CRYP_KeyInit
 311              	.LVL34:
 312              	.LBB22:
 313              	.LBB23:
 314              		.loc 2 352 0
 315 0054 3368     		ldr	r3, [r6, #0]
 316              	@ 352 "D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include/core_cmInstr.h" 1
 317 0056 1BBA     		rev r3, r3
 318              	@ 0 "" 2
 319              	.LVL35:
 320              		.thumb
 321              	.LBE23:
 322              	.LBE22:
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Initialization Vectors */
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 323              		.loc 1 228 0
 324 0058 0993     		str	r3, [sp, #36]
 325              	.LVL36:
 326              	.LBB24:
 327              	.LBB25:
 328              		.loc 2 352 0
 329 005a 7368     		ldr	r3, [r6, #4]
 330              	.LVL37:
 331              	@ 352 "D:\Elektronik\WorspaceEclipse\ThunderCryer\CMSIS\Include/core_cmInstr.h" 1
 332 005c 1BBA     		rev r3, r3
 333              	@ 0 "" 2
 334              	.LVL38:
 335              		.thumb
 336              	.LBE25:
 337              	.LBE24:
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ivaddr+=4;
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_IVInit(&DES_CRYP_IVInitStructure);
 338              		.loc 1 231 0
 339 005e 09A8     		add	r0, sp, #36
 340              	.LVL39:
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 341              		.loc 1 230 0
 342 0060 0A93     		str	r3, [sp, #40]
 343              		.loc 1 231 0
 344 0062 FFF7FEFF 		bl	CRYP_IVInit
 345              	.LVL40:
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 346              		.loc 1 234 0
 347 0066 FFF7FEFF 		bl	CRYP_FIFOFlush
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 348              		.loc 1 237 0
 349 006a 0120     		movs	r0, #1
 350 006c FFF7FEFF 		bl	CRYP_Cmd
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 351              		.loc 1 239 0
 352 0070 4C46     		mov	r4, r9
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 353              		.loc 1 197 0
 354 0072 0125     		movs	r5, #1
 355              	.LVL41:
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   {
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     /* Write the Input block in the Input FIFO */
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     /* Wait until the complete message has been processed */
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     counter = 0;
 356              		.loc 1 248 0
 357 0074 4E46     		mov	r6, r9
 358              	.LVL42:
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 359              		.loc 1 239 0
 360 0076 22E0     		b	.L14
 361              	.LVL43:
 362              	.L19:
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 363              		.loc 1 242 0
 364 0078 5AF80400 		ldr	r0, [sl, r4]
 365 007c FFF7FEFF 		bl	CRYP_DataIn
 366              	.LVL44:
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 367              		.loc 1 244 0
 368 0080 D8F80400 		ldr	r0, [r8, #4]
 369 0084 FFF7FEFF 		bl	CRYP_DataIn
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     inputaddr+=4;
 370              		.loc 1 245 0
 371 0088 08F10808 		add	r8, r8, #8
 372              	.LVL45:
 373              		.loc 1 248 0
 374 008c 0F96     		str	r6, [sp, #60]
 375              	.L16:
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     do
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 376              		.loc 1 251 0 discriminator 1
 377 008e 1020     		movs	r0, #16
 378 0090 FFF7FEFF 		bl	CRYP_GetFlagStatus
 379              	.LVL46:
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       counter++;
 380              		.loc 1 252 0 discriminator 1
 381 0094 0F9B     		ldr	r3, [sp, #60]
 382 0096 0133     		adds	r3, r3, #1
 383              	.LVL47:
 384 0098 0F93     		str	r3, [sp, #60]
 385              	.LVL48:
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 386              		.loc 1 253 0 discriminator 1
 387 009a 0F9B     		ldr	r3, [sp, #60]
 388              	.LVL49:
 389 009c B3F5803F 		cmp	r3, #65536
 390 00a0 02D0     		beq	.L15
 391 00a2 0028     		cmp	r0, #0
 392 00a4 F3D1     		bne	.L16
 393 00a6 01E0     		b	.L17
 394              	.L15:
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     if (busystatus != RESET)
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****    {
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****        status = ERROR;
 395              		.loc 1 257 0
 396 00a8 0025     		movs	r5, #0
 397              	.LVL50:
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     if (busystatus != RESET)
 398              		.loc 1 255 0
 399 00aa 38B9     		cbnz	r0, .L18
 400              	.L17:
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     else
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     {
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       /* Read the Output block from the Output FIFO */
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 401              		.loc 1 262 0
 402 00ac FFF7FEFF 		bl	CRYP_DataOut
 403              	.LVL51:
 404 00b0 3860     		str	r0, [r7, #0]
 405              	.LVL52:
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 406              		.loc 1 264 0
 407 00b2 FFF7FEFF 		bl	CRYP_DataOut
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       outputaddr+=4;
 408              		.loc 1 265 0
 409 00b6 0125     		movs	r5, #1
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 410              		.loc 1 264 0
 411 00b8 7860     		str	r0, [r7, #4]
 412              		.loc 1 265 0
 413 00ba 0837     		adds	r7, r7, #8
 414              	.LVL53:
 415              	.L18:
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 416              		.loc 1 239 0
 417 00bc 0834     		adds	r4, r4, #8
 418              	.LVL54:
 419              	.L14:
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 420              		.loc 1 239 0 is_stmt 0 discriminator 1
 421 00be 5C45     		cmp	r4, fp
 422 00c0 2CBF     		ite	cs
 423 00c2 0020     		movcs	r0, #0
 424 00c4 05F00100 		andcc	r0, r5, #1
 425 00c8 0028     		cmp	r0, #0
 426 00ca D5D1     		bne	.L19
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****     }
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   }
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   /* Disable Crypto */
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(DISABLE);
 427              		.loc 1 270 0 is_stmt 1
 428 00cc FFF7FEFF 		bl	CRYP_Cmd
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** 
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c ****   return status; 
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c **** }
 429              		.loc 1 273 0
 430 00d0 2846     		mov	r0, r5
 431 00d2 11B0     		add	sp, sp, #68
 432 00d4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 433              		.cfi_endproc
 434              	.LFE111:
 436              		.text
 437              	.Letext0:
 438              		.file 3 "d:/elektronik/ides/eclipse/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 439              		.file 4 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Device\\STM32F4xx\\Include/stm32f4x
 440              		.file 5 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_
 441              		.file 6 "D:\\Elektronik\\WorspaceEclipse\\ThunderCryer\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_cryp_des.c
  C:\Temp\ccbO6oNi.s:19     .text.CRYP_DES_ECB:00000000 $t
  C:\Temp\ccbO6oNi.s:24     .text.CRYP_DES_ECB:00000000 CRYP_DES_ECB
  C:\Temp\ccbO6oNi.s:209    .text.CRYP_DES_CBC:00000000 $t
  C:\Temp\ccbO6oNi.s:214    .text.CRYP_DES_CBC:00000000 CRYP_DES_CBC
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
