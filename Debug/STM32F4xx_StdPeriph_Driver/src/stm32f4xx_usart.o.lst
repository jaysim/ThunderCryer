   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_usart.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.USART_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	USART_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	USART_DeInit:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Initialization and Configuration
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Data transfers
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Multi-Processor Communication
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - LIN mode
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Half-duplex mode
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Smartcard mode
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - IrDA mode
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - DMA transfers management
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Interrupts and flags management 
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @verbatim
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *      
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                                 How to use this driver
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          1. Enable peripheral clock using the follwoing functions
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, UART4 or 
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          2.  According to the USART mode, enable the GPIO clocks using 
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              or/and SCLK). 
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          3. Peripheral's alternate function: 
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Configure the desired pin in alternate function by:
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Call GPIO_Init() function
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          4. Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             flow control and Mode(Receiver/Transmitter) using the USART_Init()
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             function.
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. For synchronous mode, enable the clock and program the polarity,
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             phase and last bit using the USART_ClockInit() function.
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             USART_ITConfig() if you need to use interrupt mode. 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          6. When using the DMA mode 
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Configure the DMA using DMA_Init() function
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Active the needed channel Request using USART_DMACmd() function
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          7. Enable the USART using the USART_Cmd() function.
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          8. Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          for more details
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          In order to reach higher communication baudrates, it is possible to
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd(
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          and before calling the function USART_Init().
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @endverbatim
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @attention
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************  
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */ 
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART 
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief USART driver modules
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                   Initialization and Configuration functions
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to initialize the USART 
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   in asynchronous and in synchronous modes.
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    - For the asynchronous mode only these parameters can be configured: 
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Baud Rate
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length 
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Stop Bit
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Parity: If the parity is enabled, then the MSB bit of the data written
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           in the data register is transmitted but is changed by the parity bit.
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           Depending on the frame length defined by the M bit (8-bits or 9-bits),
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the possible USART frame formats are as listed in the following table:
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Receiver/transmitter modes
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART_Init() function follows the USART  asynchronous configuration procedure
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   (details for the procedure are available in reference manual (RM0090)).
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   - For the synchronous mode in addition to the asynchronous mode parameters these 
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     parameters should be also configured:
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock Enabled
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART polarity
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART phase
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART LastBit
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   These parameters can be configured using the USART_ClockInit() function.
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
  27              		.loc 1 179 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
  43              		.loc 1 183 0
  44 0008 7A68     		ldr	r2, [r7, #4]
  45 000a 4FF48053 		mov	r3, #4096
  46 000e C4F20103 		movt	r3, 16385
  47 0012 9A42     		cmp	r2, r3
  48 0014 0CD1     		bne	.L2
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  49              		.loc 1 185 0
  50 0016 4FF01000 		mov	r0, #16
  51 001a 4FF00101 		mov	r1, #1
  52 001e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  53              		.loc 1 186 0
  54 0022 4FF01000 		mov	r0, #16
  55 0026 4FF00001 		mov	r1, #0
  56 002a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  57 002e 62E0     		b	.L1
  58              	.L2:
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
  59              		.loc 1 188 0
  60 0030 7A68     		ldr	r2, [r7, #4]
  61 0032 4FF48843 		mov	r3, #17408
  62 0036 C4F20003 		movt	r3, 16384
  63 003a 9A42     		cmp	r2, r3
  64 003c 0CD1     		bne	.L4
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  65              		.loc 1 190 0
  66 003e 4FF40030 		mov	r0, #131072
  67 0042 4FF00101 		mov	r1, #1
  68 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  69              		.loc 1 191 0
  70 004a 4FF40030 		mov	r0, #131072
  71 004e 4FF00001 		mov	r1, #0
  72 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  73 0056 4EE0     		b	.L1
  74              	.L4:
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
  75              		.loc 1 193 0
  76 0058 7A68     		ldr	r2, [r7, #4]
  77 005a 4FF49043 		mov	r3, #18432
  78 005e C4F20003 		movt	r3, 16384
  79 0062 9A42     		cmp	r2, r3
  80 0064 0CD1     		bne	.L5
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
  81              		.loc 1 195 0
  82 0066 4FF48020 		mov	r0, #262144
  83 006a 4FF00101 		mov	r1, #1
  84 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  85              		.loc 1 196 0
  86 0072 4FF48020 		mov	r0, #262144
  87 0076 4FF00001 		mov	r1, #0
  88 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  89 007e 3AE0     		b	.L1
  90              	.L5:
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
  91              		.loc 1 198 0
  92 0080 7A68     		ldr	r2, [r7, #4]
  93 0082 4FF49843 		mov	r3, #19456
  94 0086 C4F20003 		movt	r3, 16384
  95 008a 9A42     		cmp	r2, r3
  96 008c 0CD1     		bne	.L6
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
  97              		.loc 1 200 0
  98 008e 4FF40020 		mov	r0, #524288
  99 0092 4FF00101 		mov	r1, #1
 100 0096 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 101              		.loc 1 201 0
 102 009a 4FF40020 		mov	r0, #524288
 103 009e 4FF00001 		mov	r1, #0
 104 00a2 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 105 00a6 26E0     		b	.L1
 106              	.L6:
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
 107              		.loc 1 203 0
 108 00a8 7A68     		ldr	r2, [r7, #4]
 109 00aa 4FF4A043 		mov	r3, #20480
 110 00ae C4F20003 		movt	r3, 16384
 111 00b2 9A42     		cmp	r2, r3
 112 00b4 0CD1     		bne	.L7
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 113              		.loc 1 205 0
 114 00b6 4FF48010 		mov	r0, #1048576
 115 00ba 4FF00101 		mov	r1, #1
 116 00be FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 117              		.loc 1 206 0
 118 00c2 4FF48010 		mov	r0, #1048576
 119 00c6 4FF00001 		mov	r1, #0
 120 00ca FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 121 00ce 12E0     		b	.L1
 122              	.L7:
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     if (USARTx == USART6)
 123              		.loc 1 210 0
 124 00d0 7A68     		ldr	r2, [r7, #4]
 125 00d2 4FF4A053 		mov	r3, #5120
 126 00d6 C4F20103 		movt	r3, 16385
 127 00da 9A42     		cmp	r2, r3
 128 00dc 0BD1     		bne	.L1
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     { 
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 129              		.loc 1 212 0
 130 00de 4FF02000 		mov	r0, #32
 131 00e2 4FF00101 		mov	r1, #1
 132 00e6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 133              		.loc 1 213 0
 134 00ea 4FF02000 		mov	r0, #32
 135 00ee 4FF00001 		mov	r1, #0
 136 00f2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 137              	.L1:
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 138              		.loc 1 216 0
 139 00f6 07F10807 		add	r7, r7, #8
 140 00fa BD46     		mov	sp, r7
 141 00fc 80BD     		pop	{r7, pc}
 142              		.cfi_endproc
 143              	.LFE110:
 145 00fe 00BF     		.section	.text.USART_Init,"ax",%progbits
 146              		.align	2
 147              		.global	USART_Init
 148              		.thumb
 149              		.thumb_func
 151              	USART_Init:
 152              	.LFB111:
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 153              		.loc 1 228 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 40
 156              		@ frame_needed = 1, uses_anonymous_args = 0
 157 0000 80B5     		push	{r7, lr}
 158              	.LCFI3:
 159              		.cfi_def_cfa_offset 8
 160              		.cfi_offset 14, -4
 161              		.cfi_offset 7, -8
 162 0002 8AB0     		sub	sp, sp, #40
 163              	.LCFI4:
 164              		.cfi_def_cfa_offset 48
 165 0004 00AF     		add	r7, sp, #0
 166              	.LCFI5:
 167              		.cfi_def_cfa_register 7
 168 0006 7860     		str	r0, [r7, #4]
 169 0008 3960     		str	r1, [r7, #0]
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 170              		.loc 1 229 0
 171 000a 4FF00003 		mov	r3, #0
 172 000e 7B62     		str	r3, [r7, #36]
 173 0010 4FF00003 		mov	r3, #0
 174 0014 3B62     		str	r3, [r7, #32]
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 175              		.loc 1 230 0
 176 0016 4FF00003 		mov	r3, #0
 177 001a FB61     		str	r3, [r7, #28]
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 178              		.loc 1 231 0
 179 001c 4FF00003 		mov	r3, #0
 180 0020 BB61     		str	r3, [r7, #24]
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 181              		.loc 1 250 0
 182 0022 7B68     		ldr	r3, [r7, #4]
 183 0024 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 184 0026 9BB2     		uxth	r3, r3
 185 0028 7B62     		str	r3, [r7, #36]
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 186              		.loc 1 253 0
 187 002a 7B6A     		ldr	r3, [r7, #36]
 188 002c 23F44053 		bic	r3, r3, #12288
 189 0030 7B62     		str	r3, [r7, #36]
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 190              		.loc 1 257 0
 191 0032 3B68     		ldr	r3, [r7, #0]
 192 0034 DB88     		ldrh	r3, [r3, #6]
 193 0036 7A6A     		ldr	r2, [r7, #36]
 194 0038 1343     		orrs	r3, r3, r2
 195 003a 7B62     		str	r3, [r7, #36]
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 196              		.loc 1 260 0
 197 003c 7B6A     		ldr	r3, [r7, #36]
 198 003e 9AB2     		uxth	r2, r3
 199 0040 7B68     		ldr	r3, [r7, #4]
 200 0042 1A82     		strh	r2, [r3, #16]	@ movhi
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 201              		.loc 1 263 0
 202 0044 7B68     		ldr	r3, [r7, #4]
 203 0046 9B89     		ldrh	r3, [r3, #12]	@ movhi
 204 0048 9BB2     		uxth	r3, r3
 205 004a 7B62     		str	r3, [r7, #36]
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 206              		.loc 1 266 0
 207 004c 7B6A     		ldr	r3, [r7, #36]
 208 004e 23F4B053 		bic	r3, r3, #5632
 209 0052 23F00C03 		bic	r3, r3, #12
 210 0056 7B62     		str	r3, [r7, #36]
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 211              		.loc 1 272 0
 212 0058 3B68     		ldr	r3, [r7, #0]
 213 005a 9A88     		ldrh	r2, [r3, #4]
 214 005c 3B68     		ldr	r3, [r7, #0]
 215 005e 1B89     		ldrh	r3, [r3, #8]
 216 0060 1343     		orrs	r3, r3, r2
 217 0062 9AB2     		uxth	r2, r3
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 218              		.loc 1 273 0
 219 0064 3B68     		ldr	r3, [r7, #0]
 220 0066 5B89     		ldrh	r3, [r3, #10]
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 221              		.loc 1 272 0
 222 0068 1343     		orrs	r3, r3, r2
 223 006a 9BB2     		uxth	r3, r3
 224 006c 7A6A     		ldr	r2, [r7, #36]
 225 006e 1343     		orrs	r3, r3, r2
 226 0070 7B62     		str	r3, [r7, #36]
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 227              		.loc 1 276 0
 228 0072 7B6A     		ldr	r3, [r7, #36]
 229 0074 9AB2     		uxth	r2, r3
 230 0076 7B68     		ldr	r3, [r7, #4]
 231 0078 9A81     		strh	r2, [r3, #12]	@ movhi
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 232              		.loc 1 279 0
 233 007a 7B68     		ldr	r3, [r7, #4]
 234 007c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 235 007e 9BB2     		uxth	r3, r3
 236 0080 7B62     		str	r3, [r7, #36]
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 237              		.loc 1 282 0
 238 0082 7B6A     		ldr	r3, [r7, #36]
 239 0084 23F44073 		bic	r3, r3, #768
 240 0088 7B62     		str	r3, [r7, #36]
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 241              		.loc 1 286 0
 242 008a 3B68     		ldr	r3, [r7, #0]
 243 008c 9B89     		ldrh	r3, [r3, #12]
 244 008e 7A6A     		ldr	r2, [r7, #36]
 245 0090 1343     		orrs	r3, r3, r2
 246 0092 7B62     		str	r3, [r7, #36]
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 247              		.loc 1 289 0
 248 0094 7B6A     		ldr	r3, [r7, #36]
 249 0096 9AB2     		uxth	r2, r3
 250 0098 7B68     		ldr	r3, [r7, #4]
 251 009a 9A82     		strh	r2, [r3, #20]	@ movhi
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 252              		.loc 1 293 0
 253 009c 07F10803 		add	r3, r7, #8
 254 00a0 1846     		mov	r0, r3
 255 00a2 FFF7FEFF 		bl	RCC_GetClocksFreq
 294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 256              		.loc 1 295 0
 257 00a6 7A68     		ldr	r2, [r7, #4]
 258 00a8 4FF48053 		mov	r3, #4096
 259 00ac C4F20103 		movt	r3, 16385
 260 00b0 9A42     		cmp	r2, r3
 261 00b2 06D0     		beq	.L9
 262              		.loc 1 295 0 is_stmt 0 discriminator 1
 263 00b4 7A68     		ldr	r2, [r7, #4]
 264 00b6 4FF4A053 		mov	r3, #5120
 265 00ba C4F20103 		movt	r3, 16385
 266 00be 9A42     		cmp	r2, r3
 267 00c0 02D1     		bne	.L10
 268              	.L9:
 296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 269              		.loc 1 297 0 is_stmt 1
 270 00c2 7B69     		ldr	r3, [r7, #20]
 271 00c4 3B62     		str	r3, [r7, #32]
 272 00c6 01E0     		b	.L11
 273              	.L10:
 298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 274              		.loc 1 301 0
 275 00c8 3B69     		ldr	r3, [r7, #16]
 276 00ca 3B62     		str	r3, [r7, #32]
 277              	.L11:
 302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 278              		.loc 1 305 0
 279 00cc 7B68     		ldr	r3, [r7, #4]
 280 00ce 9B89     		ldrh	r3, [r3, #12]	@ movhi
 281 00d0 9BB2     		uxth	r3, r3
 282 00d2 9BB2     		uxth	r3, r3
 283 00d4 1BB2     		sxth	r3, r3
 284 00d6 002B     		cmp	r3, #0
 285 00d8 0FDA     		bge	.L12
 306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 286              		.loc 1 308 0
 287 00da 3A6A     		ldr	r2, [r7, #32]
 288 00dc 1346     		mov	r3, r2
 289 00de 4FEA8303 		lsl	r3, r3, #2
 290 00e2 9B18     		adds	r3, r3, r2
 291 00e4 4FEA8302 		lsl	r2, r3, #2
 292 00e8 9A18     		adds	r2, r3, r2
 293 00ea 3B68     		ldr	r3, [r7, #0]
 294 00ec 1B68     		ldr	r3, [r3, #0]
 295 00ee 4FEA4303 		lsl	r3, r3, #1
 296 00f2 B2FBF3F3 		udiv	r3, r2, r3
 297 00f6 FB61     		str	r3, [r7, #28]
 298 00f8 0EE0     		b	.L13
 299              	.L12:
 309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 300              		.loc 1 313 0
 301 00fa 3A6A     		ldr	r2, [r7, #32]
 302 00fc 1346     		mov	r3, r2
 303 00fe 4FEA8303 		lsl	r3, r3, #2
 304 0102 9B18     		adds	r3, r3, r2
 305 0104 4FEA8302 		lsl	r2, r3, #2
 306 0108 9A18     		adds	r2, r3, r2
 307 010a 3B68     		ldr	r3, [r7, #0]
 308 010c 1B68     		ldr	r3, [r3, #0]
 309 010e 4FEA8303 		lsl	r3, r3, #2
 310 0112 B2FBF3F3 		udiv	r3, r2, r3
 311 0116 FB61     		str	r3, [r7, #28]
 312              	.L13:
 314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 313              		.loc 1 315 0
 314 0118 FA69     		ldr	r2, [r7, #28]
 315 011a 48F21F53 		movw	r3, #34079
 316 011e C5F2EB13 		movt	r3, 20971
 317 0122 A3FB0213 		umull	r1, r3, r3, r2
 318 0126 4FEA5313 		lsr	r3, r3, #5
 319 012a 4FEA0313 		lsl	r3, r3, #4
 320 012e 7B62     		str	r3, [r7, #36]
 316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 321              		.loc 1 318 0
 322 0130 7B6A     		ldr	r3, [r7, #36]
 323 0132 4FEA1313 		lsr	r3, r3, #4
 324 0136 4FF06402 		mov	r2, #100
 325 013a 02FB03F3 		mul	r3, r2, r3
 326 013e FA69     		ldr	r2, [r7, #28]
 327 0140 D31A     		subs	r3, r2, r3
 328 0142 BB61     		str	r3, [r7, #24]
 319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 329              		.loc 1 321 0
 330 0144 7B68     		ldr	r3, [r7, #4]
 331 0146 9B89     		ldrh	r3, [r3, #12]	@ movhi
 332 0148 9BB2     		uxth	r3, r3
 333 014a 9BB2     		uxth	r3, r3
 334 014c 1BB2     		sxth	r3, r3
 335 014e 002B     		cmp	r3, #0
 336 0150 12DA     		bge	.L14
 322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 337              		.loc 1 323 0
 338 0152 BB69     		ldr	r3, [r7, #24]
 339 0154 4FEAC303 		lsl	r3, r3, #3
 340 0158 03F13202 		add	r2, r3, #50
 341 015c 48F21F53 		movw	r3, #34079
 342 0160 C5F2EB13 		movt	r3, 20971
 343 0164 A3FB0213 		umull	r1, r3, r3, r2
 344 0168 4FEA5313 		lsr	r3, r3, #5
 345 016c 03F00703 		and	r3, r3, #7
 346 0170 7A6A     		ldr	r2, [r7, #36]
 347 0172 1343     		orrs	r3, r3, r2
 348 0174 7B62     		str	r3, [r7, #36]
 349 0176 11E0     		b	.L15
 350              	.L14:
 324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 351              		.loc 1 327 0
 352 0178 BB69     		ldr	r3, [r7, #24]
 353 017a 4FEA0313 		lsl	r3, r3, #4
 354 017e 03F13202 		add	r2, r3, #50
 355 0182 48F21F53 		movw	r3, #34079
 356 0186 C5F2EB13 		movt	r3, 20971
 357 018a A3FB0213 		umull	r1, r3, r3, r2
 358 018e 4FEA5313 		lsr	r3, r3, #5
 359 0192 03F00F03 		and	r3, r3, #15
 360 0196 7A6A     		ldr	r2, [r7, #36]
 361 0198 1343     		orrs	r3, r3, r2
 362 019a 7B62     		str	r3, [r7, #36]
 363              	.L15:
 328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 364              		.loc 1 331 0
 365 019c 7B6A     		ldr	r3, [r7, #36]
 366 019e 9AB2     		uxth	r2, r3
 367 01a0 7B68     		ldr	r3, [r7, #4]
 368 01a2 1A81     		strh	r2, [r3, #8]	@ movhi
 332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 369              		.loc 1 332 0
 370 01a4 07F12807 		add	r7, r7, #40
 371 01a8 BD46     		mov	sp, r7
 372 01aa 80BD     		pop	{r7, pc}
 373              		.cfi_endproc
 374              	.LFE111:
 376              		.section	.text.USART_StructInit,"ax",%progbits
 377              		.align	2
 378              		.global	USART_StructInit
 379              		.thumb
 380              		.thumb_func
 382              	USART_StructInit:
 383              	.LFB112:
 333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         be initialized.
 338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 384              		.loc 1 341 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 8
 387              		@ frame_needed = 1, uses_anonymous_args = 0
 388              		@ link register save eliminated.
 389 0000 80B4     		push	{r7}
 390              	.LCFI6:
 391              		.cfi_def_cfa_offset 4
 392              		.cfi_offset 7, -4
 393 0002 83B0     		sub	sp, sp, #12
 394              	.LCFI7:
 395              		.cfi_def_cfa_offset 16
 396 0004 00AF     		add	r7, sp, #0
 397              	.LCFI8:
 398              		.cfi_def_cfa_register 7
 399 0006 7860     		str	r0, [r7, #4]
 342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 400              		.loc 1 343 0
 401 0008 7B68     		ldr	r3, [r7, #4]
 402 000a 4FF41652 		mov	r2, #9600
 403 000e 1A60     		str	r2, [r3, #0]
 344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 404              		.loc 1 344 0
 405 0010 7B68     		ldr	r3, [r7, #4]
 406 0012 4FF00002 		mov	r2, #0
 407 0016 9A80     		strh	r2, [r3, #4]	@ movhi
 345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 408              		.loc 1 345 0
 409 0018 7B68     		ldr	r3, [r7, #4]
 410 001a 4FF00002 		mov	r2, #0
 411 001e DA80     		strh	r2, [r3, #6]	@ movhi
 346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 412              		.loc 1 346 0
 413 0020 7B68     		ldr	r3, [r7, #4]
 414 0022 4FF00002 		mov	r2, #0
 415 0026 1A81     		strh	r2, [r3, #8]	@ movhi
 347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 416              		.loc 1 347 0
 417 0028 7B68     		ldr	r3, [r7, #4]
 418 002a 4FF00C02 		mov	r2, #12
 419 002e 5A81     		strh	r2, [r3, #10]	@ movhi
 348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 420              		.loc 1 348 0
 421 0030 7B68     		ldr	r3, [r7, #4]
 422 0032 4FF00002 		mov	r2, #0
 423 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 424              		.loc 1 349 0
 425 0038 07F10C07 		add	r7, r7, #12
 426 003c BD46     		mov	sp, r7
 427 003e 80BC     		pop	{r7}
 428 0040 7047     		bx	lr
 429              		.cfi_endproc
 430              	.LFE112:
 432 0042 00BF     		.section	.text.USART_ClockInit,"ax",%progbits
 433              		.align	2
 434              		.global	USART_ClockInit
 435              		.thumb
 436              		.thumb_func
 438              	USART_ClockInit:
 439              	.LFB113:
 350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 440              		.loc 1 361 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 16
 443              		@ frame_needed = 1, uses_anonymous_args = 0
 444              		@ link register save eliminated.
 445 0000 80B4     		push	{r7}
 446              	.LCFI9:
 447              		.cfi_def_cfa_offset 4
 448              		.cfi_offset 7, -4
 449 0002 85B0     		sub	sp, sp, #20
 450              	.LCFI10:
 451              		.cfi_def_cfa_offset 24
 452 0004 00AF     		add	r7, sp, #0
 453              	.LCFI11:
 454              		.cfi_def_cfa_register 7
 455 0006 7860     		str	r0, [r7, #4]
 456 0008 3960     		str	r1, [r7, #0]
 362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 457              		.loc 1 362 0
 458 000a 4FF00003 		mov	r3, #0
 459 000e FB60     		str	r3, [r7, #12]
 363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 460              		.loc 1 371 0
 461 0010 7B68     		ldr	r3, [r7, #4]
 462 0012 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 463 0014 9BB2     		uxth	r3, r3
 464 0016 FB60     		str	r3, [r7, #12]
 372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 465              		.loc 1 373 0
 466 0018 FB68     		ldr	r3, [r7, #12]
 467 001a 23F47063 		bic	r3, r3, #3840
 468 001e FB60     		str	r3, [r7, #12]
 374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 469              		.loc 1 379 0
 470 0020 3B68     		ldr	r3, [r7, #0]
 471 0022 1A88     		ldrh	r2, [r3, #0]
 472 0024 3B68     		ldr	r3, [r7, #0]
 473 0026 5B88     		ldrh	r3, [r3, #2]
 380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 474              		.loc 1 380 0
 475 0028 1343     		orrs	r3, r3, r2
 476 002a 9AB2     		uxth	r2, r3
 477 002c 3B68     		ldr	r3, [r7, #0]
 478 002e 9B88     		ldrh	r3, [r3, #4]
 479 0030 1343     		orrs	r3, r3, r2
 480 0032 9AB2     		uxth	r2, r3
 481 0034 3B68     		ldr	r3, [r7, #0]
 482 0036 DB88     		ldrh	r3, [r3, #6]
 483 0038 1343     		orrs	r3, r3, r2
 484 003a 9BB2     		uxth	r3, r3
 379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 485              		.loc 1 379 0
 486 003c FA68     		ldr	r2, [r7, #12]
 487 003e 1343     		orrs	r3, r3, r2
 488 0040 FB60     		str	r3, [r7, #12]
 381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 489              		.loc 1 382 0
 490 0042 FB68     		ldr	r3, [r7, #12]
 491 0044 9AB2     		uxth	r2, r3
 492 0046 7B68     		ldr	r3, [r7, #4]
 493 0048 1A82     		strh	r2, [r3, #16]	@ movhi
 383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 494              		.loc 1 383 0
 495 004a 07F11407 		add	r7, r7, #20
 496 004e BD46     		mov	sp, r7
 497 0050 80BC     		pop	{r7}
 498 0052 7047     		bx	lr
 499              		.cfi_endproc
 500              	.LFE113:
 502              		.section	.text.USART_ClockStructInit,"ax",%progbits
 503              		.align	2
 504              		.global	USART_ClockStructInit
 505              		.thumb
 506              		.thumb_func
 508              	USART_ClockStructInit:
 509              	.LFB114:
 384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         which will be initialized.
 389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 510              		.loc 1 392 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 8
 513              		@ frame_needed = 1, uses_anonymous_args = 0
 514              		@ link register save eliminated.
 515 0000 80B4     		push	{r7}
 516              	.LCFI12:
 517              		.cfi_def_cfa_offset 4
 518              		.cfi_offset 7, -4
 519 0002 83B0     		sub	sp, sp, #12
 520              	.LCFI13:
 521              		.cfi_def_cfa_offset 16
 522 0004 00AF     		add	r7, sp, #0
 523              	.LCFI14:
 524              		.cfi_def_cfa_register 7
 525 0006 7860     		str	r0, [r7, #4]
 393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 526              		.loc 1 394 0
 527 0008 7B68     		ldr	r3, [r7, #4]
 528 000a 4FF00002 		mov	r2, #0
 529 000e 1A80     		strh	r2, [r3, #0]	@ movhi
 395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 530              		.loc 1 395 0
 531 0010 7B68     		ldr	r3, [r7, #4]
 532 0012 4FF00002 		mov	r2, #0
 533 0016 5A80     		strh	r2, [r3, #2]	@ movhi
 396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 534              		.loc 1 396 0
 535 0018 7B68     		ldr	r3, [r7, #4]
 536 001a 4FF00002 		mov	r2, #0
 537 001e 9A80     		strh	r2, [r3, #4]	@ movhi
 397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 538              		.loc 1 397 0
 539 0020 7B68     		ldr	r3, [r7, #4]
 540 0022 4FF00002 		mov	r2, #0
 541 0026 DA80     		strh	r2, [r3, #6]	@ movhi
 398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 542              		.loc 1 398 0
 543 0028 07F10C07 		add	r7, r7, #12
 544 002c BD46     		mov	sp, r7
 545 002e 80BC     		pop	{r7}
 546 0030 7047     		bx	lr
 547              		.cfi_endproc
 548              	.LFE114:
 550 0032 00BF     		.section	.text.USART_Cmd,"ax",%progbits
 551              		.align	2
 552              		.global	USART_Cmd
 553              		.thumb
 554              		.thumb_func
 556              	USART_Cmd:
 557              	.LFB115:
 399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 558              		.loc 1 409 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 8
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562              		@ link register save eliminated.
 563 0000 80B4     		push	{r7}
 564              	.LCFI15:
 565              		.cfi_def_cfa_offset 4
 566              		.cfi_offset 7, -4
 567 0002 83B0     		sub	sp, sp, #12
 568              	.LCFI16:
 569              		.cfi_def_cfa_offset 16
 570 0004 00AF     		add	r7, sp, #0
 571              	.LCFI17:
 572              		.cfi_def_cfa_register 7
 573 0006 7860     		str	r0, [r7, #4]
 574 0008 0B46     		mov	r3, r1
 575 000a FB70     		strb	r3, [r7, #3]
 410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 576              		.loc 1 414 0
 577 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 578 000e 002B     		cmp	r3, #0
 579 0010 08D0     		beq	.L20
 415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 580              		.loc 1 417 0
 581 0012 7B68     		ldr	r3, [r7, #4]
 582 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 583 0016 9BB2     		uxth	r3, r3
 584 0018 43F40053 		orr	r3, r3, #8192
 585 001c 9AB2     		uxth	r2, r3
 586 001e 7B68     		ldr	r3, [r7, #4]
 587 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 588 0022 07E0     		b	.L19
 589              	.L20:
 418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 590              		.loc 1 422 0
 591 0024 7B68     		ldr	r3, [r7, #4]
 592 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 593 0028 9BB2     		uxth	r3, r3
 594 002a 23F40053 		bic	r3, r3, #8192
 595 002e 9AB2     		uxth	r2, r3
 596 0030 7B68     		ldr	r3, [r7, #4]
 597 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 598              	.L19:
 423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 599              		.loc 1 424 0
 600 0034 07F10C07 		add	r7, r7, #12
 601 0038 BD46     		mov	sp, r7
 602 003a 80BC     		pop	{r7}
 603 003c 7047     		bx	lr
 604              		.cfi_endproc
 605              	.LFE115:
 607 003e 00BF     		.section	.text.USART_SetPrescaler,"ax",%progbits
 608              		.align	2
 609              		.global	USART_SetPrescaler
 610              		.thumb
 611              		.thumb_func
 613              	USART_SetPrescaler:
 614              	.LFB116:
 425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** { 
 615              		.loc 1 435 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 8
 618              		@ frame_needed = 1, uses_anonymous_args = 0
 619              		@ link register save eliminated.
 620 0000 80B4     		push	{r7}
 621              	.LCFI18:
 622              		.cfi_def_cfa_offset 4
 623              		.cfi_offset 7, -4
 624 0002 83B0     		sub	sp, sp, #12
 625              	.LCFI19:
 626              		.cfi_def_cfa_offset 16
 627 0004 00AF     		add	r7, sp, #0
 628              	.LCFI20:
 629              		.cfi_def_cfa_register 7
 630 0006 7860     		str	r0, [r7, #4]
 631 0008 0B46     		mov	r3, r1
 632 000a FB70     		strb	r3, [r7, #3]
 436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 633              		.loc 1 440 0
 634 000c 7B68     		ldr	r3, [r7, #4]
 635 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 636 0010 9BB2     		uxth	r3, r3
 637 0012 23F0FF03 		bic	r3, r3, #255
 638 0016 9AB2     		uxth	r2, r3
 639 0018 7B68     		ldr	r3, [r7, #4]
 640 001a 1A83     		strh	r2, [r3, #24]	@ movhi
 441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 641              		.loc 1 442 0
 642 001c 7B68     		ldr	r3, [r7, #4]
 643 001e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 644 0020 9AB2     		uxth	r2, r3
 645 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 646 0024 9BB2     		uxth	r3, r3
 647 0026 1343     		orrs	r3, r3, r2
 648 0028 9AB2     		uxth	r2, r3
 649 002a 7B68     		ldr	r3, [r7, #4]
 650 002c 1A83     		strh	r2, [r3, #24]	@ movhi
 443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 651              		.loc 1 443 0
 652 002e 07F10C07 		add	r7, r7, #12
 653 0032 BD46     		mov	sp, r7
 654 0034 80BC     		pop	{r7}
 655 0036 7047     		bx	lr
 656              		.cfi_endproc
 657              	.LFE116:
 659              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 660              		.align	2
 661              		.global	USART_OverSampling8Cmd
 662              		.thumb
 663              		.thumb_func
 665              	USART_OverSampling8Cmd:
 666              	.LFB117:
 444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 446:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 447:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 448:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 449:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 450:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 451:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 452:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 453:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 454:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 455:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 456:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 667              		.loc 1 456 0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 8
 670              		@ frame_needed = 1, uses_anonymous_args = 0
 671              		@ link register save eliminated.
 672 0000 80B4     		push	{r7}
 673              	.LCFI21:
 674              		.cfi_def_cfa_offset 4
 675              		.cfi_offset 7, -4
 676 0002 83B0     		sub	sp, sp, #12
 677              	.LCFI22:
 678              		.cfi_def_cfa_offset 16
 679 0004 00AF     		add	r7, sp, #0
 680              	.LCFI23:
 681              		.cfi_def_cfa_register 7
 682 0006 7860     		str	r0, [r7, #4]
 683 0008 0B46     		mov	r3, r1
 684 000a FB70     		strb	r3, [r7, #3]
 457:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 458:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 459:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 460:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 461:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 685              		.loc 1 461 0
 686 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 687 000e 002B     		cmp	r3, #0
 688 0010 0AD0     		beq	.L24
 462:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 463:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 464:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 689              		.loc 1 464 0
 690 0012 7B68     		ldr	r3, [r7, #4]
 691 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 692 0016 9BB2     		uxth	r3, r3
 693 0018 6FEA4343 		mvn	r3, r3, lsl #17
 694 001c 6FEA5343 		mvn	r3, r3, lsr #17
 695 0020 9AB2     		uxth	r2, r3
 696 0022 7B68     		ldr	r3, [r7, #4]
 697 0024 9A81     		strh	r2, [r3, #12]	@ movhi
 698 0026 09E0     		b	.L23
 699              	.L24:
 465:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 466:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 467:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 468:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 469:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 700              		.loc 1 469 0
 701 0028 7B68     		ldr	r3, [r7, #4]
 702 002a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 703 002c 9BB2     		uxth	r3, r3
 704 002e 4FEA4343 		lsl	r3, r3, #17
 705 0032 4FEA5343 		lsr	r3, r3, #17
 706 0036 9AB2     		uxth	r2, r3
 707 0038 7B68     		ldr	r3, [r7, #4]
 708 003a 9A81     		strh	r2, [r3, #12]	@ movhi
 709              	.L23:
 470:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 471:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }  
 710              		.loc 1 471 0
 711 003c 07F10C07 		add	r7, r7, #12
 712 0040 BD46     		mov	sp, r7
 713 0042 80BC     		pop	{r7}
 714 0044 7047     		bx	lr
 715              		.cfi_endproc
 716              	.LFE117:
 718 0046 00BF     		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 719              		.align	2
 720              		.global	USART_OneBitMethodCmd
 721              		.thumb
 722              		.thumb_func
 724              	USART_OneBitMethodCmd:
 725              	.LFB118:
 472:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 473:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 474:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 475:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 476:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 477:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 478:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 479:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 480:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 481:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 482:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 726              		.loc 1 482 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 8
 729              		@ frame_needed = 1, uses_anonymous_args = 0
 730              		@ link register save eliminated.
 731 0000 80B4     		push	{r7}
 732              	.LCFI24:
 733              		.cfi_def_cfa_offset 4
 734              		.cfi_offset 7, -4
 735 0002 83B0     		sub	sp, sp, #12
 736              	.LCFI25:
 737              		.cfi_def_cfa_offset 16
 738 0004 00AF     		add	r7, sp, #0
 739              	.LCFI26:
 740              		.cfi_def_cfa_register 7
 741 0006 7860     		str	r0, [r7, #4]
 742 0008 0B46     		mov	r3, r1
 743 000a FB70     		strb	r3, [r7, #3]
 483:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 484:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 485:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 487:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 744              		.loc 1 487 0
 745 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 746 000e 002B     		cmp	r3, #0
 747 0010 08D0     		beq	.L27
 488:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 489:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 490:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 748              		.loc 1 490 0
 749 0012 7B68     		ldr	r3, [r7, #4]
 750 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 751 0016 9BB2     		uxth	r3, r3
 752 0018 43F40063 		orr	r3, r3, #2048
 753 001c 9AB2     		uxth	r2, r3
 754 001e 7B68     		ldr	r3, [r7, #4]
 755 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 756 0022 07E0     		b	.L26
 757              	.L27:
 491:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 492:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 493:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 494:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 495:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 758              		.loc 1 495 0
 759 0024 7B68     		ldr	r3, [r7, #4]
 760 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 761 0028 9BB2     		uxth	r3, r3
 762 002a 23F40063 		bic	r3, r3, #2048
 763 002e 9AB2     		uxth	r2, r3
 764 0030 7B68     		ldr	r3, [r7, #4]
 765 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 766              	.L26:
 496:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 497:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 767              		.loc 1 497 0
 768 0034 07F10C07 		add	r7, r7, #12
 769 0038 BD46     		mov	sp, r7
 770 003a 80BC     		pop	{r7}
 771 003c 7047     		bx	lr
 772              		.cfi_endproc
 773              	.LFE118:
 775 003e 00BF     		.section	.text.USART_SendData,"ax",%progbits
 776              		.align	2
 777              		.global	USART_SendData
 778              		.thumb
 779              		.thumb_func
 781              	USART_SendData:
 782              	.LFB119:
 498:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 499:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 500:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 501:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 502:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 503:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 504:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 505:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 506:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 507:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 508:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             Data transfers functions
 509:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 510:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 511:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART data 
 512:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   transfers.
 513:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 514:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   During an USART reception, data shifts in least significant bit first through 
 515:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 516:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   between the internal bus and the received shift register.
 517:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 518:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   When a transmission is taking place, a write instruction to the USART_DR register 
 519:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   stores the data in the TDR register and which is copied in the shift register 
 520:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   at the end of the current transmission.
 521:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 522:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The read access of the USART_DR register can be done using the USART_ReceiveData()
 523:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 524:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   can be done using USART_SendData() function and stores the written data into 
 525:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   TDR buffer.
 526:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 527:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 528:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 529:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 530:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 531:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 532:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 533:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 534:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 535:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 536:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 537:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 538:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 539:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 783              		.loc 1 539 0
 784              		.cfi_startproc
 785              		@ args = 0, pretend = 0, frame = 8
 786              		@ frame_needed = 1, uses_anonymous_args = 0
 787              		@ link register save eliminated.
 788 0000 80B4     		push	{r7}
 789              	.LCFI27:
 790              		.cfi_def_cfa_offset 4
 791              		.cfi_offset 7, -4
 792 0002 83B0     		sub	sp, sp, #12
 793              	.LCFI28:
 794              		.cfi_def_cfa_offset 16
 795 0004 00AF     		add	r7, sp, #0
 796              	.LCFI29:
 797              		.cfi_def_cfa_register 7
 798 0006 7860     		str	r0, [r7, #4]
 799 0008 0B46     		mov	r3, r1
 800 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 540:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 541:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 542:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 543:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 544:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Transmit Data */
 545:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 801              		.loc 1 545 0
 802 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 803 000e 4FEAC353 		lsl	r3, r3, #23
 804 0012 4FEAD353 		lsr	r3, r3, #23
 805 0016 9AB2     		uxth	r2, r3
 806 0018 7B68     		ldr	r3, [r7, #4]
 807 001a 9A80     		strh	r2, [r3, #4]	@ movhi
 546:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 808              		.loc 1 546 0
 809 001c 07F10C07 		add	r7, r7, #12
 810 0020 BD46     		mov	sp, r7
 811 0022 80BC     		pop	{r7}
 812 0024 7047     		bx	lr
 813              		.cfi_endproc
 814              	.LFE119:
 816 0026 00BF     		.section	.text.USART_ReceiveData,"ax",%progbits
 817              		.align	2
 818              		.global	USART_ReceiveData
 819              		.thumb
 820              		.thumb_func
 822              	USART_ReceiveData:
 823              	.LFB120:
 547:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 548:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 549:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 550:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 551:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 552:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The received data.
 553:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 554:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 555:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 824              		.loc 1 555 0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 8
 827              		@ frame_needed = 1, uses_anonymous_args = 0
 828              		@ link register save eliminated.
 829 0000 80B4     		push	{r7}
 830              	.LCFI30:
 831              		.cfi_def_cfa_offset 4
 832              		.cfi_offset 7, -4
 833 0002 83B0     		sub	sp, sp, #12
 834              	.LCFI31:
 835              		.cfi_def_cfa_offset 16
 836 0004 00AF     		add	r7, sp, #0
 837              	.LCFI32:
 838              		.cfi_def_cfa_register 7
 839 0006 7860     		str	r0, [r7, #4]
 556:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 557:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 558:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 559:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Receive Data */
 560:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 840              		.loc 1 560 0
 841 0008 7B68     		ldr	r3, [r7, #4]
 842 000a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 843 000c 9BB2     		uxth	r3, r3
 844 000e 4FEAC353 		lsl	r3, r3, #23
 845 0012 4FEAD353 		lsr	r3, r3, #23
 846 0016 9BB2     		uxth	r3, r3
 561:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 847              		.loc 1 561 0
 848 0018 1846     		mov	r0, r3
 849 001a 07F10C07 		add	r7, r7, #12
 850 001e BD46     		mov	sp, r7
 851 0020 80BC     		pop	{r7}
 852 0022 7047     		bx	lr
 853              		.cfi_endproc
 854              	.LFE120:
 856              		.section	.text.USART_SetAddress,"ax",%progbits
 857              		.align	2
 858              		.global	USART_SetAddress
 859              		.thumb
 860              		.thumb_func
 862              	USART_SetAddress:
 863              	.LFB121:
 562:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 563:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 564:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 565:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 566:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 567:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 568:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 569:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 570:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 571:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 572:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                     Multi-Processor Communication functions
 573:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 574:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 575:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 576:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   multiprocessor communication.
 577:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 578:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   For instance one of the USARTs can be the master, its TX output is connected to 
 579:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX input of the other USART. The others are slaves, their respective TX outputs 
 580:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   are logically ANDed together and connected to the RX input of the master.
 581:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 582:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART multiprocessor communication is possible through the following procedure:
 583:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode transmitter 
 584:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 585:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 586:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 587:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 588:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using USART_WakeUpConfig() function only for the slaves.
 589:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the USART using the USART_Cmd() function.
 590:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 591:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 592:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART Slave exit from mute mode when receive the wake up condition.
 593:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 594:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 595:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 596:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 597:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 598:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 599:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 600:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 601:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 602:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 603:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 604:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 605:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 606:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 864              		.loc 1 606 0
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 8
 867              		@ frame_needed = 1, uses_anonymous_args = 0
 868              		@ link register save eliminated.
 869 0000 80B4     		push	{r7}
 870              	.LCFI33:
 871              		.cfi_def_cfa_offset 4
 872              		.cfi_offset 7, -4
 873 0002 83B0     		sub	sp, sp, #12
 874              	.LCFI34:
 875              		.cfi_def_cfa_offset 16
 876 0004 00AF     		add	r7, sp, #0
 877              	.LCFI35:
 878              		.cfi_def_cfa_register 7
 879 0006 7860     		str	r0, [r7, #4]
 880 0008 0B46     		mov	r3, r1
 881 000a FB70     		strb	r3, [r7, #3]
 607:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 608:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 609:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 610:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 611:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 612:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 882              		.loc 1 612 0
 883 000c 7B68     		ldr	r3, [r7, #4]
 884 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 885 0010 9BB2     		uxth	r3, r3
 886 0012 23F00F03 		bic	r3, r3, #15
 887 0016 9AB2     		uxth	r2, r3
 888 0018 7B68     		ldr	r3, [r7, #4]
 889 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 613:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 614:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 890              		.loc 1 614 0
 891 001c 7B68     		ldr	r3, [r7, #4]
 892 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 893 0020 9AB2     		uxth	r2, r3
 894 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 895 0024 9BB2     		uxth	r3, r3
 896 0026 1343     		orrs	r3, r3, r2
 897 0028 9AB2     		uxth	r2, r3
 898 002a 7B68     		ldr	r3, [r7, #4]
 899 002c 1A82     		strh	r2, [r3, #16]	@ movhi
 615:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 900              		.loc 1 615 0
 901 002e 07F10C07 		add	r7, r7, #12
 902 0032 BD46     		mov	sp, r7
 903 0034 80BC     		pop	{r7}
 904 0036 7047     		bx	lr
 905              		.cfi_endproc
 906              	.LFE121:
 908              		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 909              		.align	2
 910              		.global	USART_ReceiverWakeUpCmd
 911              		.thumb
 912              		.thumb_func
 914              	USART_ReceiverWakeUpCmd:
 915              	.LFB122:
 616:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 617:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 618:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 619:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 620:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 621:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 622:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 623:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 624:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 625:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 626:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 916              		.loc 1 626 0
 917              		.cfi_startproc
 918              		@ args = 0, pretend = 0, frame = 8
 919              		@ frame_needed = 1, uses_anonymous_args = 0
 920              		@ link register save eliminated.
 921 0000 80B4     		push	{r7}
 922              	.LCFI36:
 923              		.cfi_def_cfa_offset 4
 924              		.cfi_offset 7, -4
 925 0002 83B0     		sub	sp, sp, #12
 926              	.LCFI37:
 927              		.cfi_def_cfa_offset 16
 928 0004 00AF     		add	r7, sp, #0
 929              	.LCFI38:
 930              		.cfi_def_cfa_register 7
 931 0006 7860     		str	r0, [r7, #4]
 932 0008 0B46     		mov	r3, r1
 933 000a FB70     		strb	r3, [r7, #3]
 627:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 628:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 629:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 630:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 631:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 934              		.loc 1 631 0
 935 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 936 000e 002B     		cmp	r3, #0
 937 0010 08D0     		beq	.L33
 632:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 633:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 634:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 938              		.loc 1 634 0
 939 0012 7B68     		ldr	r3, [r7, #4]
 940 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 941 0016 9BB2     		uxth	r3, r3
 942 0018 43F00203 		orr	r3, r3, #2
 943 001c 9AB2     		uxth	r2, r3
 944 001e 7B68     		ldr	r3, [r7, #4]
 945 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 946 0022 07E0     		b	.L32
 947              	.L33:
 635:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 636:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 637:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 638:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 639:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 948              		.loc 1 639 0
 949 0024 7B68     		ldr	r3, [r7, #4]
 950 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 951 0028 9BB2     		uxth	r3, r3
 952 002a 23F00203 		bic	r3, r3, #2
 953 002e 9AB2     		uxth	r2, r3
 954 0030 7B68     		ldr	r3, [r7, #4]
 955 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 956              	.L32:
 640:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 641:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 957              		.loc 1 641 0
 958 0034 07F10C07 		add	r7, r7, #12
 959 0038 BD46     		mov	sp, r7
 960 003a 80BC     		pop	{r7}
 961 003c 7047     		bx	lr
 962              		.cfi_endproc
 963              	.LFE122:
 965 003e 00BF     		.section	.text.USART_WakeUpConfig,"ax",%progbits
 966              		.align	2
 967              		.global	USART_WakeUpConfig
 968              		.thumb
 969              		.thumb_func
 971              	USART_WakeUpConfig:
 972              	.LFB123:
 642:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 643:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 644:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 645:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 646:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 647:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 648:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 649:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 650:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 651:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 652:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 653:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 973              		.loc 1 653 0
 974              		.cfi_startproc
 975              		@ args = 0, pretend = 0, frame = 8
 976              		@ frame_needed = 1, uses_anonymous_args = 0
 977              		@ link register save eliminated.
 978 0000 80B4     		push	{r7}
 979              	.LCFI39:
 980              		.cfi_def_cfa_offset 4
 981              		.cfi_offset 7, -4
 982 0002 83B0     		sub	sp, sp, #12
 983              	.LCFI40:
 984              		.cfi_def_cfa_offset 16
 985 0004 00AF     		add	r7, sp, #0
 986              	.LCFI41:
 987              		.cfi_def_cfa_register 7
 988 0006 7860     		str	r0, [r7, #4]
 989 0008 0B46     		mov	r3, r1
 990 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 654:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 655:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 656:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 657:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 658:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 991              		.loc 1 658 0
 992 000c 7B68     		ldr	r3, [r7, #4]
 993 000e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 994 0010 9BB2     		uxth	r3, r3
 995 0012 23F40063 		bic	r3, r3, #2048
 996 0016 9AB2     		uxth	r2, r3
 997 0018 7B68     		ldr	r3, [r7, #4]
 998 001a 9A81     		strh	r2, [r3, #12]	@ movhi
 659:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 999              		.loc 1 659 0
 1000 001c 7B68     		ldr	r3, [r7, #4]
 1001 001e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1002 0020 9AB2     		uxth	r2, r3
 1003 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1004 0024 1343     		orrs	r3, r3, r2
 1005 0026 9AB2     		uxth	r2, r3
 1006 0028 7B68     		ldr	r3, [r7, #4]
 1007 002a 9A81     		strh	r2, [r3, #12]	@ movhi
 660:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1008              		.loc 1 660 0
 1009 002c 07F10C07 		add	r7, r7, #12
 1010 0030 BD46     		mov	sp, r7
 1011 0032 80BC     		pop	{r7}
 1012 0034 7047     		bx	lr
 1013              		.cfi_endproc
 1014              	.LFE123:
 1016 0036 00BF     		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 1017              		.align	2
 1018              		.global	USART_LINBreakDetectLengthConfig
 1019              		.thumb
 1020              		.thumb_func
 1022              	USART_LINBreakDetectLengthConfig:
 1023              	.LFB124:
 661:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 662:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 663:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 664:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 665:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 666:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 667:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 668:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 669:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 670:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 671:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 LIN mode functions
 672:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 673:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 674:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART LIN 
 675:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Mode communication.
 676:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 677:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 678:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the LIN standard.
 679:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 680:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Only this LIN Feature is supported by the USART IP:
 681:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     - LIN Master Synchronous Break send capability and LIN slave break detection
 682:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       capability :  13-bit break generation and 10/11 bit break detection
 683:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 684:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 685:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master transmitter communication is possible through the following procedure:
 686:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 687:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 688:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 689:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 690:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the LIN mode using the USART_LINCmd() function.
 691:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Send the break character using USART_SendBreak() function.
 692:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 693:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master receiver communication is possible through the following procedure:
 694:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 695:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 696:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 697:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 698:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 699:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 700:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the LIN mode using the USART_LINCmd() function.
 701:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 702:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 703:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In LIN mode, the following bits must be kept cleared:
 704:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - CLKEN in the USART_CR2 register,
 705:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 706:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 707:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 708:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 709:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 710:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 711:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 712:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 713:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 714:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 715:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 716:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 717:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 718:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 719:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 720:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 721:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 722:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1024              		.loc 1 722 0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 8
 1027              		@ frame_needed = 1, uses_anonymous_args = 0
 1028              		@ link register save eliminated.
 1029 0000 80B4     		push	{r7}
 1030              	.LCFI42:
 1031              		.cfi_def_cfa_offset 4
 1032              		.cfi_offset 7, -4
 1033 0002 83B0     		sub	sp, sp, #12
 1034              	.LCFI43:
 1035              		.cfi_def_cfa_offset 16
 1036 0004 00AF     		add	r7, sp, #0
 1037              	.LCFI44:
 1038              		.cfi_def_cfa_register 7
 1039 0006 7860     		str	r0, [r7, #4]
 1040 0008 0B46     		mov	r3, r1
 1041 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 723:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 724:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 725:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 726:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 727:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 1042              		.loc 1 727 0
 1043 000c 7B68     		ldr	r3, [r7, #4]
 1044 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1045 0010 9BB2     		uxth	r3, r3
 1046 0012 23F02003 		bic	r3, r3, #32
 1047 0016 9AB2     		uxth	r2, r3
 1048 0018 7B68     		ldr	r3, [r7, #4]
 1049 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 728:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1050              		.loc 1 728 0
 1051 001c 7B68     		ldr	r3, [r7, #4]
 1052 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1053 0020 9AB2     		uxth	r2, r3
 1054 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1055 0024 1343     		orrs	r3, r3, r2
 1056 0026 9AB2     		uxth	r2, r3
 1057 0028 7B68     		ldr	r3, [r7, #4]
 1058 002a 1A82     		strh	r2, [r3, #16]	@ movhi
 729:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1059              		.loc 1 729 0
 1060 002c 07F10C07 		add	r7, r7, #12
 1061 0030 BD46     		mov	sp, r7
 1062 0032 80BC     		pop	{r7}
 1063 0034 7047     		bx	lr
 1064              		.cfi_endproc
 1065              	.LFE124:
 1067 0036 00BF     		.section	.text.USART_LINCmd,"ax",%progbits
 1068              		.align	2
 1069              		.global	USART_LINCmd
 1070              		.thumb
 1071              		.thumb_func
 1073              	USART_LINCmd:
 1074              	.LFB125:
 730:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 731:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 732:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 733:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 734:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 735:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 736:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 737:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 738:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 739:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 740:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1075              		.loc 1 740 0
 1076              		.cfi_startproc
 1077              		@ args = 0, pretend = 0, frame = 8
 1078              		@ frame_needed = 1, uses_anonymous_args = 0
 1079              		@ link register save eliminated.
 1080 0000 80B4     		push	{r7}
 1081              	.LCFI45:
 1082              		.cfi_def_cfa_offset 4
 1083              		.cfi_offset 7, -4
 1084 0002 83B0     		sub	sp, sp, #12
 1085              	.LCFI46:
 1086              		.cfi_def_cfa_offset 16
 1087 0004 00AF     		add	r7, sp, #0
 1088              	.LCFI47:
 1089              		.cfi_def_cfa_register 7
 1090 0006 7860     		str	r0, [r7, #4]
 1091 0008 0B46     		mov	r3, r1
 1092 000a FB70     		strb	r3, [r7, #3]
 741:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 742:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 743:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 744:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 745:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1093              		.loc 1 745 0
 1094 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1095 000e 002B     		cmp	r3, #0
 1096 0010 08D0     		beq	.L38
 746:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 747:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 748:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 1097              		.loc 1 748 0
 1098 0012 7B68     		ldr	r3, [r7, #4]
 1099 0014 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1100 0016 9BB2     		uxth	r3, r3
 1101 0018 43F48043 		orr	r3, r3, #16384
 1102 001c 9AB2     		uxth	r2, r3
 1103 001e 7B68     		ldr	r3, [r7, #4]
 1104 0020 1A82     		strh	r2, [r3, #16]	@ movhi
 1105 0022 07E0     		b	.L37
 1106              	.L38:
 749:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 750:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 751:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 752:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 753:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 1107              		.loc 1 753 0
 1108 0024 7B68     		ldr	r3, [r7, #4]
 1109 0026 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1110 0028 9BB2     		uxth	r3, r3
 1111 002a 23F48043 		bic	r3, r3, #16384
 1112 002e 9AB2     		uxth	r2, r3
 1113 0030 7B68     		ldr	r3, [r7, #4]
 1114 0032 1A82     		strh	r2, [r3, #16]	@ movhi
 1115              	.L37:
 754:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 755:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1116              		.loc 1 755 0
 1117 0034 07F10C07 		add	r7, r7, #12
 1118 0038 BD46     		mov	sp, r7
 1119 003a 80BC     		pop	{r7}
 1120 003c 7047     		bx	lr
 1121              		.cfi_endproc
 1122              	.LFE125:
 1124 003e 00BF     		.section	.text.USART_SendBreak,"ax",%progbits
 1125              		.align	2
 1126              		.global	USART_SendBreak
 1127              		.thumb
 1128              		.thumb_func
 1130              	USART_SendBreak:
 1131              	.LFB126:
 756:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 757:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 758:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 759:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 760:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 761:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 762:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 763:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 764:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1132              		.loc 1 764 0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 8
 1135              		@ frame_needed = 1, uses_anonymous_args = 0
 1136              		@ link register save eliminated.
 1137 0000 80B4     		push	{r7}
 1138              	.LCFI48:
 1139              		.cfi_def_cfa_offset 4
 1140              		.cfi_offset 7, -4
 1141 0002 83B0     		sub	sp, sp, #12
 1142              	.LCFI49:
 1143              		.cfi_def_cfa_offset 16
 1144 0004 00AF     		add	r7, sp, #0
 1145              	.LCFI50:
 1146              		.cfi_def_cfa_register 7
 1147 0006 7860     		str	r0, [r7, #4]
 765:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 766:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 767:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 768:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Send break characters */
 769:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 1148              		.loc 1 769 0
 1149 0008 7B68     		ldr	r3, [r7, #4]
 1150 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1151 000c 9BB2     		uxth	r3, r3
 1152 000e 43F00103 		orr	r3, r3, #1
 1153 0012 9AB2     		uxth	r2, r3
 1154 0014 7B68     		ldr	r3, [r7, #4]
 1155 0016 9A81     		strh	r2, [r3, #12]	@ movhi
 770:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1156              		.loc 1 770 0
 1157 0018 07F10C07 		add	r7, r7, #12
 1158 001c BD46     		mov	sp, r7
 1159 001e 80BC     		pop	{r7}
 1160 0020 7047     		bx	lr
 1161              		.cfi_endproc
 1162              	.LFE126:
 1164 0022 00BF     		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 1165              		.align	2
 1166              		.global	USART_HalfDuplexCmd
 1167              		.thumb
 1168              		.thumb_func
 1170              	USART_HalfDuplexCmd:
 1171              	.LFB127:
 771:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 772:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 773:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 774:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 775:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 776:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 777:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 778:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 779:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 780:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 781:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                          Half-duplex mode function
 782:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 783:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 784:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 785:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Half-duplex communication.
 786:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 787:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can be configured to follow a single-wire half-duplex protocol where 
 788:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the TX and RX lines are internally connected.
 789:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 790:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART Half duplex communication is possible through the following procedure:
 791:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 792:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 793:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 794:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 795:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the USART using the USART_Cmd() function.
 796:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the half duplex mode using USART_HalfDuplexCmd() function.
 797:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 798:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 799:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The RX pin is no longer used
 800:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In Half-duplex mode the following bits must be kept cleared:
 801:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN and CLKEN bits in the USART_CR2 register.
 802:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and IREN bits in the USART_CR3 register.
 803:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 804:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 805:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 806:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 807:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 808:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 809:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 810:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 811:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 812:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 813:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 814:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 815:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 816:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 817:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1172              		.loc 1 817 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 8
 1175              		@ frame_needed = 1, uses_anonymous_args = 0
 1176              		@ link register save eliminated.
 1177 0000 80B4     		push	{r7}
 1178              	.LCFI51:
 1179              		.cfi_def_cfa_offset 4
 1180              		.cfi_offset 7, -4
 1181 0002 83B0     		sub	sp, sp, #12
 1182              	.LCFI52:
 1183              		.cfi_def_cfa_offset 16
 1184 0004 00AF     		add	r7, sp, #0
 1185              	.LCFI53:
 1186              		.cfi_def_cfa_register 7
 1187 0006 7860     		str	r0, [r7, #4]
 1188 0008 0B46     		mov	r3, r1
 1189 000a FB70     		strb	r3, [r7, #3]
 818:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 819:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 820:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 821:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 822:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1190              		.loc 1 822 0
 1191 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1192 000e 002B     		cmp	r3, #0
 1193 0010 08D0     		beq	.L42
 823:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 824:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 825:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 1194              		.loc 1 825 0
 1195 0012 7B68     		ldr	r3, [r7, #4]
 1196 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1197 0016 9BB2     		uxth	r3, r3
 1198 0018 43F00803 		orr	r3, r3, #8
 1199 001c 9AB2     		uxth	r2, r3
 1200 001e 7B68     		ldr	r3, [r7, #4]
 1201 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1202 0022 07E0     		b	.L41
 1203              	.L42:
 826:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 827:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 828:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 829:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 830:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 1204              		.loc 1 830 0
 1205 0024 7B68     		ldr	r3, [r7, #4]
 1206 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1207 0028 9BB2     		uxth	r3, r3
 1208 002a 23F00803 		bic	r3, r3, #8
 1209 002e 9AB2     		uxth	r2, r3
 1210 0030 7B68     		ldr	r3, [r7, #4]
 1211 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1212              	.L41:
 831:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 832:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1213              		.loc 1 832 0
 1214 0034 07F10C07 		add	r7, r7, #12
 1215 0038 BD46     		mov	sp, r7
 1216 003a 80BC     		pop	{r7}
 1217 003c 7047     		bx	lr
 1218              		.cfi_endproc
 1219              	.LFE127:
 1221 003e 00BF     		.section	.text.USART_SetGuardTime,"ax",%progbits
 1222              		.align	2
 1223              		.global	USART_SetGuardTime
 1224              		.thumb
 1225              		.thumb_func
 1227              	USART_SetGuardTime:
 1228              	.LFB128:
 833:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 834:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 835:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 836:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 837:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 838:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 839:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 840:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 841:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 842:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 843:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 844:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                Smartcard mode functions
 845:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 846:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 847:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 848:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication.
 849:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 850:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The Smartcard interface is designed to support asynchronous protocol Smartcards as
 851:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   defined in the ISO 7816-3 standard.
 852:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 853:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can provide a clock to the smartcard through the SCLK output.
 854:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In smartcard mode, SCLK is not associated to the communication but is simply derived 
 855:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   from the internal peripheral input clock through a 5-bit prescaler.
 856:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 857:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication is possible through the following procedure:
 858:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 859:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 860:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Program the USART clock using the USART_ClockInit() function as following:
 861:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock enabled
 862:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPOL Low
 863:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPHA on first edge
 864:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Last Bit Clock Enabled
 865:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Program the Smartcard interface using the USART_Init() function as following:
 866:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length = 9 Bits
 867:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - 1.5 Stop Bit
 868:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Even parity
 869:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - BaudRate = 12096 baud
 870:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control disabled (RTS and CTS signals)
 871:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Tx and Rx enabled
 872:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Optionally you can enable the parity error interrupt using the USART_ITConfig()
 873:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function
 874:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. Enable the USART using the USART_Cmd() function.
 875:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 876:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. Enable the Smartcard interface using the USART_SmartCardCmd() function.
 877:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 878:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
 879:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 880:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 881:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 882:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 883:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       between the two configurations.
 884:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In smartcard mode, the following bits must be kept cleared:
 885:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN bit in the USART_CR2 register.
 886:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - HDSEL and IREN bits in the USART_CR3 register.
 887:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Smartcard mode is available on USART peripherals only (not available on UART4 
 888:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       and UART5 peripherals).
 889:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 890:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 891:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 892:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 893:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 894:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 895:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 896:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 897:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 898:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 899:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 900:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 901:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 902:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {    
 1229              		.loc 1 902 0
 1230              		.cfi_startproc
 1231              		@ args = 0, pretend = 0, frame = 8
 1232              		@ frame_needed = 1, uses_anonymous_args = 0
 1233              		@ link register save eliminated.
 1234 0000 80B4     		push	{r7}
 1235              	.LCFI54:
 1236              		.cfi_def_cfa_offset 4
 1237              		.cfi_offset 7, -4
 1238 0002 83B0     		sub	sp, sp, #12
 1239              	.LCFI55:
 1240              		.cfi_def_cfa_offset 16
 1241 0004 00AF     		add	r7, sp, #0
 1242              	.LCFI56:
 1243              		.cfi_def_cfa_register 7
 1244 0006 7860     		str	r0, [r7, #4]
 1245 0008 0B46     		mov	r3, r1
 1246 000a FB70     		strb	r3, [r7, #3]
 903:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 904:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 905:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 906:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 907:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1247              		.loc 1 907 0
 1248 000c 7B68     		ldr	r3, [r7, #4]
 1249 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1250 0010 9BB2     		uxth	r3, r3
 1251 0012 DBB2     		uxtb	r3, r3
 1252 0014 9AB2     		uxth	r2, r3
 1253 0016 7B68     		ldr	r3, [r7, #4]
 1254 0018 1A83     		strh	r2, [r3, #24]	@ movhi
 908:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 909:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1255              		.loc 1 909 0
 1256 001a 7B68     		ldr	r3, [r7, #4]
 1257 001c 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1258 001e 9AB2     		uxth	r2, r3
 1259 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1260 0022 9BB2     		uxth	r3, r3
 1261 0024 4FEA0323 		lsl	r3, r3, #8
 1262 0028 9BB2     		uxth	r3, r3
 1263 002a 1343     		orrs	r3, r3, r2
 1264 002c 9AB2     		uxth	r2, r3
 1265 002e 7B68     		ldr	r3, [r7, #4]
 1266 0030 1A83     		strh	r2, [r3, #24]	@ movhi
 910:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1267              		.loc 1 910 0
 1268 0032 07F10C07 		add	r7, r7, #12
 1269 0036 BD46     		mov	sp, r7
 1270 0038 80BC     		pop	{r7}
 1271 003a 7047     		bx	lr
 1272              		.cfi_endproc
 1273              	.LFE128:
 1275              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 1276              		.align	2
 1277              		.global	USART_SmartCardCmd
 1278              		.thumb
 1279              		.thumb_func
 1281              	USART_SmartCardCmd:
 1282              	.LFB129:
 911:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 912:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 913:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 914:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 915:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 916:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 917:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 918:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 919:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 920:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 921:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1283              		.loc 1 921 0
 1284              		.cfi_startproc
 1285              		@ args = 0, pretend = 0, frame = 8
 1286              		@ frame_needed = 1, uses_anonymous_args = 0
 1287              		@ link register save eliminated.
 1288 0000 80B4     		push	{r7}
 1289              	.LCFI57:
 1290              		.cfi_def_cfa_offset 4
 1291              		.cfi_offset 7, -4
 1292 0002 83B0     		sub	sp, sp, #12
 1293              	.LCFI58:
 1294              		.cfi_def_cfa_offset 16
 1295 0004 00AF     		add	r7, sp, #0
 1296              	.LCFI59:
 1297              		.cfi_def_cfa_register 7
 1298 0006 7860     		str	r0, [r7, #4]
 1299 0008 0B46     		mov	r3, r1
 1300 000a FB70     		strb	r3, [r7, #3]
 922:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 923:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 924:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 925:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1301              		.loc 1 925 0
 1302 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1303 000e 002B     		cmp	r3, #0
 1304 0010 08D0     		beq	.L46
 926:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 927:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 928:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 1305              		.loc 1 928 0
 1306 0012 7B68     		ldr	r3, [r7, #4]
 1307 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1308 0016 9BB2     		uxth	r3, r3
 1309 0018 43F02003 		orr	r3, r3, #32
 1310 001c 9AB2     		uxth	r2, r3
 1311 001e 7B68     		ldr	r3, [r7, #4]
 1312 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1313 0022 07E0     		b	.L45
 1314              	.L46:
 929:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 930:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 931:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 932:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 933:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 1315              		.loc 1 933 0
 1316 0024 7B68     		ldr	r3, [r7, #4]
 1317 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1318 0028 9BB2     		uxth	r3, r3
 1319 002a 23F02003 		bic	r3, r3, #32
 1320 002e 9AB2     		uxth	r2, r3
 1321 0030 7B68     		ldr	r3, [r7, #4]
 1322 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1323              	.L45:
 934:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 935:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1324              		.loc 1 935 0
 1325 0034 07F10C07 		add	r7, r7, #12
 1326 0038 BD46     		mov	sp, r7
 1327 003a 80BC     		pop	{r7}
 1328 003c 7047     		bx	lr
 1329              		.cfi_endproc
 1330              	.LFE129:
 1332 003e 00BF     		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 1333              		.align	2
 1334              		.global	USART_SmartCardNACKCmd
 1335              		.thumb
 1336              		.thumb_func
 1338              	USART_SmartCardNACKCmd:
 1339              	.LFB130:
 936:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 937:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 938:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 939:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 940:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 941:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 942:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 943:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 944:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 945:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 946:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1340              		.loc 1 946 0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 8
 1343              		@ frame_needed = 1, uses_anonymous_args = 0
 1344              		@ link register save eliminated.
 1345 0000 80B4     		push	{r7}
 1346              	.LCFI60:
 1347              		.cfi_def_cfa_offset 4
 1348              		.cfi_offset 7, -4
 1349 0002 83B0     		sub	sp, sp, #12
 1350              	.LCFI61:
 1351              		.cfi_def_cfa_offset 16
 1352 0004 00AF     		add	r7, sp, #0
 1353              	.LCFI62:
 1354              		.cfi_def_cfa_register 7
 1355 0006 7860     		str	r0, [r7, #4]
 1356 0008 0B46     		mov	r3, r1
 1357 000a FB70     		strb	r3, [r7, #3]
 947:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 948:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 949:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 950:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1358              		.loc 1 950 0
 1359 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1360 000e 002B     		cmp	r3, #0
 1361 0010 08D0     		beq	.L49
 951:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 952:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 953:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 1362              		.loc 1 953 0
 1363 0012 7B68     		ldr	r3, [r7, #4]
 1364 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1365 0016 9BB2     		uxth	r3, r3
 1366 0018 43F01003 		orr	r3, r3, #16
 1367 001c 9AB2     		uxth	r2, r3
 1368 001e 7B68     		ldr	r3, [r7, #4]
 1369 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1370 0022 07E0     		b	.L48
 1371              	.L49:
 954:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 955:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 956:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 957:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 958:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 1372              		.loc 1 958 0
 1373 0024 7B68     		ldr	r3, [r7, #4]
 1374 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1375 0028 9BB2     		uxth	r3, r3
 1376 002a 23F01003 		bic	r3, r3, #16
 1377 002e 9AB2     		uxth	r2, r3
 1378 0030 7B68     		ldr	r3, [r7, #4]
 1379 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1380              	.L48:
 959:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 960:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1381              		.loc 1 960 0
 1382 0034 07F10C07 		add	r7, r7, #12
 1383 0038 BD46     		mov	sp, r7
 1384 003a 80BC     		pop	{r7}
 1385 003c 7047     		bx	lr
 1386              		.cfi_endproc
 1387              	.LFE130:
 1389 003e 00BF     		.section	.text.USART_IrDAConfig,"ax",%progbits
 1390              		.align	2
 1391              		.global	USART_IrDAConfig
 1392              		.thumb
 1393              		.thumb_func
 1395              	USART_IrDAConfig:
 1396              	.LFB131:
 961:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 962:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 963:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 964:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 965:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 966:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 967:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 968:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 969:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 970:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 971:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 IrDA mode functions
 972:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 973:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 974:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 975:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication.
 976:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 977:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 978:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 979:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 980:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   While receiving data, transmission should be avoided as the data to be transmitted
 981:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   could be corrupted.
 982:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 983:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication is possible through the following procedure:
 984:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
 985:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         modes and hardware flow control values using the USART_Init() function.
 986:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 987:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the IrDA pulse width by configuring the prescaler using  
 988:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_SetPrescaler() function.
 989:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
 990:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using the USART_IrDAConfig() function.
 991:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enable the IrDA using the USART_IrDACmd() function.
 992:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 993:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note A pulse of width less than two and greater than one PSC period(s) may or may
 994:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       not be rejected.
 995:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The receiver set up time should be managed by software. The IrDA physical layer
 996:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       specification specifies a minimum of 10 ms delay between transmission and 
 997:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       reception (IrDA is a half duplex protocol).
 998:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In IrDA mode, the following bits must be kept cleared:
 999:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN, STOP and CLKEN bits in the USART_CR2 register.
1000:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and HDSEL bits in the USART_CR3 register.
1001:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1002:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1003:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1004:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1005:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1006:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1007:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1008:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1009:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1010:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1011:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1012:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1013:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1014:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1015:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1016:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1017:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1397              		.loc 1 1017 0
 1398              		.cfi_startproc
 1399              		@ args = 0, pretend = 0, frame = 8
 1400              		@ frame_needed = 1, uses_anonymous_args = 0
 1401              		@ link register save eliminated.
 1402 0000 80B4     		push	{r7}
 1403              	.LCFI63:
 1404              		.cfi_def_cfa_offset 4
 1405              		.cfi_offset 7, -4
 1406 0002 83B0     		sub	sp, sp, #12
 1407              	.LCFI64:
 1408              		.cfi_def_cfa_offset 16
 1409 0004 00AF     		add	r7, sp, #0
 1410              	.LCFI65:
 1411              		.cfi_def_cfa_register 7
 1412 0006 7860     		str	r0, [r7, #4]
 1413 0008 0B46     		mov	r3, r1
 1414 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1018:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1019:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1020:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1021:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1022:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 1415              		.loc 1 1022 0
 1416 000c 7B68     		ldr	r3, [r7, #4]
 1417 000e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1418 0010 9BB2     		uxth	r3, r3
 1419 0012 23F00403 		bic	r3, r3, #4
 1420 0016 9AB2     		uxth	r2, r3
 1421 0018 7B68     		ldr	r3, [r7, #4]
 1422 001a 9A82     		strh	r2, [r3, #20]	@ movhi
1023:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1423              		.loc 1 1023 0
 1424 001c 7B68     		ldr	r3, [r7, #4]
 1425 001e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1426 0020 9AB2     		uxth	r2, r3
 1427 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1428 0024 1343     		orrs	r3, r3, r2
 1429 0026 9AB2     		uxth	r2, r3
 1430 0028 7B68     		ldr	r3, [r7, #4]
 1431 002a 9A82     		strh	r2, [r3, #20]	@ movhi
1024:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1432              		.loc 1 1024 0
 1433 002c 07F10C07 		add	r7, r7, #12
 1434 0030 BD46     		mov	sp, r7
 1435 0032 80BC     		pop	{r7}
 1436 0034 7047     		bx	lr
 1437              		.cfi_endproc
 1438              	.LFE131:
 1440 0036 00BF     		.section	.text.USART_IrDACmd,"ax",%progbits
 1441              		.align	2
 1442              		.global	USART_IrDACmd
 1443              		.thumb
 1444              		.thumb_func
 1446              	USART_IrDACmd:
 1447              	.LFB132:
1025:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1026:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1027:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1028:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1029:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1030:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1031:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1032:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1033:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1034:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1035:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1448              		.loc 1 1035 0
 1449              		.cfi_startproc
 1450              		@ args = 0, pretend = 0, frame = 8
 1451              		@ frame_needed = 1, uses_anonymous_args = 0
 1452              		@ link register save eliminated.
 1453 0000 80B4     		push	{r7}
 1454              	.LCFI66:
 1455              		.cfi_def_cfa_offset 4
 1456              		.cfi_offset 7, -4
 1457 0002 83B0     		sub	sp, sp, #12
 1458              	.LCFI67:
 1459              		.cfi_def_cfa_offset 16
 1460 0004 00AF     		add	r7, sp, #0
 1461              	.LCFI68:
 1462              		.cfi_def_cfa_register 7
 1463 0006 7860     		str	r0, [r7, #4]
 1464 0008 0B46     		mov	r3, r1
 1465 000a FB70     		strb	r3, [r7, #3]
1036:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1037:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1038:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1039:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1040:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1466              		.loc 1 1040 0
 1467 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1468 000e 002B     		cmp	r3, #0
 1469 0010 08D0     		beq	.L53
1041:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1042:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1043:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1470              		.loc 1 1043 0
 1471 0012 7B68     		ldr	r3, [r7, #4]
 1472 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1473 0016 9BB2     		uxth	r3, r3
 1474 0018 43F00203 		orr	r3, r3, #2
 1475 001c 9AB2     		uxth	r2, r3
 1476 001e 7B68     		ldr	r3, [r7, #4]
 1477 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1478 0022 07E0     		b	.L52
 1479              	.L53:
1044:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1045:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1046:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1047:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1048:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 1480              		.loc 1 1048 0
 1481 0024 7B68     		ldr	r3, [r7, #4]
 1482 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1483 0028 9BB2     		uxth	r3, r3
 1484 002a 23F00203 		bic	r3, r3, #2
 1485 002e 9AB2     		uxth	r2, r3
 1486 0030 7B68     		ldr	r3, [r7, #4]
 1487 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1488              	.L52:
1049:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1050:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1489              		.loc 1 1050 0
 1490 0034 07F10C07 		add	r7, r7, #12
 1491 0038 BD46     		mov	sp, r7
 1492 003a 80BC     		pop	{r7}
 1493 003c 7047     		bx	lr
 1494              		.cfi_endproc
 1495              	.LFE132:
 1497 003e 00BF     		.section	.text.USART_DMACmd,"ax",%progbits
 1498              		.align	2
 1499              		.global	USART_DMACmd
 1500              		.thumb
 1501              		.thumb_func
 1503              	USART_DMACmd:
 1504              	.LFB133:
1051:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1052:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1053:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1054:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1055:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1056:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1057:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1058:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1059:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1060:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1061:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                       DMA transfers management functions
1062:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1063:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1064:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1065:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1066:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1067:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1068:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1069:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1070:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1071:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1072:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1073:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1074:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1075:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1076:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1077:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1078:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1079:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1080:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1081:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1505              		.loc 1 1081 0
 1506              		.cfi_startproc
 1507              		@ args = 0, pretend = 0, frame = 8
 1508              		@ frame_needed = 1, uses_anonymous_args = 0
 1509              		@ link register save eliminated.
 1510 0000 80B4     		push	{r7}
 1511              	.LCFI69:
 1512              		.cfi_def_cfa_offset 4
 1513              		.cfi_offset 7, -4
 1514 0002 83B0     		sub	sp, sp, #12
 1515              	.LCFI70:
 1516              		.cfi_def_cfa_offset 16
 1517 0004 00AF     		add	r7, sp, #0
 1518              	.LCFI71:
 1519              		.cfi_def_cfa_register 7
 1520 0006 7860     		str	r0, [r7, #4]
 1521 0008 1346     		mov	r3, r2
 1522 000a 0A46     		mov	r2, r1	@ movhi
 1523 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1524 000e 7B70     		strb	r3, [r7, #1]
1082:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1083:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1084:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1085:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1086:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1087:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1525              		.loc 1 1087 0
 1526 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1527 0012 002B     		cmp	r3, #0
 1528 0014 08D0     		beq	.L56
1088:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1089:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1090:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1091:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1529              		.loc 1 1091 0
 1530 0016 7B68     		ldr	r3, [r7, #4]
 1531 0018 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1532 001a 9AB2     		uxth	r2, r3
 1533 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1534 001e 1343     		orrs	r3, r3, r2
 1535 0020 9AB2     		uxth	r2, r3
 1536 0022 7B68     		ldr	r3, [r7, #4]
 1537 0024 9A82     		strh	r2, [r3, #20]	@ movhi
 1538 0026 0AE0     		b	.L55
 1539              	.L56:
1092:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1093:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1094:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1095:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1096:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1097:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 1540              		.loc 1 1097 0
 1541 0028 7B68     		ldr	r3, [r7, #4]
 1542 002a 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1543 002c 9AB2     		uxth	r2, r3
 1544 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1545 0030 6FEA0303 		mvn	r3, r3
 1546 0034 9BB2     		uxth	r3, r3
 1547 0036 1340     		ands	r3, r3, r2
 1548 0038 9AB2     		uxth	r2, r3
 1549 003a 7B68     		ldr	r3, [r7, #4]
 1550 003c 9A82     		strh	r2, [r3, #20]	@ movhi
 1551              	.L55:
1098:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1099:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1552              		.loc 1 1099 0
 1553 003e 07F10C07 		add	r7, r7, #12
 1554 0042 BD46     		mov	sp, r7
 1555 0044 80BC     		pop	{r7}
 1556 0046 7047     		bx	lr
 1557              		.cfi_endproc
 1558              	.LFE133:
 1560              		.section	.text.USART_ITConfig,"ax",%progbits
 1561              		.align	2
 1562              		.global	USART_ITConfig
 1563              		.thumb
 1564              		.thumb_func
 1566              	USART_ITConfig:
 1567              	.LFB134:
1100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                    Interrupts and flags management functions
1111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to configure the USART 
1114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupts sources, DMA channels requests and check or clear the flags or 
1115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   pending bits status.
1116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The user should identify which mode will be used in his application to manage 
1117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Polling Mode
1120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   =============
1121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Polling Mode, the SPI communication can be managed by 10 flags:
1122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_FLAG_TXE : to indicate the status of the transmit buffer register
1123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_FLAG_RXNE : to indicate the status of the receive buffer register
1124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_FLAG_TC : to indicate the status of the transmit operation
1125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_FLAG_IDLE : to indicate the status of the Idle Line             
1126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_FLAG_CTS : to indicate the status of the nCTS input
1127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_FLAG_LBD : to indicate the status of the LIN break detection
1128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_FLAG_NE : to indicate if a noise error occur
1129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_FLAG_FE : to indicate if a frame error occur
1130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_FLAG_PE : to indicate if a parity error occur
1131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_FLAG_ORE : to indicate if an Overrun error occur
1132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Mode
1138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ===============
1139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   and 10 pending bits: 
1141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Pending Bits:
1143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ------------- 
1144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : to indicate the status of the transmit buffer register
1145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : to indicate the status of the receive buffer register
1146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : to indicate the status of the transmit operation
1147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : to indicate the status of the Idle Line             
1148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : to indicate the status of the nCTS input
1149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : to indicate the status of the LIN break detection
1150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_NE : to indicate if a noise error occur
1151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_FE : to indicate if a frame error occur
1152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_IT_PE : to indicate if a parity error occur
1153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_IT_ORE : to indicate if an Overrun error occur
1154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Source:
1156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   -----------------
1157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         empty interrupt.
1161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : specifies the interrupt source for the Transmit complete 
1162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.             
1164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : specifies the interrupt source for the LIN break detection
1166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Some parameters are coded in order to use them as interrupt source or as pending bits.
1171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   DMA Mode
1178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ========
1179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following function:
1184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
1185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1568              		.loc 1 1209 0
 1569              		.cfi_startproc
 1570              		@ args = 0, pretend = 0, frame = 24
 1571              		@ frame_needed = 1, uses_anonymous_args = 0
 1572              		@ link register save eliminated.
 1573 0000 80B4     		push	{r7}
 1574              	.LCFI72:
 1575              		.cfi_def_cfa_offset 4
 1576              		.cfi_offset 7, -4
 1577 0002 87B0     		sub	sp, sp, #28
 1578              	.LCFI73:
 1579              		.cfi_def_cfa_offset 32
 1580 0004 00AF     		add	r7, sp, #0
 1581              	.LCFI74:
 1582              		.cfi_def_cfa_register 7
 1583 0006 7860     		str	r0, [r7, #4]
 1584 0008 1346     		mov	r3, r2
 1585 000a 0A46     		mov	r2, r1	@ movhi
 1586 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1587 000e 7B70     		strb	r3, [r7, #1]
1210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 1588              		.loc 1 1210 0
 1589 0010 4FF00003 		mov	r3, #0
 1590 0014 3B61     		str	r3, [r7, #16]
 1591 0016 4FF00003 		mov	r3, #0
 1592 001a FB60     		str	r3, [r7, #12]
 1593 001c 4FF00003 		mov	r3, #0
 1594 0020 BB60     		str	r3, [r7, #8]
1211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
 1595              		.loc 1 1211 0
 1596 0022 4FF00003 		mov	r3, #0
 1597 0026 7B61     		str	r3, [r7, #20]
1212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 1598              		.loc 1 1223 0
 1599 0028 7B68     		ldr	r3, [r7, #4]
 1600 002a 7B61     		str	r3, [r7, #20]
1224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1601              		.loc 1 1226 0
 1602 002c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1603 002e DBB2     		uxtb	r3, r3
 1604 0030 4FEA5313 		lsr	r3, r3, #5
 1605 0034 DBB2     		uxtb	r3, r3
 1606 0036 3B61     		str	r3, [r7, #16]
1227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
 1607              		.loc 1 1229 0
 1608 0038 7B88     		ldrh	r3, [r7, #2]
 1609 003a 03F01F03 		and	r3, r3, #31
 1610 003e FB60     		str	r3, [r7, #12]
1230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1611              		.loc 1 1230 0
 1612 0040 FB68     		ldr	r3, [r7, #12]
 1613 0042 4FF00102 		mov	r2, #1
 1614 0046 02FA03F3 		lsl	r3, r2, r3
 1615 004a BB60     		str	r3, [r7, #8]
1231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1616              		.loc 1 1232 0
 1617 004c 3B69     		ldr	r3, [r7, #16]
 1618 004e 012B     		cmp	r3, #1
 1619 0050 04D1     		bne	.L59
1233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
 1620              		.loc 1 1234 0
 1621 0052 7B69     		ldr	r3, [r7, #20]
 1622 0054 03F10C03 		add	r3, r3, #12
 1623 0058 7B61     		str	r3, [r7, #20]
 1624 005a 0BE0     		b	.L60
 1625              	.L59:
1235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1626              		.loc 1 1236 0
 1627 005c 3B69     		ldr	r3, [r7, #16]
 1628 005e 022B     		cmp	r3, #2
 1629 0060 04D1     		bne	.L61
1237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
 1630              		.loc 1 1238 0
 1631 0062 7B69     		ldr	r3, [r7, #20]
 1632 0064 03F11003 		add	r3, r3, #16
 1633 0068 7B61     		str	r3, [r7, #20]
 1634 006a 03E0     		b	.L60
 1635              	.L61:
1239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 1636              		.loc 1 1242 0
 1637 006c 7B69     		ldr	r3, [r7, #20]
 1638 006e 03F11403 		add	r3, r3, #20
 1639 0072 7B61     		str	r3, [r7, #20]
 1640              	.L60:
1243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1641              		.loc 1 1244 0
 1642 0074 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1643 0076 002B     		cmp	r3, #0
 1644 0078 06D0     		beq	.L62
1245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1645              		.loc 1 1246 0
 1646 007a 7B69     		ldr	r3, [r7, #20]
 1647 007c 7A69     		ldr	r2, [r7, #20]
 1648 007e 1168     		ldr	r1, [r2, #0]
 1649 0080 BA68     		ldr	r2, [r7, #8]
 1650 0082 0A43     		orrs	r2, r2, r1
 1651 0084 1A60     		str	r2, [r3, #0]
 1652 0086 07E0     		b	.L58
 1653              	.L62:
1247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1654              		.loc 1 1250 0
 1655 0088 7B69     		ldr	r3, [r7, #20]
 1656 008a 7A69     		ldr	r2, [r7, #20]
 1657 008c 1168     		ldr	r1, [r2, #0]
 1658 008e BA68     		ldr	r2, [r7, #8]
 1659 0090 6FEA0202 		mvn	r2, r2
 1660 0094 0A40     		ands	r2, r2, r1
 1661 0096 1A60     		str	r2, [r3, #0]
 1662              	.L58:
1251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1663              		.loc 1 1252 0
 1664 0098 07F11C07 		add	r7, r7, #28
 1665 009c BD46     		mov	sp, r7
 1666 009e 80BC     		pop	{r7}
 1667 00a0 7047     		bx	lr
 1668              		.cfi_endproc
 1669              	.LFE134:
 1671 00a2 00BF     		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1672              		.align	2
 1673              		.global	USART_GetFlagStatus
 1674              		.thumb
 1675              		.thumb_func
 1677              	USART_GetFlagStatus:
 1678              	.LFB135:
1253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1679              		.loc 1 1273 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 16
 1682              		@ frame_needed = 1, uses_anonymous_args = 0
 1683              		@ link register save eliminated.
 1684 0000 80B4     		push	{r7}
 1685              	.LCFI75:
 1686              		.cfi_def_cfa_offset 4
 1687              		.cfi_offset 7, -4
 1688 0002 85B0     		sub	sp, sp, #20
 1689              	.LCFI76:
 1690              		.cfi_def_cfa_offset 24
 1691 0004 00AF     		add	r7, sp, #0
 1692              	.LCFI77:
 1693              		.cfi_def_cfa_register 7
 1694 0006 7860     		str	r0, [r7, #4]
 1695 0008 0B46     		mov	r3, r1
 1696 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
 1697              		.loc 1 1274 0
 1698 000c 4FF00003 		mov	r3, #0
 1699 0010 FB73     		strb	r3, [r7, #15]
1275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1700              		.loc 1 1285 0
 1701 0012 7B68     		ldr	r3, [r7, #4]
 1702 0014 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1703 0016 9AB2     		uxth	r2, r3
 1704 0018 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1705 001a 1340     		ands	r3, r3, r2
 1706 001c 9BB2     		uxth	r3, r3
 1707 001e 002B     		cmp	r3, #0
 1708 0020 03D0     		beq	.L65
1286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1709              		.loc 1 1287 0
 1710 0022 4FF00103 		mov	r3, #1
 1711 0026 FB73     		strb	r3, [r7, #15]
 1712 0028 02E0     		b	.L66
 1713              	.L65:
1288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1714              		.loc 1 1291 0
 1715 002a 4FF00003 		mov	r3, #0
 1716 002e FB73     		strb	r3, [r7, #15]
 1717              	.L66:
1292:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1293:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;
 1718              		.loc 1 1293 0
 1719 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1294:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1720              		.loc 1 1294 0
 1721 0032 1846     		mov	r0, r3
 1722 0034 07F11407 		add	r7, r7, #20
 1723 0038 BD46     		mov	sp, r7
 1724 003a 80BC     		pop	{r7}
 1725 003c 7047     		bx	lr
 1726              		.cfi_endproc
 1727              	.LFE135:
 1729 003e 00BF     		.section	.text.USART_ClearFlag,"ax",%progbits
 1730              		.align	2
 1731              		.global	USART_ClearFlag
 1732              		.thumb
 1733              		.thumb_func
 1735              	USART_ClearFlag:
 1736              	.LFB136:
1295:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1296:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1297:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1298:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1299:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1300:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1301:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1302:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1303:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1304:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1305:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1306:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1307:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1308:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1309:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1310:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1311:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1312:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1313:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1314:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1315:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1316:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1317:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1318:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1319:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1320:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1321:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1322:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1737              		.loc 1 1322 0
 1738              		.cfi_startproc
 1739              		@ args = 0, pretend = 0, frame = 8
 1740              		@ frame_needed = 1, uses_anonymous_args = 0
 1741              		@ link register save eliminated.
 1742 0000 80B4     		push	{r7}
 1743              	.LCFI78:
 1744              		.cfi_def_cfa_offset 4
 1745              		.cfi_offset 7, -4
 1746 0002 83B0     		sub	sp, sp, #12
 1747              	.LCFI79:
 1748              		.cfi_def_cfa_offset 16
 1749 0004 00AF     		add	r7, sp, #0
 1750              	.LCFI80:
 1751              		.cfi_def_cfa_register 7
 1752 0006 7860     		str	r0, [r7, #4]
 1753 0008 0B46     		mov	r3, r1
 1754 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1323:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1324:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1325:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1326:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1327:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1328:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1329:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1330:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1331:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1332:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        
1333:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1755              		.loc 1 1333 0
 1756 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1757 000e 6FEA0303 		mvn	r3, r3
 1758 0012 9AB2     		uxth	r2, r3
 1759 0014 7B68     		ldr	r3, [r7, #4]
 1760 0016 1A80     		strh	r2, [r3, #0]	@ movhi
1334:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1761              		.loc 1 1334 0
 1762 0018 07F10C07 		add	r7, r7, #12
 1763 001c BD46     		mov	sp, r7
 1764 001e 80BC     		pop	{r7}
 1765 0020 7047     		bx	lr
 1766              		.cfi_endproc
 1767              	.LFE136:
 1769 0022 00BF     		.section	.text.USART_GetITStatus,"ax",%progbits
 1770              		.align	2
 1771              		.global	USART_GetITStatus
 1772              		.thumb
 1773              		.thumb_func
 1775              	USART_GetITStatus:
 1776              	.LFB137:
1335:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1336:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1337:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1338:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1339:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1340:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1341:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1342:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1343:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1344:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1345:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1346:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1347:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1348:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set
1349:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set  
1350:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1351:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1352:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1353:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1354:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1355:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1356:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1777              		.loc 1 1356 0
 1778              		.cfi_startproc
 1779              		@ args = 0, pretend = 0, frame = 24
 1780              		@ frame_needed = 1, uses_anonymous_args = 0
 1781              		@ link register save eliminated.
 1782 0000 80B4     		push	{r7}
 1783              	.LCFI81:
 1784              		.cfi_def_cfa_offset 4
 1785              		.cfi_offset 7, -4
 1786 0002 87B0     		sub	sp, sp, #28
 1787              	.LCFI82:
 1788              		.cfi_def_cfa_offset 32
 1789 0004 00AF     		add	r7, sp, #0
 1790              	.LCFI83:
 1791              		.cfi_def_cfa_register 7
 1792 0006 7860     		str	r0, [r7, #4]
 1793 0008 0B46     		mov	r3, r1
 1794 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1357:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 1795              		.loc 1 1357 0
 1796 000c 4FF00003 		mov	r3, #0
 1797 0010 FB60     		str	r3, [r7, #12]
 1798 0012 4FF00003 		mov	r3, #0
 1799 0016 7B61     		str	r3, [r7, #20]
 1800 0018 4FF00003 		mov	r3, #0
 1801 001c BB60     		str	r3, [r7, #8]
1358:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
 1802              		.loc 1 1358 0
 1803 001e 4FF00003 		mov	r3, #0
 1804 0022 FB74     		strb	r3, [r7, #19]
1359:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1360:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1361:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1362:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1363:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1364:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1365:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1366:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1367:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1368:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1369:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1370:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1805              		.loc 1 1370 0
 1806 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1807 0026 DBB2     		uxtb	r3, r3
 1808 0028 4FEA5313 		lsr	r3, r3, #5
 1809 002c DBB2     		uxtb	r3, r3
 1810 002e BB60     		str	r3, [r7, #8]
1371:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1372:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
 1811              		.loc 1 1372 0
 1812 0030 7B88     		ldrh	r3, [r7, #2]
 1813 0032 03F01F03 		and	r3, r3, #31
 1814 0036 7B61     		str	r3, [r7, #20]
1373:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1815              		.loc 1 1373 0
 1816 0038 7B69     		ldr	r3, [r7, #20]
 1817 003a 4FF00102 		mov	r2, #1
 1818 003e 02FA03F3 		lsl	r3, r2, r3
 1819 0042 7B61     		str	r3, [r7, #20]
1374:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1375:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1820              		.loc 1 1375 0
 1821 0044 BB68     		ldr	r3, [r7, #8]
 1822 0046 012B     		cmp	r3, #1
 1823 0048 06D1     		bne	.L69
1376:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1377:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
 1824              		.loc 1 1377 0
 1825 004a 7B68     		ldr	r3, [r7, #4]
 1826 004c 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1827 004e 9BB2     		uxth	r3, r3
 1828 0050 7A69     		ldr	r2, [r7, #20]
 1829 0052 1340     		ands	r3, r3, r2
 1830 0054 7B61     		str	r3, [r7, #20]
 1831 0056 0FE0     		b	.L70
 1832              	.L69:
1378:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1379:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1833              		.loc 1 1379 0
 1834 0058 BB68     		ldr	r3, [r7, #8]
 1835 005a 022B     		cmp	r3, #2
 1836 005c 06D1     		bne	.L71
1380:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1381:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
 1837              		.loc 1 1381 0
 1838 005e 7B68     		ldr	r3, [r7, #4]
 1839 0060 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1840 0062 9BB2     		uxth	r3, r3
 1841 0064 7A69     		ldr	r2, [r7, #20]
 1842 0066 1340     		ands	r3, r3, r2
 1843 0068 7B61     		str	r3, [r7, #20]
 1844 006a 05E0     		b	.L70
 1845              	.L71:
1382:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1383:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1384:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1385:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 1846              		.loc 1 1385 0
 1847 006c 7B68     		ldr	r3, [r7, #4]
 1848 006e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1849 0070 9BB2     		uxth	r3, r3
 1850 0072 7A69     		ldr	r2, [r7, #20]
 1851 0074 1340     		ands	r3, r3, r2
 1852 0076 7B61     		str	r3, [r7, #20]
 1853              	.L70:
1386:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1387:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1388:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1854              		.loc 1 1388 0
 1855 0078 7B88     		ldrh	r3, [r7, #2]
 1856 007a 4FEA1323 		lsr	r3, r3, #8
 1857 007e 9BB2     		uxth	r3, r3
 1858 0080 FB60     		str	r3, [r7, #12]
1389:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1859              		.loc 1 1389 0
 1860 0082 FB68     		ldr	r3, [r7, #12]
 1861 0084 4FF00102 		mov	r2, #1
 1862 0088 02FA03F3 		lsl	r3, r2, r3
 1863 008c FB60     		str	r3, [r7, #12]
1390:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 1864              		.loc 1 1390 0
 1865 008e 7B68     		ldr	r3, [r7, #4]
 1866 0090 1B88     		ldrh	r3, [r3, #0]	@ movhi
 1867 0092 9BB2     		uxth	r3, r3
 1868 0094 FA68     		ldr	r2, [r7, #12]
 1869 0096 1340     		ands	r3, r3, r2
 1870 0098 FB60     		str	r3, [r7, #12]
1391:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1871              		.loc 1 1391 0
 1872 009a 7B69     		ldr	r3, [r7, #20]
 1873 009c 002B     		cmp	r3, #0
 1874 009e 06D0     		beq	.L72
 1875              		.loc 1 1391 0 is_stmt 0 discriminator 1
 1876 00a0 FB68     		ldr	r3, [r7, #12]
 1877 00a2 002B     		cmp	r3, #0
 1878 00a4 03D0     		beq	.L72
1392:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1393:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1879              		.loc 1 1393 0 is_stmt 1
 1880 00a6 4FF00103 		mov	r3, #1
 1881 00aa FB74     		strb	r3, [r7, #19]
 1882 00ac 02E0     		b	.L73
 1883              	.L72:
1394:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1395:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1396:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1397:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1884              		.loc 1 1397 0
 1885 00ae 4FF00003 		mov	r3, #0
 1886 00b2 FB74     		strb	r3, [r7, #19]
 1887              	.L73:
1398:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1399:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1400:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;  
 1888              		.loc 1 1400 0
 1889 00b4 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1401:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1890              		.loc 1 1401 0
 1891 00b6 1846     		mov	r0, r3
 1892 00b8 07F11C07 		add	r7, r7, #28
 1893 00bc BD46     		mov	sp, r7
 1894 00be 80BC     		pop	{r7}
 1895 00c0 7047     		bx	lr
 1896              		.cfi_endproc
 1897              	.LFE137:
 1899 00c2 00BF     		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1900              		.align	2
 1901              		.global	USART_ClearITPendingBit
 1902              		.thumb
 1903              		.thumb_func
 1905              	USART_ClearITPendingBit:
 1906              	.LFB138:
1402:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1403:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1404:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1405:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1406:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1407:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1408:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1409:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1410:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1411:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1412:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1413:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
1414:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1415:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1416:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1417:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1418:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1419:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1420:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1421:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1422:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1423:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1424:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1425:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1426:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  
1427:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1428:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1429:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1430:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1907              		.loc 1 1430 0
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 16
 1910              		@ frame_needed = 1, uses_anonymous_args = 0
 1911              		@ link register save eliminated.
 1912 0000 80B4     		push	{r7}
 1913              	.LCFI84:
 1914              		.cfi_def_cfa_offset 4
 1915              		.cfi_offset 7, -4
 1916 0002 85B0     		sub	sp, sp, #20
 1917              	.LCFI85:
 1918              		.cfi_def_cfa_offset 24
 1919 0004 00AF     		add	r7, sp, #0
 1920              	.LCFI86:
 1921              		.cfi_def_cfa_register 7
 1922 0006 7860     		str	r0, [r7, #4]
 1923 0008 0B46     		mov	r3, r1
 1924 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1431:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 1925              		.loc 1 1431 0
 1926 000c 4FF00003 		mov	r3, #0
 1927 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 1928 0012 4FF00003 		mov	r3, #0
 1929 0016 BB81     		strh	r3, [r7, #12]	@ movhi
1432:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1433:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1434:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1435:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1436:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1437:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1438:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1439:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1440:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1441:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1442:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1930              		.loc 1 1442 0
 1931 0018 7B88     		ldrh	r3, [r7, #2]
 1932 001a 4FEA1323 		lsr	r3, r3, #8
 1933 001e FB81     		strh	r3, [r7, #14]	@ movhi
1443:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1934              		.loc 1 1443 0
 1935 0020 FB89     		ldrh	r3, [r7, #14]
 1936 0022 4FF00102 		mov	r2, #1
 1937 0026 02FA03F3 		lsl	r3, r2, r3
 1938 002a BB81     		strh	r3, [r7, #12]	@ movhi
1444:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 1939              		.loc 1 1444 0
 1940 002c BB89     		ldrh	r3, [r7, #12]	@ movhi
 1941 002e 6FEA0303 		mvn	r3, r3
 1942 0032 9AB2     		uxth	r2, r3
 1943 0034 7B68     		ldr	r3, [r7, #4]
 1944 0036 1A80     		strh	r2, [r3, #0]	@ movhi
1445:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1945              		.loc 1 1445 0
 1946 0038 07F11407 		add	r7, r7, #20
 1947 003c BD46     		mov	sp, r7
 1948 003e 80BC     		pop	{r7}
 1949 0040 7047     		bx	lr
 1950              		.cfi_endproc
 1951              	.LFE138:
 1953 0042 00BF     		.text
 1954              	.Letext0:
 1955              		.file 2 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 1956              		.file 3 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Device\\STM32F4xx\\Include/stm32f4xx.h"
 1957              		.file 4 "E:\\Desktop\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_rcc.h
 1958              		.file 5 "E:\\Desktop\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_usart
 1959              		.file 6 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_usart.c
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:19     .text.USART_DeInit:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:24     .text.USART_DeInit:00000000 USART_DeInit
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:146    .text.USART_Init:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:151    .text.USART_Init:00000000 USART_Init
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:377    .text.USART_StructInit:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:382    .text.USART_StructInit:00000000 USART_StructInit
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:433    .text.USART_ClockInit:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:438    .text.USART_ClockInit:00000000 USART_ClockInit
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:503    .text.USART_ClockStructInit:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:508    .text.USART_ClockStructInit:00000000 USART_ClockStructInit
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:551    .text.USART_Cmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:556    .text.USART_Cmd:00000000 USART_Cmd
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:608    .text.USART_SetPrescaler:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:613    .text.USART_SetPrescaler:00000000 USART_SetPrescaler
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:660    .text.USART_OverSampling8Cmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:665    .text.USART_OverSampling8Cmd:00000000 USART_OverSampling8Cmd
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:719    .text.USART_OneBitMethodCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:724    .text.USART_OneBitMethodCmd:00000000 USART_OneBitMethodCmd
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:776    .text.USART_SendData:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:781    .text.USART_SendData:00000000 USART_SendData
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:817    .text.USART_ReceiveData:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:822    .text.USART_ReceiveData:00000000 USART_ReceiveData
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:857    .text.USART_SetAddress:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:862    .text.USART_SetAddress:00000000 USART_SetAddress
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:909    .text.USART_ReceiverWakeUpCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:914    .text.USART_ReceiverWakeUpCmd:00000000 USART_ReceiverWakeUpCmd
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:966    .text.USART_WakeUpConfig:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:971    .text.USART_WakeUpConfig:00000000 USART_WakeUpConfig
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1017   .text.USART_LINBreakDetectLengthConfig:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1022   .text.USART_LINBreakDetectLengthConfig:00000000 USART_LINBreakDetectLengthConfig
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1068   .text.USART_LINCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1073   .text.USART_LINCmd:00000000 USART_LINCmd
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1125   .text.USART_SendBreak:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1130   .text.USART_SendBreak:00000000 USART_SendBreak
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1165   .text.USART_HalfDuplexCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1170   .text.USART_HalfDuplexCmd:00000000 USART_HalfDuplexCmd
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1222   .text.USART_SetGuardTime:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1227   .text.USART_SetGuardTime:00000000 USART_SetGuardTime
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1276   .text.USART_SmartCardCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1281   .text.USART_SmartCardCmd:00000000 USART_SmartCardCmd
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1333   .text.USART_SmartCardNACKCmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1338   .text.USART_SmartCardNACKCmd:00000000 USART_SmartCardNACKCmd
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1390   .text.USART_IrDAConfig:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1395   .text.USART_IrDAConfig:00000000 USART_IrDAConfig
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1441   .text.USART_IrDACmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1446   .text.USART_IrDACmd:00000000 USART_IrDACmd
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1498   .text.USART_DMACmd:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1503   .text.USART_DMACmd:00000000 USART_DMACmd
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1561   .text.USART_ITConfig:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1566   .text.USART_ITConfig:00000000 USART_ITConfig
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1672   .text.USART_GetFlagStatus:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1677   .text.USART_GetFlagStatus:00000000 USART_GetFlagStatus
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1730   .text.USART_ClearFlag:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1735   .text.USART_ClearFlag:00000000 USART_ClearFlag
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1770   .text.USART_GetITStatus:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1775   .text.USART_GetITStatus:00000000 USART_GetITStatus
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1900   .text.USART_ClearITPendingBit:00000000 $t
C:\Users\Alex\AppData\Local\Temp\cck5Zclv.s:1905   .text.USART_ClearITPendingBit:00000000 USART_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
