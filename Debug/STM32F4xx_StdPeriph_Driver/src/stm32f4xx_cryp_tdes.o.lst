   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_cryp_tdes.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.CRYP_TDES_ECB,"ax",%progbits
  19              		.align	2
  20              		.global	CRYP_TDES_ECB
  21              		.thumb
  22              		.thumb_func
  24              	CRYP_TDES_ECB:
  25              	.LFB110:
  26              		.file 1 "../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c"
   1:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /**
   2:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
   3:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @file    stm32f4xx_cryp_tdes.c
   4:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @author  MCD Application Team
   5:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @version V1.0.0
   6:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @date    30-September-2011
   7:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          input message using TDES in ECB/CBC modes .
   9:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          peripheral.
  11:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  12:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *  @verbatim
  13:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  14:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          ===================================================================
  15:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *                                   How to use this driver
  16:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          ===================================================================
  17:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          1. Enable The CRYP controller clock using 
  18:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  19:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  20:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          2. Encrypt and decrypt using TDES in ECB Mode using CRYP_TDES_ECB()
  21:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *             function.
  22:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  23:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          3. Encrypt and decrypt using TDES in CBC Mode using CRYP_TDES_CBC()
  24:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *             function.
  25:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  26:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *  @endverbatim
  27:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  28:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  29:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @attention
  30:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  31:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  32:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  33:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  34:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  35:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  36:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  37:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  38:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  39:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  40:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */ 
  41:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  42:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Includes ------------------------------------------------------------------*/
  43:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** #include "stm32f4xx_cryp.h"
  44:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  45:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  46:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  47:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @{
  48:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
  49:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  50:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP 
  51:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @brief CRYP driver modules
  52:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @{
  53:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
  54:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  55:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private typedef -----------------------------------------------------------*/
  56:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private define ------------------------------------------------------------*/
  57:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** #define TDESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  58:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  59:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private macro -------------------------------------------------------------*/
  60:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private variables ---------------------------------------------------------*/
  61:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private function prototypes -----------------------------------------------*/
  62:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private functions ---------------------------------------------------------*/
  63:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  64:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  65:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Private_Functions
  66:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @{
  67:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */ 
  68:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  69:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Group7 High Level TDES functions
  70:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****  *  @brief   High Level TDES functions 
  71:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****  *
  72:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** @verbatim   
  73:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  74:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****                           High Level TDES functions
  75:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  76:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  77:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  78:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** @endverbatim
  79:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @{
  80:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
  81:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  82:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /**
  83:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in ECB Mode
  84:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
  85:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
  86:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
  87:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
  88:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
  89:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  90:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
  91:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
  92:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
  93:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
  94:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
  95:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
  96:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
  97:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****                           uint32_t Ilength, uint8_t *Output)
  98:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** {
  27              		.loc 1 98 0
  28              		.cfi_startproc
  29              		@ args = 4, pretend = 0, frame = 136
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 90B5     		push	{r4, r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 4, -12
  37 0002 A3B0     		sub	sp, sp, #140
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 152
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 B960     		str	r1, [r7, #8]
  44 0008 7A60     		str	r2, [r7, #4]
  45 000a 3B60     		str	r3, [r7, #0]
  46 000c 0346     		mov	r3, r0
  47 000e FB73     		strb	r3, [r7, #15]
  99:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 100:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 101:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
  48              		.loc 1 101 0
  49 0010 4FF00003 		mov	r3, #0
  50 0014 7B61     		str	r3, [r7, #20]
 102:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
  51              		.loc 1 102 0
  52 0016 4FF00003 		mov	r3, #0
  53 001a 7B67     		str	r3, [r7, #116]
 103:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
  54              		.loc 1 103 0
  55 001c 4FF00103 		mov	r3, #1
  56 0020 87F88730 		strb	r3, [r7, #135]
 104:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
  57              		.loc 1 104 0
  58 0024 BB68     		ldr	r3, [r7, #8]
  59 0026 3B67     		str	r3, [r7, #112]
 105:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
  60              		.loc 1 105 0
  61 0028 7B68     		ldr	r3, [r7, #4]
  62 002a C7F88030 		str	r3, [r7, #128]
 106:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
  63              		.loc 1 106 0
  64 002e D7F89830 		ldr	r3, [r7, #152]
  65 0032 FB67     		str	r3, [r7, #124]
 107:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
  66              		.loc 1 107 0
  67 0034 4FF00003 		mov	r3, #0
  68 0038 BB67     		str	r3, [r7, #120]
 108:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 109:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 110:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
  69              		.loc 1 110 0
  70 003a 07F11803 		add	r3, r7, #24
  71 003e 1846     		mov	r0, r3
  72 0040 FFF7FEFF 		bl	CRYP_KeyStructInit
 111:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 112:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 113:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
  73              		.loc 1 113 0
  74 0044 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  75 0046 012B     		cmp	r3, #1
  76 0048 03D1     		bne	.L2
 114:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 115:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  77              		.loc 1 115 0
  78 004a 4FF00003 		mov	r3, #0
  79 004e 3B87     		strh	r3, [r7, #56]	@ movhi
  80 0050 02E0     		b	.L3
  81              	.L2:
 116:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 117:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
 118:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 119:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  82              		.loc 1 119 0
  83 0052 4FF00403 		mov	r3, #4
  84 0056 3B87     		strh	r3, [r7, #56]	@ movhi
  85              	.L3:
 120:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 121:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 122:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  86              		.loc 1 122 0
  87 0058 4FF00003 		mov	r3, #0
  88 005c 7B87     		strh	r3, [r7, #58]	@ movhi
 123:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  89              		.loc 1 123 0
  90 005e 4FF08003 		mov	r3, #128
  91 0062 BB87     		strh	r3, [r7, #60]	@ movhi
 124:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
  92              		.loc 1 124 0
  93 0064 07F13803 		add	r3, r7, #56
  94 0068 1846     		mov	r0, r3
  95 006a FFF7FEFF 		bl	CRYP_Init
 125:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 126:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 127:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  96              		.loc 1 127 0
  97 006e 3B6F     		ldr	r3, [r7, #112]
  98 0070 1B68     		ldr	r3, [r3, #0]
  99 0072 FB66     		str	r3, [r7, #108]
 100              	.LBB30:
 101              	.LBB31:
 102              		.file 2 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cmInstr.h"
   1:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /**************************************************************************//**
   2:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @version  V2.10
   5:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @date     19. July 2011
   6:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
   7:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @note
   8:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  10:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @par
  11:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  15:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * @par
  16:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  *
  22:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  ******************************************************************************/
  23:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  24:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  27:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  28:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   Access to dedicated instructions
  31:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   @{
  32:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** */
  33:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  34:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* ARM armcc specific functions */
  36:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  37:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #endif
  40:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  41:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  42:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
  43:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  44:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  46:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __NOP                             __nop
  47:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  48:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  49:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  51:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
  53:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  54:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __WFI                             __wfi
  55:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  56:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  57:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
  58:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  59:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  62:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __WFE                             __wfe
  63:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  64:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  65:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
  66:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  67:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  69:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __SEV                             __sev
  70:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  71:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  72:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  74:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  78:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  80:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  81:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  83:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  86:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  88:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  89:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  91:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
  94:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  96:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  97:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
  99:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 101:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 103:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 104:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __REV                             __rev
 105:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 106:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 107:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 109:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 111:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 113:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 114:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 116:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   rev16 r0, r0
 117:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   bx lr
 118:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 119:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 120:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 121:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 123:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 125:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 127:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 128:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 130:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   revsh r0, r0
 131:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   bx lr
 132:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 133:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 134:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 135:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 137:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 139:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 141:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 143:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 144:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __RBIT                            __rbit
 145:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 146:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 147:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 149:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 151:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 154:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 156:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 157:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 159:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 161:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 164:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 166:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 167:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 169:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 171:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 174:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 176:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 177:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 179:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 181:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 182:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 184:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 185:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 186:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 188:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 189:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 191:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 193:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 194:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 196:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 197:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 198:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 200:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 201:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 203:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 205:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 206:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 208:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 209:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 210:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 212:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 213:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 215:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 217:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 218:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CLREX                           __clrex
 219:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 220:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 221:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Signed Saturate
 222:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 223:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function saturates a signed value.
 224:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 225:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 228:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 229:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __SSAT                            __ssat
 230:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 231:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 232:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 234:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function saturates an unsigned value.
 235:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 236:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 239:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 240:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __USAT                            __usat
 241:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 242:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 243:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Count leading zeros
 244:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 245:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 247:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return             number of leading zeros in value
 249:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 250:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #define __CLZ                             __clz 
 251:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 252:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 254:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 255:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 256:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 259:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #include <cmsis_iar.h>
 260:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 261:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 262:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /* GNU gcc specific functions */
 264:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 265:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
 266:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 267:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 269:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 271:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("nop");
 272:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 273:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 274:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 275:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 277:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
 279:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 280:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 282:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 283:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 284:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 285:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 286:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
 287:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 288:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 291:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 293:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfe");
 294:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 295:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 296:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 297:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
 298:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 299:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 300:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 301:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
 302:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 303:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("sev");
 304:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 305:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 306:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 307:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 308:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 309:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
 310:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
 311:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
 312:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 313:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
 314:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 315:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("isb");
 316:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 317:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 318:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 319:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 320:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 321:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
 322:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 323:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 324:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
 325:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 326:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dsb");
 327:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 328:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 329:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 330:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 331:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 332:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
 333:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 334:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 335:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
 336:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 337:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("dmb");
 338:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** }
 339:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 340:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 341:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 342:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 343:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 344:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** 
 345:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 346:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 347:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****  */
 348:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
 349:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h **** {
 350:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   uint32_t result;
 351:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 103              		.loc 2 352 0
 104 0074 FB6E     		ldr	r3, [r7, #108]
 105              	@ 352 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 106 0076 1CBA     		rev r4, r3
 107              	@ 0 "" 2
 108              		.thumb
 109 0078 BC66     		str	r4, [r7, #104]
 353:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   return(result);
 110              		.loc 2 353 0
 111 007a BB6E     		ldr	r3, [r7, #104]
 112              	.LBE31:
 113              	.LBE30:
 114              		.loc 1 127 0
 115 007c 3B62     		str	r3, [r7, #32]
 128:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 116              		.loc 1 128 0
 117 007e 3B6F     		ldr	r3, [r7, #112]
 118 0080 03F10403 		add	r3, r3, #4
 119 0084 3B67     		str	r3, [r7, #112]
 129:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 120              		.loc 1 129 0
 121 0086 3B6F     		ldr	r3, [r7, #112]
 122 0088 1B68     		ldr	r3, [r3, #0]
 123 008a 7B66     		str	r3, [r7, #100]
 124              	.LBB32:
 125              	.LBB33:
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 126              		.loc 2 352 0
 127 008c 7B6E     		ldr	r3, [r7, #100]
 128              	@ 352 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 129 008e 1CBA     		rev r4, r3
 130              	@ 0 "" 2
 131              		.thumb
 132 0090 3C66     		str	r4, [r7, #96]
 133              		.loc 2 353 0
 134 0092 3B6E     		ldr	r3, [r7, #96]
 135              	.LBE33:
 136              	.LBE32:
 137              		.loc 1 129 0
 138 0094 7B62     		str	r3, [r7, #36]
 130:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 139              		.loc 1 130 0
 140 0096 3B6F     		ldr	r3, [r7, #112]
 141 0098 03F10403 		add	r3, r3, #4
 142 009c 3B67     		str	r3, [r7, #112]
 131:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 143              		.loc 1 131 0
 144 009e 3B6F     		ldr	r3, [r7, #112]
 145 00a0 1B68     		ldr	r3, [r3, #0]
 146 00a2 FB65     		str	r3, [r7, #92]
 147              	.LBB34:
 148              	.LBB35:
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 149              		.loc 2 352 0
 150 00a4 FB6D     		ldr	r3, [r7, #92]
 151              	@ 352 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 152 00a6 1CBA     		rev r4, r3
 153              	@ 0 "" 2
 154              		.thumb
 155 00a8 BC65     		str	r4, [r7, #88]
 156              		.loc 2 353 0
 157 00aa BB6D     		ldr	r3, [r7, #88]
 158              	.LBE35:
 159              	.LBE34:
 160              		.loc 1 131 0
 161 00ac BB62     		str	r3, [r7, #40]
 132:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 162              		.loc 1 132 0
 163 00ae 3B6F     		ldr	r3, [r7, #112]
 164 00b0 03F10403 		add	r3, r3, #4
 165 00b4 3B67     		str	r3, [r7, #112]
 133:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 166              		.loc 1 133 0
 167 00b6 3B6F     		ldr	r3, [r7, #112]
 168 00b8 1B68     		ldr	r3, [r3, #0]
 169 00ba 7B65     		str	r3, [r7, #84]
 170              	.LBB36:
 171              	.LBB37:
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 172              		.loc 2 352 0
 173 00bc 7B6D     		ldr	r3, [r7, #84]
 174              	@ 352 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 175 00be 1CBA     		rev r4, r3
 176              	@ 0 "" 2
 177              		.thumb
 178 00c0 3C65     		str	r4, [r7, #80]
 179              		.loc 2 353 0
 180 00c2 3B6D     		ldr	r3, [r7, #80]
 181              	.LBE37:
 182              	.LBE36:
 183              		.loc 1 133 0
 184 00c4 FB62     		str	r3, [r7, #44]
 134:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 185              		.loc 1 134 0
 186 00c6 3B6F     		ldr	r3, [r7, #112]
 187 00c8 03F10403 		add	r3, r3, #4
 188 00cc 3B67     		str	r3, [r7, #112]
 135:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 189              		.loc 1 135 0
 190 00ce 3B6F     		ldr	r3, [r7, #112]
 191 00d0 1B68     		ldr	r3, [r3, #0]
 192 00d2 FB64     		str	r3, [r7, #76]
 193              	.LBB38:
 194              	.LBB39:
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 195              		.loc 2 352 0
 196 00d4 FB6C     		ldr	r3, [r7, #76]
 197              	@ 352 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 198 00d6 1CBA     		rev r4, r3
 199              	@ 0 "" 2
 200              		.thumb
 201 00d8 BC64     		str	r4, [r7, #72]
 202              		.loc 2 353 0
 203 00da BB6C     		ldr	r3, [r7, #72]
 204              	.LBE39:
 205              	.LBE38:
 206              		.loc 1 135 0
 207 00dc 3B63     		str	r3, [r7, #48]
 136:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 208              		.loc 1 136 0
 209 00de 3B6F     		ldr	r3, [r7, #112]
 210 00e0 03F10403 		add	r3, r3, #4
 211 00e4 3B67     		str	r3, [r7, #112]
 137:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 212              		.loc 1 137 0
 213 00e6 3B6F     		ldr	r3, [r7, #112]
 214 00e8 1B68     		ldr	r3, [r3, #0]
 215 00ea 7B64     		str	r3, [r7, #68]
 216              	.LBB40:
 217              	.LBB41:
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 218              		.loc 2 352 0
 219 00ec 7B6C     		ldr	r3, [r7, #68]
 220              	@ 352 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 221 00ee 1CBA     		rev r4, r3
 222              	@ 0 "" 2
 223              		.thumb
 224 00f0 3C64     		str	r4, [r7, #64]
 225              		.loc 2 353 0
 226 00f2 3B6C     		ldr	r3, [r7, #64]
 227              	.LBE41:
 228              	.LBE40:
 229              		.loc 1 137 0
 230 00f4 7B63     		str	r3, [r7, #52]
 138:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 231              		.loc 1 138 0
 232 00f6 07F11803 		add	r3, r7, #24
 233 00fa 1846     		mov	r0, r3
 234 00fc FFF7FEFF 		bl	CRYP_KeyInit
 139:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 140:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 141:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 235              		.loc 1 141 0
 236 0100 FFF7FEFF 		bl	CRYP_FIFOFlush
 142:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 143:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 144:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 237              		.loc 1 144 0
 238 0104 4FF00100 		mov	r0, #1
 239 0108 FFF7FEFF 		bl	CRYP_Cmd
 145:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 240              		.loc 1 146 0
 241 010c 4FF00003 		mov	r3, #0
 242 0110 BB67     		str	r3, [r7, #120]
 243 0112 49E0     		b	.L4
 244              	.L10:
 147:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 148:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     /* Write the Input block in the Input FIFO */
 149:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 245              		.loc 1 149 0
 246 0114 D7F88030 		ldr	r3, [r7, #128]
 247 0118 1B68     		ldr	r3, [r3, #0]
 248 011a 1846     		mov	r0, r3
 249 011c FFF7FEFF 		bl	CRYP_DataIn
 150:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 250              		.loc 1 150 0
 251 0120 D7F88030 		ldr	r3, [r7, #128]
 252 0124 03F10403 		add	r3, r3, #4
 253 0128 C7F88030 		str	r3, [r7, #128]
 151:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 254              		.loc 1 151 0
 255 012c D7F88030 		ldr	r3, [r7, #128]
 256 0130 1B68     		ldr	r3, [r3, #0]
 257 0132 1846     		mov	r0, r3
 258 0134 FFF7FEFF 		bl	CRYP_DataIn
 152:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 259              		.loc 1 152 0
 260 0138 D7F88030 		ldr	r3, [r7, #128]
 261 013c 03F10403 		add	r3, r3, #4
 262 0140 C7F88030 		str	r3, [r7, #128]
 153:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 154:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     /* Wait until the complete message has been processed */
 155:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     counter = 0;
 263              		.loc 1 155 0
 264 0144 4FF00003 		mov	r3, #0
 265 0148 7B61     		str	r3, [r7, #20]
 266              	.L6:
 156:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     do
 157:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 158:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 267              		.loc 1 158 0 discriminator 1
 268 014a 4FF01000 		mov	r0, #16
 269 014e FFF7FEFF 		bl	CRYP_GetFlagStatus
 270 0152 0346     		mov	r3, r0
 271 0154 7B67     		str	r3, [r7, #116]
 159:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       counter++;
 272              		.loc 1 159 0 discriminator 1
 273 0156 7B69     		ldr	r3, [r7, #20]
 274 0158 03F10103 		add	r3, r3, #1
 275 015c 7B61     		str	r3, [r7, #20]
 160:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 276              		.loc 1 160 0 discriminator 1
 277 015e 7B69     		ldr	r3, [r7, #20]
 278 0160 B3F5803F 		cmp	r3, #65536
 279 0164 02D0     		beq	.L5
 280 0166 7B6F     		ldr	r3, [r7, #116]
 281 0168 002B     		cmp	r3, #0
 282 016a EED1     		bne	.L6
 283              	.L5:
 161:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 162:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     if (busystatus != RESET)
 284              		.loc 1 162 0
 285 016c 7B6F     		ldr	r3, [r7, #116]
 286 016e 002B     		cmp	r3, #0
 287 0170 04D0     		beq	.L7
 163:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 164:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****        status = ERROR;
 288              		.loc 1 164 0
 289 0172 4FF00003 		mov	r3, #0
 290 0176 87F88730 		strb	r3, [r7, #135]
 291 017a 11E0     		b	.L8
 292              	.L7:
 165:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }
 166:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     else
 167:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 168:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 169:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       /* Read the Output block from the Output FIFO */
 170:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 293              		.loc 1 170 0
 294 017c FC6F     		ldr	r4, [r7, #124]
 295 017e FFF7FEFF 		bl	CRYP_DataOut
 296 0182 0346     		mov	r3, r0
 297 0184 2360     		str	r3, [r4, #0]
 171:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 298              		.loc 1 171 0
 299 0186 FB6F     		ldr	r3, [r7, #124]
 300 0188 03F10403 		add	r3, r3, #4
 301 018c FB67     		str	r3, [r7, #124]
 172:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 302              		.loc 1 172 0
 303 018e FC6F     		ldr	r4, [r7, #124]
 304 0190 FFF7FEFF 		bl	CRYP_DataOut
 305 0194 0346     		mov	r3, r0
 306 0196 2360     		str	r3, [r4, #0]
 173:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 307              		.loc 1 173 0
 308 0198 FB6F     		ldr	r3, [r7, #124]
 309 019a 03F10403 		add	r3, r3, #4
 310 019e FB67     		str	r3, [r7, #124]
 311              	.L8:
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 312              		.loc 1 146 0
 313 01a0 BB6F     		ldr	r3, [r7, #120]
 314 01a2 03F10803 		add	r3, r3, #8
 315 01a6 BB67     		str	r3, [r7, #120]
 316              	.L4:
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 317              		.loc 1 146 0 is_stmt 0 discriminator 1
 318 01a8 BA6F     		ldr	r2, [r7, #120]
 319 01aa 3B68     		ldr	r3, [r7, #0]
 320 01ac 9A42     		cmp	r2, r3
 321 01ae 03D2     		bcs	.L9
 146:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 322              		.loc 1 146 0 discriminator 2
 323 01b0 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 324 01b4 002B     		cmp	r3, #0
 325 01b6 ADD1     		bne	.L10
 326              	.L9:
 174:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }
 175:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 176:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 177:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Disable Crypto */
 178:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(DISABLE);
 327              		.loc 1 178 0 is_stmt 1
 328 01b8 4FF00000 		mov	r0, #0
 329 01bc FFF7FEFF 		bl	CRYP_Cmd
 179:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 180:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   return status; 
 330              		.loc 1 180 0
 331 01c0 97F88730 		ldrb	r3, [r7, #135]	@ zero_extendqisi2
 181:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** }
 332              		.loc 1 181 0
 333 01c4 1846     		mov	r0, r3
 334 01c6 07F18C07 		add	r7, r7, #140
 335 01ca BD46     		mov	sp, r7
 336 01cc 90BD     		pop	{r4, r7, pc}
 337              		.cfi_endproc
 338              	.LFE110:
 340 01ce 00BF     		.section	.text.CRYP_TDES_CBC,"ax",%progbits
 341              		.align	2
 342              		.global	CRYP_TDES_CBC
 343              		.thumb
 344              		.thumb_func
 346              	CRYP_TDES_CBC:
 347              	.LFB111:
 182:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 183:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /**
 184:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in CBC Mode
 185:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
 186:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
 187:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
 188:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
 189:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
 190:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  InitVectors: Initialisation Vectors used for TDES algorithm.
 191:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
 192:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 193:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
 194:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
 195:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
 196:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
 197:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
 198:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
 199:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****                           uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 200:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** {
 348              		.loc 1 200 0
 349              		.cfi_startproc
 350              		@ args = 8, pretend = 0, frame = 168
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352 0000 90B5     		push	{r4, r7, lr}
 353              	.LCFI3:
 354              		.cfi_def_cfa_offset 12
 355              		.cfi_offset 14, -4
 356              		.cfi_offset 7, -8
 357              		.cfi_offset 4, -12
 358 0002 ABB0     		sub	sp, sp, #172
 359              	.LCFI4:
 360              		.cfi_def_cfa_offset 184
 361 0004 00AF     		add	r7, sp, #0
 362              	.LCFI5:
 363              		.cfi_def_cfa_register 7
 364 0006 B960     		str	r1, [r7, #8]
 365 0008 7A60     		str	r2, [r7, #4]
 366 000a 3B60     		str	r3, [r7, #0]
 367 000c 0346     		mov	r3, r0
 368 000e FB73     		strb	r3, [r7, #15]
 201:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 202:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 203:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
 204:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
 369              		.loc 1 204 0
 370 0010 4FF00003 		mov	r3, #0
 371 0014 3B61     		str	r3, [r7, #16]
 205:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
 372              		.loc 1 205 0
 373 0016 4FF00003 		mov	r3, #0
 374 001a C7F89430 		str	r3, [r7, #148]
 206:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
 375              		.loc 1 206 0
 376 001e 4FF00103 		mov	r3, #1
 377 0022 87F8A730 		strb	r3, [r7, #167]
 207:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 378              		.loc 1 207 0
 379 0026 BB68     		ldr	r3, [r7, #8]
 380 0028 C7F89030 		str	r3, [r7, #144]
 208:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 381              		.loc 1 208 0
 382 002c 3B68     		ldr	r3, [r7, #0]
 383 002e C7F8A030 		str	r3, [r7, #160]
 209:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
 384              		.loc 1 209 0
 385 0032 D7F8BC30 		ldr	r3, [r7, #188]
 386 0036 C7F89C30 		str	r3, [r7, #156]
 210:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 387              		.loc 1 210 0
 388 003a 7B68     		ldr	r3, [r7, #4]
 389 003c C7F88C30 		str	r3, [r7, #140]
 211:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
 390              		.loc 1 211 0
 391 0040 4FF00003 		mov	r3, #0
 392 0044 C7F89830 		str	r3, [r7, #152]
 212:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 213:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 214:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 393              		.loc 1 214 0
 394 0048 07F12403 		add	r3, r7, #36
 395 004c 1846     		mov	r0, r3
 396 004e FFF7FEFF 		bl	CRYP_KeyStructInit
 215:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 216:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 217:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
 397              		.loc 1 217 0
 398 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 399 0054 012B     		cmp	r3, #1
 400 0056 04D1     		bne	.L12
 218:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 219:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 401              		.loc 1 219 0
 402 0058 4FF00003 		mov	r3, #0
 403 005c A7F84430 		strh	r3, [r7, #68]	@ movhi
 404 0060 03E0     		b	.L13
 405              	.L12:
 220:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 221:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   else
 222:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 223:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 406              		.loc 1 223 0
 407 0062 4FF00403 		mov	r3, #4
 408 0066 A7F84430 		strh	r3, [r7, #68]	@ movhi
 409              	.L13:
 224:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 225:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 410              		.loc 1 225 0
 411 006a 4FF00803 		mov	r3, #8
 412 006e A7F84630 		strh	r3, [r7, #70]	@ movhi
 226:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 413              		.loc 1 226 0
 414 0072 4FF08003 		mov	r3, #128
 415 0076 A7F84830 		strh	r3, [r7, #72]	@ movhi
 227:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 228:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
 416              		.loc 1 228 0
 417 007a 07F14403 		add	r3, r7, #68
 418 007e 1846     		mov	r0, r3
 419 0080 FFF7FEFF 		bl	CRYP_Init
 229:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 230:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 231:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 420              		.loc 1 231 0
 421 0084 D7F89030 		ldr	r3, [r7, #144]
 422 0088 1B68     		ldr	r3, [r3, #0]
 423 008a C7F88830 		str	r3, [r7, #136]
 424              	.LBB42:
 425              	.LBB43:
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 426              		.loc 2 352 0
 427 008e D7F88830 		ldr	r3, [r7, #136]
 428              	@ 352 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 429 0092 1CBA     		rev r4, r3
 430              	@ 0 "" 2
 431              		.thumb
 432 0094 C7F88440 		str	r4, [r7, #132]
 433              		.loc 2 353 0
 434 0098 D7F88430 		ldr	r3, [r7, #132]
 435              	.LBE43:
 436              	.LBE42:
 437              		.loc 1 231 0
 438 009c FB62     		str	r3, [r7, #44]
 232:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 439              		.loc 1 232 0
 440 009e D7F89030 		ldr	r3, [r7, #144]
 441 00a2 03F10403 		add	r3, r3, #4
 442 00a6 C7F89030 		str	r3, [r7, #144]
 233:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 443              		.loc 1 233 0
 444 00aa D7F89030 		ldr	r3, [r7, #144]
 445 00ae 1B68     		ldr	r3, [r3, #0]
 446 00b0 C7F88030 		str	r3, [r7, #128]
 447              	.LBB44:
 448              	.LBB45:
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 449              		.loc 2 352 0
 450 00b4 D7F88030 		ldr	r3, [r7, #128]
 451              	@ 352 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 452 00b8 1CBA     		rev r4, r3
 453              	@ 0 "" 2
 454              		.thumb
 455 00ba FC67     		str	r4, [r7, #124]
 456              		.loc 2 353 0
 457 00bc FB6F     		ldr	r3, [r7, #124]
 458              	.LBE45:
 459              	.LBE44:
 460              		.loc 1 233 0
 461 00be 3B63     		str	r3, [r7, #48]
 234:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 462              		.loc 1 234 0
 463 00c0 D7F89030 		ldr	r3, [r7, #144]
 464 00c4 03F10403 		add	r3, r3, #4
 465 00c8 C7F89030 		str	r3, [r7, #144]
 235:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 466              		.loc 1 235 0
 467 00cc D7F89030 		ldr	r3, [r7, #144]
 468 00d0 1B68     		ldr	r3, [r3, #0]
 469 00d2 BB67     		str	r3, [r7, #120]
 470              	.LBB46:
 471              	.LBB47:
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 472              		.loc 2 352 0
 473 00d4 BB6F     		ldr	r3, [r7, #120]
 474              	@ 352 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 475 00d6 1CBA     		rev r4, r3
 476              	@ 0 "" 2
 477              		.thumb
 478 00d8 7C67     		str	r4, [r7, #116]
 479              		.loc 2 353 0
 480 00da 7B6F     		ldr	r3, [r7, #116]
 481              	.LBE47:
 482              	.LBE46:
 483              		.loc 1 235 0
 484 00dc 7B63     		str	r3, [r7, #52]
 236:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 485              		.loc 1 236 0
 486 00de D7F89030 		ldr	r3, [r7, #144]
 487 00e2 03F10403 		add	r3, r3, #4
 488 00e6 C7F89030 		str	r3, [r7, #144]
 237:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 489              		.loc 1 237 0
 490 00ea D7F89030 		ldr	r3, [r7, #144]
 491 00ee 1B68     		ldr	r3, [r3, #0]
 492 00f0 3B67     		str	r3, [r7, #112]
 493              	.LBB48:
 494              	.LBB49:
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 495              		.loc 2 352 0
 496 00f2 3B6F     		ldr	r3, [r7, #112]
 497              	@ 352 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 498 00f4 1CBA     		rev r4, r3
 499              	@ 0 "" 2
 500              		.thumb
 501 00f6 FC66     		str	r4, [r7, #108]
 502              		.loc 2 353 0
 503 00f8 FB6E     		ldr	r3, [r7, #108]
 504              	.LBE49:
 505              	.LBE48:
 506              		.loc 1 237 0
 507 00fa BB63     		str	r3, [r7, #56]
 238:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 508              		.loc 1 238 0
 509 00fc D7F89030 		ldr	r3, [r7, #144]
 510 0100 03F10403 		add	r3, r3, #4
 511 0104 C7F89030 		str	r3, [r7, #144]
 239:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 512              		.loc 1 239 0
 513 0108 D7F89030 		ldr	r3, [r7, #144]
 514 010c 1B68     		ldr	r3, [r3, #0]
 515 010e BB66     		str	r3, [r7, #104]
 516              	.LBB50:
 517              	.LBB51:
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 518              		.loc 2 352 0
 519 0110 BB6E     		ldr	r3, [r7, #104]
 520              	@ 352 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 521 0112 1CBA     		rev r4, r3
 522              	@ 0 "" 2
 523              		.thumb
 524 0114 7C66     		str	r4, [r7, #100]
 525              		.loc 2 353 0
 526 0116 7B6E     		ldr	r3, [r7, #100]
 527              	.LBE51:
 528              	.LBE50:
 529              		.loc 1 239 0
 530 0118 FB63     		str	r3, [r7, #60]
 240:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 531              		.loc 1 240 0
 532 011a D7F89030 		ldr	r3, [r7, #144]
 533 011e 03F10403 		add	r3, r3, #4
 534 0122 C7F89030 		str	r3, [r7, #144]
 241:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 535              		.loc 1 241 0
 536 0126 D7F89030 		ldr	r3, [r7, #144]
 537 012a 1B68     		ldr	r3, [r3, #0]
 538 012c 3B66     		str	r3, [r7, #96]
 539              	.LBB52:
 540              	.LBB53:
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 541              		.loc 2 352 0
 542 012e 3B6E     		ldr	r3, [r7, #96]
 543              	@ 352 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 544 0130 1CBA     		rev r4, r3
 545              	@ 0 "" 2
 546              		.thumb
 547 0132 FC65     		str	r4, [r7, #92]
 548              		.loc 2 353 0
 549 0134 FB6D     		ldr	r3, [r7, #92]
 550              	.LBE53:
 551              	.LBE52:
 552              		.loc 1 241 0
 553 0136 3B64     		str	r3, [r7, #64]
 242:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 554              		.loc 1 242 0
 555 0138 07F12403 		add	r3, r7, #36
 556 013c 1846     		mov	r0, r3
 557 013e FFF7FEFF 		bl	CRYP_KeyInit
 243:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 244:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Initialization Vectors */
 245:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 558              		.loc 1 245 0
 559 0142 D7F88C30 		ldr	r3, [r7, #140]
 560 0146 1B68     		ldr	r3, [r3, #0]
 561 0148 BB65     		str	r3, [r7, #88]
 562              	.LBB54:
 563              	.LBB55:
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 564              		.loc 2 352 0
 565 014a BB6D     		ldr	r3, [r7, #88]
 566              	@ 352 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 567 014c 1CBA     		rev r4, r3
 568              	@ 0 "" 2
 569              		.thumb
 570 014e 7C65     		str	r4, [r7, #84]
 571              		.loc 2 353 0
 572 0150 7B6D     		ldr	r3, [r7, #84]
 573              	.LBE55:
 574              	.LBE54:
 575              		.loc 1 245 0
 576 0152 7B61     		str	r3, [r7, #20]
 246:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ivaddr+=4;
 577              		.loc 1 246 0
 578 0154 D7F88C30 		ldr	r3, [r7, #140]
 579 0158 03F10403 		add	r3, r3, #4
 580 015c C7F88C30 		str	r3, [r7, #140]
 247:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 581              		.loc 1 247 0
 582 0160 D7F88C30 		ldr	r3, [r7, #140]
 583 0164 1B68     		ldr	r3, [r3, #0]
 584 0166 3B65     		str	r3, [r7, #80]
 585              	.LBB56:
 586              	.LBB57:
 352:E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 587              		.loc 2 352 0
 588 0168 3B6D     		ldr	r3, [r7, #80]
 589              	@ 352 "E:\Desktop\thundercyer-the-alarm-clock\CMSIS\Include/core_cmInstr.h" 1
 590 016a 1CBA     		rev r4, r3
 591              	@ 0 "" 2
 592              		.thumb
 593 016c FC64     		str	r4, [r7, #76]
 594              		.loc 2 353 0
 595 016e FB6C     		ldr	r3, [r7, #76]
 596              	.LBE57:
 597              	.LBE56:
 598              		.loc 1 247 0
 599 0170 BB61     		str	r3, [r7, #24]
 248:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 600              		.loc 1 248 0
 601 0172 07F11403 		add	r3, r7, #20
 602 0176 1846     		mov	r0, r3
 603 0178 FFF7FEFF 		bl	CRYP_IVInit
 249:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 250:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 251:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 604              		.loc 1 251 0
 605 017c FFF7FEFF 		bl	CRYP_FIFOFlush
 252:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 253:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 254:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 606              		.loc 1 254 0
 607 0180 4FF00100 		mov	r0, #1
 608 0184 FFF7FEFF 		bl	CRYP_Cmd
 255:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 609              		.loc 1 256 0
 610 0188 4FF00003 		mov	r3, #0
 611 018c C7F89830 		str	r3, [r7, #152]
 612 0190 54E0     		b	.L14
 613              	.L20:
 257:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 258:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     /* Write the Input block in the Input FIFO */
 259:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 614              		.loc 1 259 0
 615 0192 D7F8A030 		ldr	r3, [r7, #160]
 616 0196 1B68     		ldr	r3, [r3, #0]
 617 0198 1846     		mov	r0, r3
 618 019a FFF7FEFF 		bl	CRYP_DataIn
 260:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 619              		.loc 1 260 0
 620 019e D7F8A030 		ldr	r3, [r7, #160]
 621 01a2 03F10403 		add	r3, r3, #4
 622 01a6 C7F8A030 		str	r3, [r7, #160]
 261:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 623              		.loc 1 261 0
 624 01aa D7F8A030 		ldr	r3, [r7, #160]
 625 01ae 1B68     		ldr	r3, [r3, #0]
 626 01b0 1846     		mov	r0, r3
 627 01b2 FFF7FEFF 		bl	CRYP_DataIn
 262:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 628              		.loc 1 262 0
 629 01b6 D7F8A030 		ldr	r3, [r7, #160]
 630 01ba 03F10403 		add	r3, r3, #4
 631 01be C7F8A030 		str	r3, [r7, #160]
 263:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 264:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     /* Wait until the complete message has been processed */
 265:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     counter = 0;
 632              		.loc 1 265 0
 633 01c2 4FF00003 		mov	r3, #0
 634 01c6 3B61     		str	r3, [r7, #16]
 635              	.L16:
 266:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     do
 267:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 268:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 636              		.loc 1 268 0 discriminator 1
 637 01c8 4FF01000 		mov	r0, #16
 638 01cc FFF7FEFF 		bl	CRYP_GetFlagStatus
 639 01d0 0346     		mov	r3, r0
 640 01d2 C7F89430 		str	r3, [r7, #148]
 269:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       counter++;
 641              		.loc 1 269 0 discriminator 1
 642 01d6 3B69     		ldr	r3, [r7, #16]
 643 01d8 03F10103 		add	r3, r3, #1
 644 01dc 3B61     		str	r3, [r7, #16]
 270:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 645              		.loc 1 270 0 discriminator 1
 646 01de 3B69     		ldr	r3, [r7, #16]
 647 01e0 B3F5803F 		cmp	r3, #65536
 648 01e4 03D0     		beq	.L15
 649 01e6 D7F89430 		ldr	r3, [r7, #148]
 650 01ea 002B     		cmp	r3, #0
 651 01ec ECD1     		bne	.L16
 652              	.L15:
 271:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 272:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     if (busystatus != RESET)
 653              		.loc 1 272 0
 654 01ee D7F89430 		ldr	r3, [r7, #148]
 655 01f2 002B     		cmp	r3, #0
 656 01f4 04D0     		beq	.L17
 273:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****    {
 274:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****        status = ERROR;
 657              		.loc 1 274 0
 658 01f6 4FF00003 		mov	r3, #0
 659 01fa 87F8A730 		strb	r3, [r7, #167]
 660 01fe 17E0     		b	.L18
 661              	.L17:
 275:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }
 276:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     else
 277:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 278:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 279:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       /* Read the Output block from the Output FIFO */
 280:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 662              		.loc 1 280 0
 663 0200 D7F89C40 		ldr	r4, [r7, #156]
 664 0204 FFF7FEFF 		bl	CRYP_DataOut
 665 0208 0346     		mov	r3, r0
 666 020a 2360     		str	r3, [r4, #0]
 281:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 667              		.loc 1 281 0
 668 020c D7F89C30 		ldr	r3, [r7, #156]
 669 0210 03F10403 		add	r3, r3, #4
 670 0214 C7F89C30 		str	r3, [r7, #156]
 282:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 671              		.loc 1 282 0
 672 0218 D7F89C40 		ldr	r4, [r7, #156]
 673 021c FFF7FEFF 		bl	CRYP_DataOut
 674 0220 0346     		mov	r3, r0
 675 0222 2360     		str	r3, [r4, #0]
 283:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 676              		.loc 1 283 0
 677 0224 D7F89C30 		ldr	r3, [r7, #156]
 678 0228 03F10403 		add	r3, r3, #4
 679 022c C7F89C30 		str	r3, [r7, #156]
 680              	.L18:
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 681              		.loc 1 256 0
 682 0230 D7F89830 		ldr	r3, [r7, #152]
 683 0234 03F10803 		add	r3, r3, #8
 684 0238 C7F89830 		str	r3, [r7, #152]
 685              	.L14:
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 686              		.loc 1 256 0 is_stmt 0 discriminator 1
 687 023c D7F89820 		ldr	r2, [r7, #152]
 688 0240 D7F8B830 		ldr	r3, [r7, #184]
 689 0244 9A42     		cmp	r2, r3
 690 0246 03D2     		bcs	.L19
 256:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 691              		.loc 1 256 0 discriminator 2
 692 0248 97F8A730 		ldrb	r3, [r7, #167]	@ zero_extendqisi2
 693 024c 002B     		cmp	r3, #0
 694 024e A0D1     		bne	.L20
 695              	.L19:
 284:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }
 285:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 286:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 287:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Disable Crypto */
 288:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(DISABLE);
 696              		.loc 1 288 0 is_stmt 1
 697 0250 4FF00000 		mov	r0, #0
 698 0254 FFF7FEFF 		bl	CRYP_Cmd
 289:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 290:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   return status; 
 699              		.loc 1 290 0
 700 0258 97F8A730 		ldrb	r3, [r7, #167]	@ zero_extendqisi2
 291:../STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** }
 701              		.loc 1 291 0
 702 025c 1846     		mov	r0, r3
 703 025e 07F1AC07 		add	r7, r7, #172
 704 0262 BD46     		mov	sp, r7
 705 0264 90BD     		pop	{r4, r7, pc}
 706              		.cfi_endproc
 707              	.LFE111:
 709 0266 00BF     		.text
 710              	.Letext0:
 711              		.file 3 "e:/elektronik/toolchain/yagarto/lib/gcc/../../arm-none-eabi/sys-include/stdint.h"
 712              		.file 4 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Device\\STM32F4xx\\Include/stm32f4xx.h"
 713              		.file 5 "E:\\Desktop\\thundercyer-the-alarm-clock\\STM32F4xx_StdPeriph_Driver\\inc/stm32f4xx_cryp.
 714              		.file 6 "E:\\Desktop\\thundercyer-the-alarm-clock\\CMSIS\\Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_cryp_tdes.c
C:\Users\Alex\AppData\Local\Temp\ccMFV0aR.s:19     .text.CRYP_TDES_ECB:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccMFV0aR.s:24     .text.CRYP_TDES_ECB:00000000 CRYP_TDES_ECB
C:\Users\Alex\AppData\Local\Temp\ccMFV0aR.s:341    .text.CRYP_TDES_CBC:00000000 $t
C:\Users\Alex\AppData\Local\Temp\ccMFV0aR.s:346    .text.CRYP_TDES_CBC:00000000 CRYP_TDES_CBC
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
